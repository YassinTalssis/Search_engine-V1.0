"\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n\n\n\n\nWhat\u00e2\u0080\u0099s New In Python 3.9\u00c2\u00b6\n\nRelease\n3.9.5\n\nDate\nMay 11, 2021\n\nEditor\n\u00c5\u0081ukasz Langa\n\n\nThis article explains the new features in Python 3.9, compared to 3.8.\nPython 3.9 was released on October 5th, 2020.\nFor full details, see the changelog.\n\nSee also\nPEP 596 - Python 3.9 Release Schedule\n\n\nSummary \u00e2\u0080\u0093 Release highlights\u00c2\u00b6\nNew syntax features:\n\nPEP 584, union operators added to dict;\nPEP 585, type hinting generics in standard collections;\nPEP 614, relaxed grammar restrictions on decorators.\n\nNew built-in features:\n\nPEP 616, string methods to remove prefixes and suffixes.\n\nNew features in the standard library:\n\nPEP 593, flexible function and variable annotations;\nos.pidfd_open() added that allows process management without races\nand signals.\n\nInterpreter improvements:\n\nPEP 573, fast access to module state from methods of C extension\ntypes;\nPEP 617, CPython now uses a new parser based on PEG;\na number of Python builtins (range, tuple, set, frozenset, list, dict) are\nnow sped up using PEP 590 vectorcall;\ngarbage collection does not block on resurrected objects;\na number of Python modules (_abc, audioop, _bz2,\n_codecs, _contextvars, _crypt, _functools,\n_json, _locale, math, operator, resource,\ntime, _weakref) now use multiphase initialization as defined\nby PEP 489;\na number of standard library modules (audioop, ast, grp,\n_hashlib, pwd, _posixsubprocess, random,\nselect, struct, termios, zlib) are now using\nthe stable ABI defined by PEP 384.\n\nNew library modules:\n\nPEP 615, the IANA Time Zone Database is now present in the standard\nlibrary in the zoneinfo module;\nan implementation of a topological sort of a graph is now provided in\nthe new graphlib module.\n\nRelease process changes:\n\nPEP 602, CPython adopts an annual release cycle.\n\n\n\nYou should check for DeprecationWarning in your code\u00c2\u00b6\nWhen Python 2.7 was still supported, a lot of functionality in Python 3\nwas kept for backward compatibility with Python 2.7. With the end of Python\n2 support, these backward compatibility layers have been removed, or will\nbe removed soon. Most of them emitted a DeprecationWarning warning for\nseveral years. For example, using collections.Mapping instead of\ncollections.abc.Mapping emits a DeprecationWarning since Python\n3.3, released in 2012.\nTest your application with the -W default command-line option to see\nDeprecationWarning and PendingDeprecationWarning, or even with\n-W error to treat them as errors. Warnings Filter can be used to ignore warnings from third-party code.\nPython 3.9 is the last version providing those Python 2 backward compatibility\nlayers, to give more time to Python projects maintainers to organize the\nremoval of the Python 2 support and add support for Python 3.9.\nAliases to Abstract Base Classes in\nthe collections module, like collections.Mapping alias to\ncollections.abc.Mapping, are kept for one last release for backward\ncompatibility. They will be removed from Python 3.10.\nMore generally, try to run your tests in the Python Development Mode which helps to prepare your code to make it compatible with the\nnext Python version.\nNote: a number of pre-existing deprecations were removed in this version of\nPython as well. Consult the Removed section.\n\n\nNew Features\u00c2\u00b6\n\nDictionary Merge & Update Operators\u00c2\u00b6\nMerge (|) and update (|=) operators have been added to the built-in\ndict class. Those complement the existing dict.update and\n{**d1, **d2} methods of merging dictionaries.\nExample:\n>>> x = {\"key1\": \"value1 from x\", \"key2\": \"value2 from x\"}\n>>> y = {\"key2\": \"value2 from y\", \"key3\": \"value3 from y\"}\n>>> x | y\n{'key1': 'value1 from x', 'key2': 'value2 from y', 'key3': 'value3 from y'}\n>>> y | x\n{'key2': 'value2 from x', 'key3': 'value3 from y', 'key1': 'value1 from x'}\n\n\nSee PEP 584 for a full description.\n(Contributed by Brandt Bucher in bpo-36144.)\n\n\nNew String Methods to Remove Prefixes and Suffixes\u00c2\u00b6\nstr.removeprefix(prefix) and\nstr.removesuffix(suffix) have been added\nto easily remove an unneeded prefix or a suffix from a string. Corresponding\nbytes, bytearray, and collections.UserString methods have also been\nadded. See PEP 616 for a full description. (Contributed by Dennis Sweeney in\nbpo-39939.)\n\n\nType Hinting Generics in Standard Collections\u00c2\u00b6\nIn type annotations you can now use built-in collection types such as\nlist and dict as generic types instead of importing the\ncorresponding capitalized types (e.g. List or Dict) from\ntyping.  Some other types in the standard library are also now generic,\nfor example queue.Queue.\nExample:\ndef greet_all(names: list[str]) -> None:\n    for name in names:\n        print(\"Hello\", name)\n\n\nSee PEP 585 for more details.  (Contributed by Guido van Rossum,\nEthan Smith, and Batuhan Ta\u00c5\u009fkaya in bpo-39481.)\n\n\nNew Parser\u00c2\u00b6\nPython 3.9 uses a new parser, based on PEG instead\nof LL(1).  The new\nparser\u00e2\u0080\u0099s performance is roughly comparable to that of the old parser,\nbut the PEG formalism is more flexible than LL(1) when it comes to\ndesigning new language features.  We\u00e2\u0080\u0099ll start using this flexibility\nin Python 3.10 and later.\nThe ast module uses the new parser and produces the same AST as\nthe old parser.\nIn Python 3.10, the old parser will be deleted and so will all\nfunctionality that depends on it (primarily the parser module,\nwhich has long been deprecated).  In Python 3.9 only, you can switch\nback to the LL(1) parser using a command line switch (-X\noldparser) or an environment variable (PYTHONOLDPARSER=1).\nSee PEP 617 for more details.  (Contributed by Guido van Rossum,\nPablo Galindo and Lysandros Nikolaou in bpo-40334.)\n\n\n\nOther Language Changes\u00c2\u00b6\n\n__import__() now raises ImportError instead of\nValueError, which used to occur when a relative import went past\nits top-level package.\n(Contributed by Ngalim Siregar in bpo-37444.)\nPython now gets the absolute path of the script filename specified on\nthe command line (ex: python3 script.py): the __file__ attribute of\nthe __main__ module became an absolute path, rather than a relative\npath. These paths now remain valid after the current directory is changed\nby os.chdir(). As a side effect, the traceback also displays the\nabsolute path for __main__ module frames in this case.\n(Contributed by Victor Stinner in bpo-20443.)\nIn the Python Development Mode and in debug build, the\nencoding and errors arguments are now checked for string encoding and\ndecoding operations. Examples: open(), str.encode() and\nbytes.decode().\nBy default, for best performance, the errors argument is only checked at\nthe first encoding/decoding error and the encoding argument is sometimes\nignored for empty strings.\n(Contributed by Victor Stinner in bpo-37388.)\n\n\"\".replace(\"\", s, n) now returns s instead of an empty string for\nall non-zero n.  It is now consistent with \"\".replace(\"\", s).\nThere are similar changes for bytes and bytearray objects.\n(Contributed by Serhiy Storchaka in bpo-28029.)\nAny valid expression can now be used as a decorator.  Previously, the\ngrammar was much more restrictive.  See PEP 614 for details.\n(Contributed by Brandt Bucher in bpo-39702.)\nImproved help for the typing module. Docstrings are now shown for\nall special forms and special generic aliases (like Union and List).\nUsing help() with generic alias like List[int] will show the help\nfor the correspondent concrete type (list in this case).\n(Contributed by Serhiy Storchaka in bpo-40257.)\nParallel running of aclose() / asend() /\nathrow() is now prohibited, and ag_running now reflects\nthe actual running status of the async generator.\n(Contributed by Yury Selivanov in bpo-30773.)\nUnexpected errors in calling the __iter__ method are no longer masked by\nTypeError in the in operator and functions\ncontains(), indexOf() and\ncountOf() of the operator module.\n(Contributed by Serhiy Storchaka in bpo-40824.)\nUnparenthesized lambda expressions can no longer be the expression part in an\nif clause in comprehensions and generator expressions. See bpo-41848\nand bpo-43755 for details.\n\n\n\nNew Modules\u00c2\u00b6\n\nzoneinfo\u00c2\u00b6\nThe zoneinfo module brings support for the IANA time zone database to\nthe standard library. It adds zoneinfo.ZoneInfo, a concrete\ndatetime.tzinfo implementation backed by the system\u00e2\u0080\u0099s time zone data.\nExample:\n>>> from zoneinfo import ZoneInfo\n>>> from datetime import datetime, timedelta\n\n>>> # Daylight saving time\n>>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo(\"America/Los_Angeles\"))\n>>> print(dt)\n2020-10-31 12:00:00-07:00\n>>> dt.tzname()\n'PDT'\n\n>>> # Standard time\n>>> dt += timedelta(days=7)\n>>> print(dt)\n2020-11-07 12:00:00-08:00\n>>> print(dt.tzname())\nPST\n\n\nAs a fall-back source of data for platforms that don\u00e2\u0080\u0099t ship the IANA database,\nthe tzdata module was released as a first-party package \u00e2\u0080\u0093 distributed via\nPyPI and maintained by the CPython core team.\n\nSee also\n\nPEP 615 \u00e2\u0080\u0093 Support for the IANA Time Zone Database in the Standard LibraryPEP written and implemented by Paul Ganssle\n\n\n\n\n\ngraphlib\u00c2\u00b6\nA new module, graphlib, was added that contains the\ngraphlib.TopologicalSorter class to offer functionality to perform\ntopological sorting of graphs. (Contributed by Pablo Galindo, Tim Peters and\nLarry Hastings in bpo-17005.)\n\n\n\nImproved Modules\u00c2\u00b6\n\nast\u00c2\u00b6\nAdded the indent option to dump() which allows it to produce a\nmultiline indented output.\n(Contributed by Serhiy Storchaka in bpo-37995.)\nAdded ast.unparse() as a function in the ast module that can\nbe used to unparse an ast.AST object and produce a string with code\nthat would produce an equivalent ast.AST object when parsed.\n(Contributed by Pablo Galindo and Batuhan Taskaya in bpo-38870.)\nAdded docstrings to AST nodes that contains the ASDL signature used to\nconstruct that node. (Contributed by Batuhan Taskaya in bpo-39638.)\n\n\nasyncio\u00c2\u00b6\nDue to significant security concerns, the reuse_address parameter of\nasyncio.loop.create_datagram_endpoint() is no longer supported. This is\nbecause of the behavior of the socket option SO_REUSEADDR in UDP. For more\ndetails, see the documentation for loop.create_datagram_endpoint().\n(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in\nbpo-37228.)\nAdded a new coroutine shutdown_default_executor()\nthat schedules a shutdown for the default executor that waits on the\nThreadPoolExecutor to finish closing. Also,\nasyncio.run() has been updated to use the new coroutine.\n(Contributed by Kyle Stanley in bpo-34037.)\nAdded asyncio.PidfdChildWatcher, a Linux-specific child watcher\nimplementation that polls process file descriptors. (bpo-38692)\nAdded a new coroutine asyncio.to_thread(). It is mainly used for\nrunning IO-bound functions in a separate thread to avoid blocking the event\nloop, and essentially works as a high-level version of\nrun_in_executor() that can directly take keyword arguments.\n(Contributed by Kyle Stanley and Yury Selivanov in bpo-32309.)\nWhen cancelling the task due to a timeout, asyncio.wait_for() will now\nwait until the cancellation is complete also in the case when timeout is\n<= 0, like it does with positive timeouts.\n(Contributed by Elvis Pranskevichus in bpo-32751.)\nasyncio now raises TyperError when calling incompatible\nmethods with an ssl.SSLSocket socket.\n(Contributed by Ido Michael in bpo-37404.)\n\n\ncompileall\u00c2\u00b6\nAdded new possibility to use hardlinks for duplicated .pyc files: hardlink_dupes parameter and \u00e2\u0080\u0093hardlink-dupes command line option.\n(Contributed by  Lum\u00c3\u00adr \u00e2\u0080\u0098Frenzy\u00e2\u0080\u0099 Balhar in bpo-40495.)\nAdded new options for path manipulation in resulting .pyc files: stripdir, prependdir, limit_sl_dest parameters and -s, -p, -e command line options.\nAdded the possibility to specify the option for an optimization level multiple times.\n(Contributed by Lum\u00c3\u00adr \u00e2\u0080\u0098Frenzy\u00e2\u0080\u0099 Balhar in bpo-38112.)\n\n\nconcurrent.futures\u00c2\u00b6\nAdded a new cancel_futures parameter to\nconcurrent.futures.Executor.shutdown() that cancels all pending futures\nwhich have not started running, instead of waiting for them to complete before\nshutting down the executor.\n(Contributed by Kyle Stanley in bpo-39349.)\nRemoved daemon threads from ThreadPoolExecutor\nand ProcessPoolExecutor. This improves\ncompatibility with subinterpreters and predictability in their shutdown\nprocesses. (Contributed by Kyle Stanley in bpo-39812.)\nWorkers in ProcessPoolExecutor are now spawned on\ndemand, only when there are no available idle workers to reuse. This optimizes\nstartup overhead and reduces the amount of lost CPU time to idle workers.\n(Contributed by Kyle Stanley in bpo-39207.)\n\n\ncurses\u00c2\u00b6\nAdded curses.get_escdelay(), curses.set_escdelay(),\ncurses.get_tabsize(), and curses.set_tabsize() functions.\n(Contributed by Anthony Sottile in bpo-38312.)\n\n\ndatetime\u00c2\u00b6\nThe isocalendar() of datetime.date\nand isocalendar() of datetime.datetime\nmethods now returns a namedtuple() instead of a tuple.\n(Contributed by Dong-hee Na in bpo-24416.)\n\n\ndistutils\u00c2\u00b6\nThe upload command now creates SHA2-256 and Blake2b-256 hash\ndigests. It skips MD5 on platforms that block MD5 digest.\n(Contributed by Christian Heimes in bpo-40698.)\n\n\nfcntl\u00c2\u00b6\nAdded constants F_OFD_GETLK, F_OFD_SETLK\nand F_OFD_SETLKW.\n(Contributed by Dong-hee Na in bpo-38602.)\n\n\nftplib\u00c2\u00b6\nFTP and FTP_TLS now raise a ValueError\nif the given timeout for their constructor is zero to prevent the creation of\na non-blocking socket. (Contributed by Dong-hee Na in bpo-39259.)\n\n\ngc\u00c2\u00b6\nWhen the garbage collector makes a collection in which some objects resurrect\n(they are reachable from outside the isolated cycles after the finalizers have\nbeen executed), do not block the collection of all objects that are still\nunreachable. (Contributed by Pablo Galindo and Tim Peters in bpo-38379.)\nAdded a new function gc.is_finalized() to check if an object has been\nfinalized by the garbage collector. (Contributed by Pablo Galindo in\nbpo-39322.)\n\n\nhashlib\u00c2\u00b6\nThe hashlib module can now use SHA3 hashes and SHAKE XOF from OpenSSL\nwhen available.\n(Contributed by Christian Heimes in bpo-37630.)\nBuiltin hash modules can now be disabled with\n./configure --without-builtin-hashlib-hashes or selectively enabled with\ne.g. ./configure --with-builtin-hashlib-hashes=sha3,blake2 to force use\nof OpenSSL based implementation.\n(Contributed by Christian Heimes in bpo-40479)\n\n\nhttp\u00c2\u00b6\nHTTP status codes 103 EARLY_HINTS, 418 IM_A_TEAPOT and 425 TOO_EARLY are added to\nhttp.HTTPStatus. (Contributed by Dong-hee Na in bpo-39509 and Ross Rhodes in bpo-39507.)\n\n\nIDLE and idlelib\u00c2\u00b6\nAdded option to toggle cursor blink off.  (Contributed by Zackery Spytz\nin bpo-4603.)\nEscape key now closes IDLE completion windows.  (Contributed by Johnny\nNajera in bpo-38944.)\nAdded keywords to module name completion list.  (Contributed by Terry J.\nReedy in bpo-37765.)\nThe changes above have been backported to 3.8 maintenance releases.\n\n\nimaplib\u00c2\u00b6\nIMAP4 and IMAP4_SSL now have\nan optional timeout parameter for their constructors.\nAlso, the open() method now has an optional timeout parameter\nwith this change. The overridden methods of IMAP4_SSL and\nIMAP4_stream were applied to this change.\n(Contributed by Dong-hee Na in bpo-38615.)\nimaplib.IMAP4.unselect() is added.\nimaplib.IMAP4.unselect() frees server\u00e2\u0080\u0099s resources associated with the\nselected mailbox and returns the server to the authenticated\nstate. This command performs the same actions as imaplib.IMAP4.close(), except\nthat no messages are permanently removed from the currently\nselected mailbox. (Contributed by Dong-hee Na in bpo-40375.)\n\n\nimportlib\u00c2\u00b6\nTo improve consistency with import statements, importlib.util.resolve_name()\nnow raises ImportError instead of ValueError for invalid relative\nimport attempts.\n(Contributed by Ngalim Siregar in bpo-37444.)\nImport loaders which publish immutable module objects can now publish\nimmutable packages in addition to individual modules.\n(Contributed by Dino Viehland in bpo-39336.)\nAdded importlib.resources.files() function with support for\nsubdirectories in package data, matching backport in importlib_resources\nversion 1.5.\n(Contributed by Jason R. Coombs in bpo-39791.)\nRefreshed importlib.metadata from importlib_metadata version 1.6.1.\n\n\ninspect\u00c2\u00b6\ninspect.BoundArguments.arguments is changed from OrderedDict to regular\ndict.  (Contributed by Inada Naoki in bpo-36350 and bpo-39775.)\n\n\nipaddress\u00c2\u00b6\nipaddress now supports IPv6 Scoped Addresses (IPv6 address with suffix %<scope_id>).\nScoped IPv6 addresses can be parsed using ipaddress.IPv6Address.\nIf present, scope zone ID is available through the scope_id attribute.\n(Contributed by Oleksandr Pavliuk in bpo-34788.)\nStarting with Python 3.9.5 the ipaddress module no longer\naccepts any leading zeros in IPv4 address strings.\n(Contributed by Christian Heimes in bpo-36384).\n\n\nmath\u00c2\u00b6\nExpanded the math.gcd() function to handle multiple arguments.\nFormerly, it only supported two arguments.\n(Contributed by Serhiy Storchaka in bpo-39648.)\nAdded math.lcm(): return the least common multiple of specified arguments.\n(Contributed by Mark Dickinson, Ananthakrishnan and Serhiy Storchaka in\nbpo-39479 and bpo-39648.)\nAdded math.nextafter(): return the next floating-point value after x\ntowards y.\n(Contributed by Victor Stinner in bpo-39288.)\nAdded math.ulp(): return the value of the least significant bit\nof a float.\n(Contributed by Victor Stinner in bpo-39310.)\n\n\nmultiprocessing\u00c2\u00b6\nThe multiprocessing.SimpleQueue class has a new\nclose() method to explicitly close the\nqueue.\n(Contributed by Victor Stinner in bpo-30966.)\n\n\nnntplib\u00c2\u00b6\nNNTP and NNTP_SSL now raise a ValueError\nif the given timeout for their constructor is zero to prevent the creation of\na non-blocking socket. (Contributed by Dong-hee Na in bpo-39259.)\n\n\nos\u00c2\u00b6\nAdded CLD_KILLED and CLD_STOPPED for si_code.\n(Contributed by Dong-hee Na in bpo-38493.)\nExposed the Linux-specific os.pidfd_open() (bpo-38692) and\nos.P_PIDFD (bpo-38713) for process management with file\ndescriptors.\nThe os.unsetenv() function is now also available on Windows.\n(Contributed by Victor Stinner in bpo-39413.)\nThe os.putenv() and os.unsetenv() functions are now always\navailable.\n(Contributed by Victor Stinner in bpo-39395.)\nAdded os.waitstatus_to_exitcode() function:\nconvert a wait status to an exit code.\n(Contributed by Victor Stinner in bpo-40094.)\n\n\npathlib\u00c2\u00b6\nAdded pathlib.Path.readlink() which acts similarly to\nos.readlink().\n(Contributed by Girts Folkmanis in bpo-30618)\n\n\npdb\u00c2\u00b6\nOn Windows now Pdb supports ~/.pdbrc.\n(Contributed by Tim Hopper and Dan Lidral-Porter in bpo-20523.)\n\n\npoplib\u00c2\u00b6\nPOP3 and POP3_SSL now raise a ValueError\nif the given timeout for their constructor is zero to prevent the creation of\na non-blocking socket. (Contributed by Dong-hee Na in bpo-39259.)\n\n\npprint\u00c2\u00b6\npprint can now pretty-print types.SimpleNamespace.\n(Contributed by Carl Bordum Hansen in bpo-37376.)\n\n\npydoc\u00c2\u00b6\nThe documentation string is now shown not only for class, function,\nmethod etc, but for any object that has its own __doc__ attribute.\n(Contributed by Serhiy Storchaka in bpo-40257.)\n\n\nrandom\u00c2\u00b6\nAdded a new random.Random.randbytes method: generate random bytes.\n(Contributed by Victor Stinner in bpo-40286.)\n\n\nsignal\u00c2\u00b6\nExposed the Linux-specific signal.pidfd_send_signal() for sending to\nsignals to a process using a file descriptor instead of a pid. (bpo-38712)\n\n\nsmtplib\u00c2\u00b6\nSMTP and SMTP_SSL now raise a ValueError\nif the given timeout for their constructor is zero to prevent the creation of\na non-blocking socket. (Contributed by Dong-hee Na in bpo-39259.)\nLMTP constructor  now has an optional timeout parameter.\n(Contributed by Dong-hee Na in bpo-39329.)\n\n\nsocket\u00c2\u00b6\nThe socket module now exports the CAN_RAW_JOIN_FILTERS\nconstant on Linux 4.1 and greater.\n(Contributed by Stefan Tatschner and Zackery Spytz in bpo-25780.)\nThe socket module now supports the CAN_J1939 protocol on\nplatforms that support it.  (Contributed by Karl Ding in bpo-40291.)\nThe socket module now has the socket.send_fds() and\nsocket.recv_fds() functions. (Contributed by Joannah Nanjekye, Shinya\nOkano and Victor Stinner in bpo-28724.)\n\n\ntime\u00c2\u00b6\nOn AIX, thread_time() is now implemented with thread_cputime()\nwhich has nanosecond resolution, rather than\nclock_gettime(CLOCK_THREAD_CPUTIME_ID) which has a resolution of 10 ms.\n(Contributed by Batuhan Taskaya in bpo-40192)\n\n\nsys\u00c2\u00b6\nAdded a new sys.platlibdir attribute: name of the platform-specific\nlibrary directory. It is used to build the path of standard library and the\npaths of installed extension modules. It is equal to \"lib\" on most\nplatforms.  On Fedora and SuSE, it is equal to \"lib64\" on 64-bit platforms.\n(Contributed by Jan Mat\u00c4\u009bjek, Mat\u00c4\u009bj Cepl, Charalampos Stratakis and Victor Stinner in bpo-1294959.)\nPreviously, sys.stderr was block-buffered when non-interactive. Now\nstderr defaults to always being line-buffered.\n(Contributed by Jendrik Seipp in bpo-13601.)\n\n\ntracemalloc\u00c2\u00b6\nAdded tracemalloc.reset_peak() to set the peak size of traced memory\nblocks to the current size, to measure the peak of specific pieces of code.\n(Contributed by Huon Wilson in bpo-40630.)\n\n\ntyping\u00c2\u00b6\nPEP 593 introduced an typing.Annotated type to decorate existing\ntypes with context-specific metadata and new include_extras parameter to\ntyping.get_type_hints() to access the metadata at runtime. (Contributed\nby Till Varoquaux and Konstantin Kashin.)\n\n\nunicodedata\u00c2\u00b6\nThe Unicode database has been updated to version 13.0.0. (bpo-39926).\n\n\nvenv\u00c2\u00b6\nThe activation scripts provided by venv now all specify their prompt\ncustomization consistently by always using the value specified by\n__VENV_PROMPT__. Previously some scripts unconditionally used\n__VENV_PROMPT__, others only if it happened to be set (which was the default\ncase), and one used __VENV_NAME__ instead.\n(Contributed by Brett Cannon in bpo-37663.)\n\n\nxml\u00c2\u00b6\nWhite space characters within attributes are now preserved when serializing\nxml.etree.ElementTree to XML file. EOLNs are no longer normalized\nto \u00e2\u0080\u009cn\u00e2\u0080\u009d. This is the result of discussion about how to interpret\nsection 2.11 of XML spec.\n(Contributed by Mefistotelis in bpo-39011.)\n\n\n\nOptimizations\u00c2\u00b6\n\nOptimized the idiom for assignment a temporary variable in comprehensions.\nNow for y in [expr] in comprehensions is as fast as a simple assignment\ny = expr.  For example:\n\nsums = [s for s in [0] for x in data for s in [s + x]]\n\nUnlike the := operator this idiom does not leak a variable to the\nouter scope.\n(Contributed by Serhiy Storchaka in bpo-32856.)\n\nOptimized signal handling in multithreaded applications. If a thread different\nthan the main thread gets a signal, the bytecode evaluation loop is no longer\ninterrupted at each bytecode instruction to check for pending signals which\ncannot be handled. Only the main thread of the main interpreter can handle\nsignals.\nPreviously, the bytecode evaluation loop was interrupted at each instruction\nuntil the main thread handles signals.\n(Contributed by Victor Stinner in bpo-40010.)\n\nOptimized the subprocess module on FreeBSD using closefrom().\n(Contributed by Ed Maste, Conrad Meyer, Kyle Evans, Kubilay Kocak and Victor\nStinner in bpo-38061.)\nPyLong_FromDouble() is now up to 1.87x faster for values that\nfit into long.\n(Contributed by Sergey Fedoseev in bpo-37986.)\nA number of Python builtins (range, tuple, set,\nfrozenset, list, dict) are now sped up by using\nPEP 590 vectorcall protocol.\n(Contributed by Dong-hee Na, Mark Shannon, Jeroen Demeyer and Petr Viktorin in bpo-37207.)\nOptimized difference_update() for the case when the other set\nis much larger than the base set.\n(Suggested by Evgeny Kapun with code contributed by Michele Orr\u00c3\u00b9 in bpo-8425.)\nPython\u00e2\u0080\u0099s small object allocator (obmalloc.c) now allows (no more than)\none empty arena to remain available for immediate reuse, without returning\nit to the OS.  This prevents thrashing in simple loops where an arena could\nbe created and destroyed anew on each iteration.\n(Contributed by Tim Peters in bpo-37257.)\nfloor division of float operation now has a better performance. Also\nthe message of ZeroDivisionError for this operation is updated.\n(Contributed by Dong-hee Na in bpo-39434.)\nDecoding short ASCII strings with UTF-8 and ascii codecs is now about\n15% faster.  (Contributed by Inada Naoki in bpo-37348.)\n\nHere\u00e2\u0080\u0099s a summary of performance improvements from Python 3.4 through Python 3.9:\nPython version                       3.4     3.5     3.6     3.7     3.8    3.9\n--------------                       ---     ---     ---     ---     ---    ---\n\nVariable and attribute read access:\n    read_local                       7.1     7.1     5.4     5.1     3.9    3.9\n    read_nonlocal                    7.1     8.1     5.8     5.4     4.4    4.5\n    read_global                     15.5    19.0    14.3    13.6     7.6    7.8\n    read_builtin                    21.1    21.6    18.5    19.0     7.5    7.8\n    read_classvar_from_class        25.6    26.5    20.7    19.5    18.4   17.9\n    read_classvar_from_instance     22.8    23.5    18.8    17.1    16.4   16.9\n    read_instancevar                32.4    33.1    28.0    26.3    25.4   25.3\n    read_instancevar_slots          27.8    31.3    20.8    20.8    20.2   20.5\n    read_namedtuple                 73.8    57.5    45.0    46.8    18.4   18.7\n    read_boundmethod                37.6    37.9    29.6    26.9    27.7   41.1\n\nVariable and attribute write access:\n    write_local                      8.7     9.3     5.5     5.3     4.3    4.3\n    write_nonlocal                  10.5    11.1     5.6     5.5     4.7    4.8\n    write_global                    19.7    21.2    18.0    18.0    15.8   16.7\n    write_classvar                  92.9    96.0   104.6   102.1    39.2   39.8\n    write_instancevar               44.6    45.8    40.0    38.9    35.5   37.4\n    write_instancevar_slots         35.6    36.1    27.3    26.6    25.7   25.8\n\nData structure read access:\n    read_list                       24.2    24.5    20.8    20.8    19.0   19.5\n    read_deque                      24.7    25.5    20.2    20.6    19.8   20.2\n    read_dict                       24.3    25.7    22.3    23.0    21.0   22.4\n    read_strdict                    22.6    24.3    19.5    21.2    18.9   21.5\n\nData structure write access:\n    write_list                      27.1    28.5    22.5    21.6    20.0   20.0\n    write_deque                     28.7    30.1    22.7    21.8    23.5   21.7\n    write_dict                      31.4    33.3    29.3    29.2    24.7   25.4\n    write_strdict                   28.4    29.9    27.5    25.2    23.1   24.5\n\nStack (or queue) operations:\n    list_append_pop                 93.4   112.7    75.4    74.2    50.8   50.6\n    deque_append_pop                43.5    57.0    49.4    49.2    42.5   44.2\n    deque_append_popleft            43.7    57.3    49.7    49.7    42.8   46.4\n\nTiming loop:\n    loop_overhead                    0.5     0.6     0.4     0.3     0.3    0.3\n\n\nThese results were generated from the variable access benchmark script at:\nTools/scripts/var_access_benchmark.py. The benchmark script displays timings\nin nanoseconds.  The benchmarks were measured on an\nIntel\u00c2\u00ae Core\u00e2\u0084\u00a2 i7-4960HQ processor\nrunning the macOS 64-bit builds found at\npython.org.\n\n\nDeprecated\u00c2\u00b6\n\nThe distutils bdist_msi command is now deprecated, use\nbdist_wheel (wheel packages) instead.\n(Contributed by Hugo van Kemenade in bpo-39586.)\nCurrently math.factorial() accepts float instances with\nnon-negative integer values (like 5.0).  It raises a ValueError\nfor non-integral and negative floats.  It is now deprecated.  In future\nPython versions it will raise a TypeError for all floats.\n(Contributed by Serhiy Storchaka in bpo-37315.)\nThe parser and symbol modules are deprecated and will be\nremoved in future versions of Python. For the majority of use cases,\nusers can leverage the Abstract Syntax Tree (AST) generation and compilation\nstage, using the ast module.\nThe Public C API functions PyParser_SimpleParseStringFlags(),\nPyParser_SimpleParseStringFlagsFilename(),\nPyParser_SimpleParseFileFlags() and PyNode_Compile()\nare deprecated and will be removed in Python 3.10 together with the old parser.\nUsing NotImplemented in a boolean context has been deprecated,\nas it is almost exclusively the result of incorrect rich comparator\nimplementations. It will be made a TypeError in a future version\nof Python.\n(Contributed by Josh Rosenberg in bpo-35712.)\nThe random module currently accepts any hashable type as a\npossible seed value.  Unfortunately, some of those types are not\nguaranteed to have a deterministic hash value.  After Python 3.9,\nthe module will restrict its seeds to None, int,\nfloat, str, bytes, and bytearray.\nOpening the GzipFile file for writing without specifying\nthe mode argument is deprecated.  In future Python versions it will always\nbe opened for reading by default.  Specify the mode argument for opening\nit for writing and silencing a warning.\n(Contributed by Serhiy Storchaka in bpo-28286.)\nDeprecated the split() method of _tkinter.TkappType in\nfavour of the splitlist() method which has more consistent and\npredicable behavior.\n(Contributed by Serhiy Storchaka in bpo-38371.)\nThe explicit passing of coroutine objects to asyncio.wait() has been\ndeprecated and will be removed in version 3.11.\n(Contributed by Yury Selivanov and Kyle Stanley in bpo-34790.)\nbinhex4 and hexbin4 standards are now deprecated. The binhex module\nand the following binascii functions are now deprecated:\n\nb2a_hqx(), a2b_hqx()\nrlecode_hqx(), rledecode_hqx()\n\n(Contributed by Victor Stinner in bpo-39353.)\n\nast classes slice, Index and ExtSlice are considered deprecated\nand will be removed in future Python versions.  value itself should be\nused instead of Index(value).  Tuple(slices, Load()) should be\nused instead of ExtSlice(slices).\n(Contributed by Serhiy Storchaka in bpo-34822.)\nast classes Suite, Param, AugLoad and AugStore\nare considered deprecated and will be removed in future Python versions.\nThey were not generated by the parser and not accepted by the code\ngenerator in Python 3.\n(Contributed by Batuhan Taskaya in bpo-39639 and bpo-39969\nand Serhiy Storchaka in bpo-39988.)\nThe PyEval_InitThreads() and PyEval_ThreadsInitialized()\nfunctions are now deprecated and will be removed in Python 3.11. Calling\nPyEval_InitThreads() now does nothing. The GIL is initialized\nby Py_Initialize() since Python 3.7.\n(Contributed by Victor Stinner in bpo-39877.)\nPassing None as the first argument to the shlex.split() function\nhas been deprecated.  (Contributed by Zackery Spytz in bpo-33262.)\nsmtpd.MailmanProxy() is now deprecated as it is unusable without\nan external module, mailman.  (Contributed by Samuel Colvin in bpo-35800.)\nThe lib2to3 module now emits a PendingDeprecationWarning.\nPython 3.9 switched to a PEG parser (see PEP 617), and Python 3.10 may\ninclude new language syntax that is not parsable by lib2to3\u00e2\u0080\u0099s LL(1) parser.\nThe lib2to3 module may be removed from the standard library in a future\nPython version. Consider third-party alternatives such as LibCST or\nparso.\n(Contributed by Carl Meyer in bpo-40360.)\nThe random parameter of random.shuffle() has been deprecated.\n(Contributed by Raymond Hettinger in bpo-40465)\n\n\n\nRemoved\u00c2\u00b6\n\nThe erroneous version at unittest.mock.__version__ has been removed.\nnntplib.NNTP: xpath() and xgtitle() methods have been removed.\nThese methods are deprecated since Python 3.3. Generally, these extensions\nare not supported or not enabled by NNTP server administrators.\nFor xgtitle(), please use nntplib.NNTP.descriptions() or\nnntplib.NNTP.description() instead.\n(Contributed by Dong-hee Na in bpo-39366.)\narray.array: tostring() and fromstring() methods have been\nremoved. They were aliases to tobytes() and frombytes(), deprecated\nsince Python 3.2.\n(Contributed by Victor Stinner in bpo-38916.)\nThe undocumented sys.callstats() function has been removed. Since Python\n3.7, it was deprecated and always returned None. It required a special\nbuild option CALL_PROFILE which was already removed in Python 3.7.\n(Contributed by Victor Stinner in bpo-37414.)\nThe sys.getcheckinterval() and sys.setcheckinterval() functions have\nbeen removed. They were deprecated since Python 3.2. Use\nsys.getswitchinterval() and sys.setswitchinterval() instead.\n(Contributed by Victor Stinner in bpo-37392.)\nThe C function PyImport_Cleanup() has been removed. It was documented as:\n\u00e2\u0080\u009cEmpty the module table.  For internal use only.\u00e2\u0080\u009d\n(Contributed by Victor Stinner in bpo-36710.)\n_dummy_thread and dummy_threading modules have been removed. These\nmodules were deprecated since Python 3.7 which requires threading support.\n(Contributed by Victor Stinner in bpo-37312.)\naifc.openfp() alias to aifc.open(), sunau.openfp() alias to\nsunau.open(), and wave.openfp() alias to wave.open() have been\nremoved. They were deprecated since Python 3.7.\n(Contributed by Victor Stinner in bpo-37320.)\nThe isAlive() method of threading.Thread\nhas been removed. It was deprecated since Python 3.8.\nUse is_alive() instead.\n(Contributed by Dong-hee Na in bpo-37804.)\nMethods getchildren() and getiterator() of classes\nElementTree and\nElement in the ElementTree\nmodule have been removed.  They were deprecated in Python 3.2.\nUse iter(x) or list(x) instead of x.getchildren() and\nx.iter() or list(x.iter()) instead of x.getiterator().\n(Contributed by Serhiy Storchaka in bpo-36543.)\nThe old plistlib API has been removed, it was deprecated since Python\n3.4. Use the load(), loads(), dump(), and\ndumps() functions. Additionally, the use_builtin_types parameter was\nremoved, standard bytes objects are always used instead.\n(Contributed by Jon Janzen in bpo-36409.)\nThe C function PyGen_NeedsFinalizing has been removed. It was not\ndocumented, tested, or used anywhere within CPython after the implementation\nof PEP 442. Patch by Joannah Nanjekye.\n(Contributed by Joannah Nanjekye in bpo-15088)\nbase64.encodestring() and base64.decodestring(), aliases deprecated\nsince Python 3.1, have been removed: use base64.encodebytes() and\nbase64.decodebytes() instead.\n(Contributed by Victor Stinner in bpo-39351.)\nfractions.gcd() function has been removed, it was deprecated since Python\n3.5 (bpo-22486): use math.gcd() instead.\n(Contributed by Victor Stinner in bpo-39350.)\nThe buffering parameter of bz2.BZ2File has been removed. Since\nPython 3.0, it was ignored and using it emitted a DeprecationWarning.\nPass an open file object to control how the file is opened.\n(Contributed by Victor Stinner in bpo-39357.)\nThe encoding parameter of json.loads() has been removed.\nAs of Python 3.1, it was deprecated and ignored; using it has emitted a\nDeprecationWarning since Python 3.8.\n(Contributed by Inada Naoki in bpo-39377)\nwith (await asyncio.lock): and with (yield from asyncio.lock): statements are\nnot longer supported, use async with lock instead.  The same is correct for\nasyncio.Condition and asyncio.Semaphore.\n(Contributed by Andrew Svetlov in bpo-34793.)\nThe sys.getcounts() function, the -X showalloccount command line\noption and the show_alloc_count field of the C structure\nPyConfig have been removed. They required a special Python build by\ndefining COUNT_ALLOCS macro.\n(Contributed by Victor Stinner in bpo-39489.)\nThe _field_types attribute of the typing.NamedTuple class\nhas been removed.  It was deprecated since Python 3.8.  Use\nthe __annotations__ attribute instead.\n(Contributed by Serhiy Storchaka in bpo-40182.)\nThe symtable.SymbolTable.has_exec() method has been removed. It was\ndeprecated since 2006, and only returning False when it\u00e2\u0080\u0099s called.\n(Contributed by Batuhan Taskaya in bpo-40208)\nThe asyncio.Task.current_task() and asyncio.Task.all_tasks()\nhave been removed. They were deprecated since Python 3.7 and you can use\nasyncio.current_task() and asyncio.all_tasks() instead.\n(Contributed by R\u00c3\u00a9mi Lapeyre in bpo-40967)\nThe unescape() method in the html.parser.HTMLParser class\nhas been removed (it was deprecated since Python 3.4).  html.unescape()\nshould be used for converting character references to the corresponding\nunicode characters.\n\n\n\nPorting to Python 3.9\u00c2\u00b6\nThis section lists previously described changes and other bugfixes\nthat may require changes to your code.\n\nChanges in the Python API\u00c2\u00b6\n\n__import__() and importlib.util.resolve_name() now raise\nImportError where it previously raised ValueError. Callers\ncatching the specific exception type and supporting both Python 3.9 and\nearlier versions will need to catch both using except (ImportError, ValueError):.\nThe venv activation scripts no longer special-case when\n__VENV_PROMPT__ is set to \"\".\nThe select.epoll.unregister() method no longer ignores the\nEBADF error.\n(Contributed by Victor Stinner in bpo-39239.)\nThe compresslevel parameter of bz2.BZ2File became keyword-only,\nsince the buffering parameter has been removed.\n(Contributed by Victor Stinner in bpo-39357.)\nSimplified AST for subscription. Simple indices will be represented by\ntheir value, extended slices will be represented as tuples.\nIndex(value) will return a value itself, ExtSlice(slices)\nwill return Tuple(slices, Load()).\n(Contributed by Serhiy Storchaka in bpo-34822.)\nThe importlib module now ignores the PYTHONCASEOK\nenvironment variable when the -E or -I command line\noptions are being used.\nThe encoding parameter has been added to the classes ftplib.FTP and\nftplib.FTP_TLS as a keyword-only parameter, and the default encoding\nis changed from Latin-1 to UTF-8 to follow RFC 2640.\nasyncio.loop.shutdown_default_executor() has been added to\nAbstractEventLoop, meaning alternative event loops that\ninherit from it should have this method defined.\n(Contributed by Kyle Stanley in bpo-34037.)\nThe constant values of future flags in the __future__ module\nis updated in order to prevent collision with compiler flags. Previously\nPyCF_ALLOW_TOP_LEVEL_AWAIT was clashing with CO_FUTURE_DIVISION.\n(Contributed by Batuhan Taskaya in bpo-39562)\narray('u') now uses wchar_t as C type instead of Py_UNICODE.\nThis change doesn\u00e2\u0080\u0099t affect to its behavior because Py_UNICODE is alias\nof wchar_t since Python 3.3.\n(Contributed by Inada Naoki in bpo-34538.)\nThe logging.getLogger() API now returns the root logger when passed\nthe name 'root', whereas previously it returned a non-root logger named\n'root'. This could affect cases where user code explicitly wants a\nnon-root logger named 'root', or instantiates a logger using\nlogging.getLogger(__name__) in some top-level module called 'root.py'.\n(Contributed by Vinay Sajip in bpo-37742.)\nDivision handling of PurePath now returns NotImplemented\ninstead of raising a TypeError when passed something other than an\ninstance of str or PurePath.  This allows creating\ncompatible classes that don\u00e2\u0080\u0099t inherit from those mentioned types.\n(Contributed by Roger Aiudi in bpo-34775).\nStarting with Python 3.9.5 the ipaddress module no longer\naccepts any leading zeros in IPv4 address strings. Leading zeros are\nambiguous and interpreted as octal notation by some libraries. For example\nthe legacy function socket.inet_aton() treats leading zeros as octal\nnotatation. glibc implementation of modern inet_pton() does\nnot accept any leading zeros.\n(Contributed by Christian Heimes in bpo-36384).\ncodecs.lookup() now normalizes the encoding name the same way as\nencodings.normalize_encoding(), except that codecs.lookup() also\nconverts the name to lower case. For example, \"latex+latin1\" encoding\nname is now normalized to \"latex_latin1\".\n(Contributed by Jordon Xu in bpo-37751.)\n\n\n\nChanges in the C API\u00c2\u00b6\n\nInstances of heap-allocated types (such as those created with\nPyType_FromSpec() and similar APIs) hold a reference to their type\nobject since Python 3.8. As indicated in the \u00e2\u0080\u009cChanges in the C API\u00e2\u0080\u009d of Python\n3.8, for the vast majority of cases, there should be no side effect but for\ntypes that have a custom tp_traverse function,\nensure that all custom tp_traverse functions of heap-allocated types\nvisit the object\u00e2\u0080\u0099s type.\n\nExample:\nint\nfoo_traverse(foo_struct *self, visitproc visit, void *arg) {\n// Rest of the traverse function\n#if PY_VERSION_HEX >= 0x03090000\n    // This was not needed before Python 3.9 (Python issue 35810 and 40217)\n    Py_VISIT(Py_TYPE(self));\n#endif\n}\n\n\n\nIf your traverse function delegates to tp_traverse of its base class\n(or another type), ensure that Py_TYPE(self) is visited only once.\nNote that only heap types are expected to visit the type in tp_traverse.\n\nFor example, if your tp_traverse function includes:\nbase->tp_traverse(self, visit, arg)\n\n\nthen add:\n#if PY_VERSION_HEX >= 0x03090000\n    // This was not needed before Python 3.9 (Python issue 35810 and 40217)\n    if (base->tp_flags & Py_TPFLAGS_HEAPTYPE) {\n        // a heap type's tp_traverse already visited Py_TYPE(self)\n    } else {\n        Py_VISIT(Py_TYPE(self));\n    }\n#else\n\n\n\n(See bpo-35810 and bpo-40217 for more information.)\n\nThe functions PyEval_CallObject, PyEval_CallFunction,\nPyEval_CallMethod and PyEval_CallObjectWithKeywords are deprecated.\nUse PyObject_Call() and its variants instead.\n(See more details in bpo-29548.)\n\n\n\nCPython bytecode changes\u00c2\u00b6\n\nThe LOAD_ASSERTION_ERROR opcode was added for handling the\nassert statement. Previously, the assert statement would not work\ncorrectly if the AssertionError exception was being shadowed.\n(Contributed by Zackery Spytz in bpo-34880.)\nThe COMPARE_OP opcode was split into four distinct instructions:\n\nCOMPARE_OP for rich comparisons\nIS_OP for \u00e2\u0080\u0098is\u00e2\u0080\u0099 and \u00e2\u0080\u0098is not\u00e2\u0080\u0099 tests\nCONTAINS_OP for \u00e2\u0080\u0098in\u00e2\u0080\u0099 and \u00e2\u0080\u0098not in\u00e2\u0080\u0099 tests\nJUMP_IF_NOT_EXC_MATCH for checking exceptions in \u00e2\u0080\u0098try-except\u00e2\u0080\u0099\nstatements.\n\n(Contributed by Mark Shannon in bpo-39156.)\n\n\n\n\n\nBuild Changes\u00c2\u00b6\n\nAdded --with-platlibdir option to the configure script: name of the\nplatform-specific library directory, stored in the new sys.platlibdir\nattribute. See sys.platlibdir attribute for more information.\n(Contributed by Jan Mat\u00c4\u009bjek, Mat\u00c4\u009bj Cepl, Charalampos Stratakis\nand Victor Stinner in bpo-1294959.)\nThe COUNT_ALLOCS special build macro has been removed.\n(Contributed by Victor Stinner in bpo-39489.)\nOn non-Windows platforms, the setenv() and unsetenv()\nfunctions are now required to build Python.\n(Contributed by Victor Stinner in bpo-39395.)\nOn non-Windows platforms, creating bdist_wininst installers is now\nofficially unsupported.  (See bpo-10945 for more details.)\nWhen building Python on macOS from source, _tkinter now links with\nnon-system Tcl and Tk frameworks if they are installed in\n/Library/Frameworks, as had been the case on older releases\nof macOS. If a macOS SDK is explicitly configured, by using\n--enable-universalsdk= or -isysroot, only the SDK itself is\nsearched. The default behavior can still be overridden with\n--with-tcltk-includes and --with-tcltk-libs.\n(Contributed by Ned Deily in bpo-34956.)\nPython can now be built for Windows 10 ARM64.\n(Contributed by Steve Dower in bpo-33125.)\nSome individual tests are now skipped when --pgo is used.  The tests\nin question increased the PGO task time significantly and likely\ndidn\u00e2\u0080\u0099t help improve optimization of the final executable. This\nspeeds up the task by a factor of about 15x.  Running the full unit test\nsuite is slow.  This change may result in a slightly less optimized build\nsince not as many code branches will be executed.  If you are willing to\nwait for the much slower build, the old behavior can be restored using\n./configure [..] PROFILE_TASK=\"-m test --pgo-extended\".  We make no\nguarantees as to which PGO task set produces a faster build.  Users who care\nshould run their own relevant benchmarks as results can depend on the\nenvironment, workload, and compiler tool chain.\n(See bpo-36044 and bpo-37707 for more details.)\n\n\n\nC API Changes\u00c2\u00b6\n\nNew Features\u00c2\u00b6\n\nPEP 573: Added PyType_FromModuleAndSpec() to associate\na module with a class; PyType_GetModule() and\nPyType_GetModuleState() to retrieve the module and its state; and\nPyCMethod and METH_METHOD to allow a method to\naccess the class it was defined in.\n(Contributed by Marcel Plch and Petr Viktorin in bpo-38787.)\nAdded PyFrame_GetCode() function: get a frame code.\nAdded PyFrame_GetBack() function: get the frame next outer frame.\n(Contributed by Victor Stinner in bpo-40421.)\nAdded PyFrame_GetLineNumber() to the limited C API.\n(Contributed by Victor Stinner in bpo-40421.)\nAdded PyThreadState_GetInterpreter() and\nPyInterpreterState_Get() functions to get the interpreter.\nAdded PyThreadState_GetFrame() function to get the current frame of a\nPython thread state.\nAdded PyThreadState_GetID() function: get the unique identifier of a\nPython thread state.\n(Contributed by Victor Stinner in bpo-39947.)\nAdded a new public PyObject_CallNoArgs() function to the C API, which\ncalls a callable Python object without any arguments. It is the most efficient\nway to call a callable Python object without any argument.\n(Contributed by Victor Stinner in bpo-37194.)\nChanges in the limited C API (if Py_LIMITED_API macro is defined):\n\nProvide Py_EnterRecursiveCall() and Py_LeaveRecursiveCall()\nas regular functions for the limited API. Previously, there were defined as\nmacros, but these macros didn\u00e2\u0080\u0099t compile with the limited C API which cannot\naccess PyThreadState.recursion_depth field (the structure is opaque in\nthe limited C API).\nPyObject_INIT() and PyObject_INIT_VAR() become regular \u00e2\u0080\u009copaque\u00e2\u0080\u009d\nfunction to hide implementation details.\n\n(Contributed by Victor Stinner in bpo-38644 and bpo-39542.)\n\nThe PyModule_AddType() function is added to help adding a type\nto a module.\n(Contributed by Dong-hee Na in bpo-40024.)\nAdded the functions PyObject_GC_IsTracked() and\nPyObject_GC_IsFinalized() to the public API to allow to query if\nPython objects are being currently tracked or have been already finalized by\nthe garbage collector respectively.\n(Contributed by Pablo Galindo Salgado in bpo-40241.)\nAdded _PyObject_FunctionStr() to get a user-friendly string\nrepresentation of a function-like object.\n(Patch by Jeroen Demeyer in bpo-37645.)\nAdded PyObject_CallOneArg() for calling an object with one\npositional argument\n(Patch by Jeroen Demeyer in bpo-37483.)\n\n\n\nPorting to Python 3.9\u00c2\u00b6\n\nPyInterpreterState.eval_frame (PEP 523) now requires a new mandatory\ntstate parameter (PyThreadState*).\n(Contributed by Victor Stinner in bpo-38500.)\nExtension modules: m_traverse,\nm_clear and m_free\nfunctions of PyModuleDef are no longer called if the module state\nwas requested but is not allocated yet. This is the case immediately after\nthe module is created and before the module is executed\n(Py_mod_exec function). More precisely, these functions are not called\nif m_size is greater than 0 and the module state (as\nreturned by PyModule_GetState()) is NULL.\nExtension modules without module state (m_size <= 0) are not affected.\n\nIf Py_AddPendingCall() is called in a subinterpreter, the function is\nnow scheduled to be called from the subinterpreter, rather than being called\nfrom the main interpreter. Each subinterpreter now has its own list of\nscheduled calls.\n(Contributed by Victor Stinner in bpo-39984.)\nThe Windows registry is no longer used to initialize sys.path when\nthe -E option is used (if PyConfig.use_environment is set to\n0). This is significant when embedding Python on Windows.\n(Contributed by Zackery Spytz in bpo-8901.)\nThe global variable PyStructSequence_UnnamedField is now a constant\nand refers to a constant string.\n(Contributed by Serhiy Storchaka in bpo-38650.)\nThe PyGC_Head structure is now opaque. It is only defined in the\ninternal C API (pycore_gc.h).\n(Contributed by Victor Stinner in bpo-40241.)\nThe Py_UNICODE_COPY, Py_UNICODE_FILL, PyUnicode_WSTR_LENGTH,\nPyUnicode_FromUnicode(), PyUnicode_AsUnicode(),\n_PyUnicode_AsUnicode, and PyUnicode_AsUnicodeAndSize() are\nmarked as deprecated in C.  They have been deprecated by PEP 393 since\nPython 3.3.\n(Contributed by Inada Naoki in bpo-36346.)\nThe Py_FatalError() function is replaced with a macro which logs\nautomatically the name of the current function, unless the\nPy_LIMITED_API macro is defined.\n(Contributed by Victor Stinner in bpo-39882.)\nThe vectorcall protocol now requires that the caller passes only strings as\nkeyword names. (See bpo-37540 for more information.)\nImplementation details of a number of macros and functions are now hidden:\n\nPyObject_IS_GC() macro was converted to a function.\nThe PyObject_NEW() macro becomes an alias to the\nPyObject_New() macro, and the PyObject_NEW_VAR() macro\nbecomes an alias to the PyObject_NewVar() macro. They no longer\naccess directly the PyTypeObject.tp_basicsize member.\nPyType_HasFeature() now always calls PyType_GetFlags().\nPreviously, it accessed directly the PyTypeObject.tp_flags\nmember when the limited C API was not used.\nPyObject_GET_WEAKREFS_LISTPTR() macro was converted to a function:\nthe macro accessed directly the PyTypeObject.tp_weaklistoffset\nmember.\nPyObject_CheckBuffer() macro was converted to a function: the macro\naccessed directly the PyTypeObject.tp_as_buffer member.\nPyIndex_Check() is now always declared as an opaque function to hide\nimplementation details: removed the PyIndex_Check() macro. The macro accessed\ndirectly the PyTypeObject.tp_as_number member.\n\n(See bpo-40170 for more details.)\n\n\n\n\nRemoved\u00c2\u00b6\n\nExcluded PyFPE_START_PROTECT() and PyFPE_END_PROTECT() macros of\npyfpe.h from the limited C API.\n(Contributed by Victor Stinner in bpo-38835.)\nThe tp_print slot of PyTypeObject has been removed.\nIt was used for printing objects to files in Python 2.7 and before. Since\nPython 3.0, it has been ignored and unused.\n(Contributed by Jeroen Demeyer in bpo-36974.)\nChanges in the limited C API (if Py_LIMITED_API macro is defined):\n\nExcluded the following functions from the limited C API:\n\nPyThreadState_DeleteCurrent()\n(Contributed by Joannah Nanjekye in bpo-37878.)\n_Py_CheckRecursionLimit\n_Py_NewReference()\n_Py_ForgetReference()\n_PyTraceMalloc_NewReference()\n_Py_GetRefTotal()\nThe trashcan mechanism which never worked in the limited C API.\nPyTrash_UNWIND_LEVEL\nPy_TRASHCAN_BEGIN_CONDITION\nPy_TRASHCAN_BEGIN\nPy_TRASHCAN_END\nPy_TRASHCAN_SAFE_BEGIN\nPy_TRASHCAN_SAFE_END\n\n\nMoved following functions and definitions to the internal C API:\n\n_PyDebug_PrintTotalRefs()\n_Py_PrintReferences()\n_Py_PrintReferenceAddresses()\n_Py_tracemalloc_config\n_Py_AddToAllObjects() (specific to Py_TRACE_REFS build)\n\n\n\n(Contributed by Victor Stinner in bpo-38644 and bpo-39542.)\n\nRemoved _PyRuntime.getframe hook and removed _PyThreadState_GetFrame\nmacro which was an alias to _PyRuntime.getframe. They were only exposed\nby the internal C API. Removed also PyThreadFrameGetter type.\n(Contributed by Victor Stinner in bpo-39946.)\nRemoved the following functions from the C API. Call PyGC_Collect()\nexplicitly to clear all free lists.\n(Contributed by Inada Naoki and Victor Stinner in bpo-37340,\nbpo-38896 and bpo-40428.)\n\nPyAsyncGen_ClearFreeLists()\nPyContext_ClearFreeList()\nPyDict_ClearFreeList()\nPyFloat_ClearFreeList()\nPyFrame_ClearFreeList()\nPyList_ClearFreeList()\nPyMethod_ClearFreeList() and PyCFunction_ClearFreeList():\nthe free lists of bound method objects have been removed.\nPySet_ClearFreeList(): the set free list has been removed\nin Python 3.4.\nPyTuple_ClearFreeList()\nPyUnicode_ClearFreeList(): the Unicode free list has been removed in\nPython 3.3.\n\n\nRemoved _PyUnicode_ClearStaticStrings() function.\n(Contributed by Victor Stinner in bpo-39465.)\nRemoved Py_UNICODE_MATCH. It has been deprecated by PEP 393, and\nbroken since Python 3.3. The PyUnicode_Tailmatch() function can be\nused instead.\n(Contributed by Inada Naoki in bpo-36346.)\nCleaned header files of interfaces defined but with no implementation.\nThe public API symbols being removed are:\n_PyBytes_InsertThousandsGroupingLocale,\n_PyBytes_InsertThousandsGrouping, _Py_InitializeFromArgs,\n_Py_InitializeFromWideArgs, _PyFloat_Repr, _PyFloat_Digits,\n_PyFloat_DigitsInit, PyFrame_ExtendStack, _PyAIterWrapper_Type,\nPyNullImporter_Type, PyCmpWrapper_Type, PySortWrapper_Type,\nPyNoArgsFunction.\n(Contributed by Pablo Galindo Salgado in bpo-39372.)\n\n\n\n\nNotable changes in Python 3.9.1\u00c2\u00b6\n\ntyping\u00c2\u00b6\nThe behavior of typing.Literal was changed to conform with PEP 586\nand to match the behavior of static type checkers specified in the PEP.\n\nLiteral now de-duplicates parameters.\nEquality comparisons between Literal objects are now order independent.\nLiteral comparisons now respect types.  For example,\nLiteral[0] == Literal[False] previously evaluated to True.  It is\nnow False.  To support this change, the internally used type cache now\nsupports differentiating types.\nLiteral objects will now raise a TypeError exception during\nequality comparisons if any of their parameters are not hashable.\nNote that declaring Literal with mutable parameters will not throw\nan error:\n>>> from typing import Literal\n>>> Literal[{0}]\n>>> Literal[{0}] == Literal[{False}]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unhashable type: 'set'\n\n\n\n\n(Contributed by Yurii Karabas in bpo-42345.)\n\n\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\u00c2\u00b6\nAs of 3.9.1, Python now fully supports building and running on macOS 11.0\n(Big Sur) and on Apple Silicon Macs (based on the ARM64 architecture).\nA new universal build variant, universal2, is now available to natively\nsupport both ARM64 and Intel 64 in one set of executables. Binaries\ncan also now be built on current versions of macOS to be deployed on a range\nof older macOS versions (tested to 10.9) while making some newer OS\nfunctions and options conditionally available based on the operating system\nversion in use at runtime (\u00e2\u0080\u009cweaklinking\u00e2\u0080\u009d).\n(Contributed by Ronald Oussoren and Lawrence D\u00e2\u0080\u0099Anna in bpo-41100.)\n\n\n\nNotable changes in Python 3.9.2\u00c2\u00b6\n\ncollections.abc\u00c2\u00b6\ncollections.abc.Callable generic now flattens type parameters, similar\nto what typing.Callable currently does.  This means that\ncollections.abc.Callable[[int, str], str] will have __args__ of\n(int, str, str); previously this was ([int, str], str).  To allow this\nchange, types.GenericAlias can now be subclassed, and a subclass will\nbe returned when subscripting the collections.abc.Callable type.\nCode which accesses the arguments via typing.get_args() or __args__\nneed to account for this change.  A DeprecationWarning may be emitted for\ninvalid forms of parameterizing collections.abc.Callable which may have\npassed silently in Python 3.9.1.  This DeprecationWarning will\nbecome a TypeError in Python 3.10.\n(Contributed by Ken Jin in bpo-42195.)\n\n\nurllib.parse\u00c2\u00b6\nEarlier Python versions allowed using both ; and & as\nquery parameter separators in urllib.parse.parse_qs() and\nurllib.parse.parse_qsl().  Due to security concerns, and to conform with\nnewer W3C recommendations, this has been changed to allow only a single\nseparator key, with & as the default.  This change also affects\ncgi.parse() and cgi.parse_multipart() as they use the affected\nfunctions internally. For more details, please see their respective\ndocumentation.\n(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in bpo-42967.)\n\n\n\nNotable changes in Python 3.9.3\u00c2\u00b6\nA security fix alters the ftplib.FTP behavior to not trust the\nIPv4 address sent from the remote server when setting up a passive data\nchannel.  We reuse the ftp server IP address instead.  For unusual code\nrequiring the old behavior, set a trust_server_pasv_ipv4_address\nattribute on your FTP instance to True.  (See bpo-43285)\n\n\n\n\n\n\n\nTable of Contents\n\nWhat\u00e2\u0080\u0099s New In Python 3.9\nSummary \u00e2\u0080\u0093 Release highlights\nYou should check for DeprecationWarning in your code\nNew Features\nDictionary Merge & Update Operators\nNew String Methods to Remove Prefixes and Suffixes\nType Hinting Generics in Standard Collections\nNew Parser\n\n\nOther Language Changes\nNew Modules\nzoneinfo\ngraphlib\n\n\nImproved Modules\nast\nasyncio\ncompileall\nconcurrent.futures\ncurses\ndatetime\ndistutils\nfcntl\nftplib\ngc\nhashlib\nhttp\nIDLE and idlelib\nimaplib\nimportlib\ninspect\nipaddress\nmath\nmultiprocessing\nnntplib\nos\npathlib\npdb\npoplib\npprint\npydoc\nrandom\nsignal\nsmtplib\nsocket\ntime\nsys\ntracemalloc\ntyping\nunicodedata\nvenv\nxml\n\n\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.9\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\n\n\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.9\nRemoved\n\n\nNotable changes in Python 3.9.1\ntyping\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\n\n\nNotable changes in Python 3.9.2\ncollections.abc\nurllib.parse\n\n\nNotable changes in Python 3.9.3\n\n\n\nPrevious topic\nWhat\u00e2\u0080\u0099s New in Python\nNext topic\nWhat\u00e2\u0080\u0099s New In Python 3.8\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n    \u00a9 Copyright 2001-2021, Python Software Foundation.\n    \n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on May 11, 2021.\n    Found a bug?\n    \n\n    Created using Sphinx 2.4.4.\n    \n\n"