"\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n\n\n\n\nWhat\u00e2\u0080\u0099s New In Python 3.7\u00c2\u00b6\n\nEditor\nElvis Pranskevichus <elvis@magic.io>\n\n\nThis article explains the new features in Python 3.7, compared to 3.6.\nPython 3.7 was released on June 27, 2018.\nFor full details, see the changelog.\n\nSummary \u00e2\u0080\u0093 Release Highlights\u00c2\u00b6\nNew syntax features:\n\nPEP 563, postponed evaluation of type annotations.\n\nBackwards incompatible syntax changes:\n\nasync and await are now reserved keywords.\n\nNew library modules:\n\ncontextvars: PEP 567 \u00e2\u0080\u0093 Context Variables\ndataclasses: PEP 557 \u00e2\u0080\u0093 Data Classes\nimportlib.resources\n\nNew built-in features:\n\nPEP 553, the new breakpoint() function.\n\nPython data model improvements:\n\nPEP 562, customization of access to\nmodule attributes.\nPEP 560, core support for typing module and\ngeneric types.\nthe insertion-order preservation nature of dict\nobjects has been declared to be an official\npart of the Python language spec.\n\nSignificant improvements in the standard library:\n\nThe asyncio module has received new features, significant\nusability and performance improvements.\nThe time module gained support for\nfunctions with nanosecond resolution.\n\nCPython implementation improvements:\n\nAvoiding the use of ASCII as a default text encoding:\n\nPEP 538, legacy C locale coercion\nPEP 540, forced UTF-8 runtime mode\n\n\nPEP 552, deterministic .pycs\nNew Python Development Mode\nPEP 565, improved DeprecationWarning\nhandling\n\nC API improvements:\n\nPEP 539, new C API for thread-local storage\n\nDocumentation improvements:\n\nPEP 545, Python documentation translations\nNew documentation translations: Japanese,\nFrench, and\nKorean.\n\nThis release features notable performance improvements in many areas.\nThe Optimizations section lists them in detail.\nFor a list of changes that may affect compatibility with previous Python\nreleases please refer to the Porting to Python 3.7 section.\n\n\nNew Features\u00c2\u00b6\n\nPEP 563: Postponed Evaluation of Annotations\u00c2\u00b6\nThe advent of type hints in Python uncovered two glaring usability issues\nwith the functionality of annotations added in PEP 3107 and refined\nfurther in PEP 526:\n\nannotations could only use names which were already available in the\ncurrent scope, in other words they didn\u00e2\u0080\u0099t support forward references\nof any kind; and\nannotating source code had adverse effects on startup time of Python\nprograms.\n\nBoth of these issues are fixed by postponing the evaluation of\nannotations.  Instead of compiling code which executes expressions in\nannotations at their definition time, the compiler stores the annotation\nin a string form equivalent to the AST of the expression in question.\nIf needed, annotations can be resolved at runtime using\ntyping.get_type_hints().  In the common case where this is not\nrequired, the annotations are cheaper to store (since short strings\nare interned by the interpreter) and make startup time faster.\nUsability-wise, annotations now support forward references, making the\nfollowing syntax valid:\nclass C:\n    @classmethod\n    def from_string(cls, source: str) -> C:\n        ...\n\n    def validate_b(self, obj: B) -> bool:\n        ...\n\nclass B:\n    ...\n\n\nSince this change breaks compatibility, the new behavior needs to be enabled\non a per-module basis in Python 3.7 using a __future__ import:\nfrom __future__ import annotations\n\n\nIt will become the default in Python 3.10.\n\nSee also\n\nPEP 563 \u00e2\u0080\u0093 Postponed evaluation of annotationsPEP written and implemented by \u00c5\u0081ukasz Langa.\n\n\n\n\n\nPEP 538: Legacy C Locale Coercion\u00c2\u00b6\nAn ongoing challenge within the Python 3 series has been determining a sensible\ndefault strategy for handling the \u00e2\u0080\u009c7-bit ASCII\u00e2\u0080\u009d text encoding assumption\ncurrently implied by the use of the default C or POSIX locale on non-Windows\nplatforms.\nPEP 538 updates the default interpreter command line interface to\nautomatically coerce that locale to an available UTF-8 based locale as\ndescribed in the documentation of the new PYTHONCOERCECLOCALE\nenvironment variable. Automatically setting LC_CTYPE this way means that\nboth the core interpreter and locale-aware C extensions (such as\nreadline) will assume the use of UTF-8 as the default text encoding,\nrather than ASCII.\nThe platform support definition in PEP 11 has also been updated to limit\nfull text handling support to suitably configured non-ASCII based locales.\nAs part of this change, the default error handler for stdin and\nstdout is now surrogateescape (rather than strict) when\nusing any of the defined coercion target locales (currently C.UTF-8,\nC.utf8, and UTF-8).  The default error handler for stderr\ncontinues to be backslashreplace, regardless of locale.\nLocale coercion is silent by default, but to assist in debugging potentially\nlocale related integration problems, explicit warnings (emitted directly on\nstderr) can be requested by setting PYTHONCOERCECLOCALE=warn.\nThis setting will also cause the Python runtime to emit a warning if the\nlegacy C locale remains active when the core interpreter is initialized.\nWhile PEP 538\u00e2\u0080\u0099s locale coercion has the benefit of also affecting extension\nmodules (such as GNU readline), as well as child processes (including those\nrunning non-Python applications and older versions of Python), it has the\ndownside of requiring that a suitable target locale be present on the running\nsystem. To better handle the case where no suitable target locale is available\n(as occurs on RHEL/CentOS 7, for example), Python 3.7 also implements\nPEP 540: Forced UTF-8 Runtime Mode.\n\nSee also\n\nPEP 538 \u00e2\u0080\u0093 Coercing the legacy C locale to a UTF-8 based localePEP written and implemented by Nick Coghlan.\n\n\n\n\n\nPEP 540: Forced UTF-8 Runtime Mode\u00c2\u00b6\nThe new -X utf8 command line option and PYTHONUTF8\nenvironment variable can be used to enable the CPython UTF-8 mode.\nWhen in UTF-8 mode, CPython ignores the locale settings, and uses the\nUTF-8 encoding by default.  The error handlers for sys.stdin and\nsys.stdout streams are set to surrogateescape.\nThe forced UTF-8 mode can be used to change the text handling behavior in\nan embedded Python interpreter without changing the locale settings of\nan embedding application.\nWhile PEP 540\u00e2\u0080\u0099s UTF-8 mode has the benefit of working regardless of which\nlocales are available on the running system, it has the downside of having no\neffect on extension modules (such as GNU readline), child processes running\nnon-Python applications, and child processes running older versions of Python.\nTo reduce the risk of corrupting text data when communicating with such\ncomponents, Python 3.7 also implements PEP 540: Forced UTF-8 Runtime Mode).\nThe UTF-8 mode is enabled by default when the locale is C or POSIX, and\nthe PEP 538 locale coercion feature fails to change it to a UTF-8 based\nalternative (whether that failure is due to PYTHONCOERCECLOCALE=0 being set,\nLC_ALL being set, or the lack of a suitable target locale).\n\nSee also\n\nPEP 540 \u00e2\u0080\u0093 Add a new UTF-8 modePEP written and implemented by Victor Stinner\n\n\n\n\n\nPEP 553: Built-in breakpoint()\u00c2\u00b6\nPython 3.7 includes the new built-in breakpoint() function as\nan easy and consistent way to enter the Python debugger.\nBuilt-in breakpoint() calls sys.breakpointhook().  By default, the\nlatter imports pdb and then calls pdb.set_trace(), but by binding\nsys.breakpointhook() to the function of your choosing, breakpoint() can\nenter any debugger. Additionally, the environment variable\nPYTHONBREAKPOINT can be set to the callable of your debugger of\nchoice.  Set PYTHONBREAKPOINT=0 to completely disable built-in\nbreakpoint().\n\nSee also\n\nPEP 553 \u00e2\u0080\u0093 Built-in breakpoint()PEP written and implemented by Barry Warsaw\n\n\n\n\n\nPEP 539: New C API for Thread-Local Storage\u00c2\u00b6\nWhile Python provides a C API for thread-local storage support; the existing\nThread Local Storage (TLS) API has used\nint to represent TLS keys across all platforms.  This has not\ngenerally been a problem for officially-support platforms, but that is neither\nPOSIX-compliant, nor portable in any practical sense.\nPEP 539 changes this by providing a new Thread Specific Storage (TSS)\nAPI to CPython which supersedes use of the\nexisting TLS API within the CPython interpreter, while deprecating the existing\nAPI.  The TSS API uses a new type Py_tss_t instead of int\nto represent TSS keys\u00e2\u0080\u0093an opaque type the definition of which may depend on\nthe underlying TLS implementation.  Therefore, this will allow to build CPython\non platforms where the native TLS key is defined in a way that cannot be safely\ncast to int.\nNote that on platforms where the native TLS key is defined in a way that cannot\nbe safely cast to int, all functions of the existing TLS API will be\nno-op and immediately return failure. This indicates clearly that the old API\nis not supported on platforms where it cannot be used reliably, and that no\neffort will be made to add such support.\n\nSee also\n\nPEP 539 \u00e2\u0080\u0093 A New C-API for Thread-Local Storage in CPythonPEP written by Erik M. Bray; implementation by Masayuki Yamamoto.\n\n\n\n\n\nPEP 562: Customization of Access to Module Attributes\u00c2\u00b6\nPython 3.7 allows defining __getattr__() on modules and will call\nit whenever a module attribute is otherwise not found.  Defining\n__dir__() on modules is now also allowed.\nA typical example of where this may be useful is module attribute deprecation\nand lazy loading.\n\nSee also\n\nPEP 562 \u00e2\u0080\u0093 Module __getattr__ and __dir__PEP written and implemented by Ivan Levkivskyi\n\n\n\n\n\nPEP 564: New Time Functions With Nanosecond Resolution\u00c2\u00b6\nThe resolution of clocks in modern systems can exceed the limited precision\nof a floating point number returned by the time.time() function\nand its variants.  To avoid loss of precision, PEP 564 adds six new\n\u00e2\u0080\u009cnanosecond\u00e2\u0080\u009d variants of the existing timer functions to the time\nmodule:\n\ntime.clock_gettime_ns()\ntime.clock_settime_ns()\ntime.monotonic_ns()\ntime.perf_counter_ns()\ntime.process_time_ns()\ntime.time_ns()\n\nThe new functions return the number of nanoseconds as an integer value.\nMeasurements\nshow that on Linux and Windows the resolution of time.time_ns() is\napproximately 3 times better than that of time.time().\n\nSee also\n\nPEP 564 \u00e2\u0080\u0093 Add new time functions with nanosecond resolutionPEP written and implemented by Victor Stinner\n\n\n\n\n\nPEP 565: Show DeprecationWarning in __main__\u00c2\u00b6\nThe default handling of DeprecationWarning has been changed such that\nthese warnings are once more shown by default, but only when the code\ntriggering them is running directly in the __main__ module.  As a result,\ndevelopers of single file scripts and those using Python interactively should\nonce again start seeing deprecation warnings for the APIs they use, but\ndeprecation warnings triggered by imported application, library and framework\nmodules will continue to be hidden by default.\nAs a result of this change, the standard library now allows developers to choose\nbetween three different deprecation warning behaviours:\n\nFutureWarning: always displayed by default, recommended for warnings\nintended to be seen by application end users (e.g. for deprecated application\nconfiguration settings).\nDeprecationWarning: displayed by default only in __main__ and when\nrunning tests, recommended for warnings intended to be seen by other Python\ndevelopers where a version upgrade may result in changed behaviour or an\nerror.\nPendingDeprecationWarning: displayed by default only when running\ntests, intended for cases where a future version upgrade will change the\nwarning category to DeprecationWarning or FutureWarning.\n\nPreviously both DeprecationWarning and PendingDeprecationWarning\nwere only visible when running tests, which meant that developers primarily\nwriting single file scripts or using Python interactively could be surprised\nby breaking changes in the APIs they used.\n\nSee also\n\nPEP 565 \u00e2\u0080\u0093 Show DeprecationWarning in __main__PEP written and implemented by Nick Coghlan\n\n\n\n\n\nPEP 560: Core Support for typing module and Generic Types\u00c2\u00b6\nInitially PEP 484 was designed in such way that it would not introduce any\nchanges to the core CPython interpreter. Now type hints and the typing\nmodule are extensively used by the community, so this restriction is removed.\nThe PEP introduces two special methods __class_getitem__() and\n__mro_entries__, these methods are now used by most classes and special\nconstructs in typing. As a result, the speed of various operations\nwith types increased up to 7 times, the generic types can be used without\nmetaclass conflicts, and several long standing bugs in typing module are\nfixed.\n\nSee also\n\nPEP 560 \u00e2\u0080\u0093 Core support for typing module and generic typesPEP written and implemented by Ivan Levkivskyi\n\n\n\n\n\nPEP 552: Hash-based .pyc Files\u00c2\u00b6\nPython has traditionally checked the up-to-dateness of bytecode cache files\n(i.e., .pyc files) by comparing the source metadata (last-modified timestamp\nand size) with source metadata saved in the cache file header when it was\ngenerated. While effective, this invalidation method has its drawbacks.  When\nfilesystem timestamps are too coarse, Python can miss source updates, leading to\nuser confusion. Additionally, having a timestamp in the cache file is\nproblematic for build reproducibility and\ncontent-based build systems.\nPEP 552 extends the pyc format to allow the hash of the source file to be\nused for invalidation instead of the source timestamp. Such .pyc files are\ncalled \u00e2\u0080\u009chash-based\u00e2\u0080\u009d. By default, Python still uses timestamp-based invalidation\nand does not generate hash-based .pyc files at runtime. Hash-based .pyc\nfiles may be generated with py_compile or compileall.\nHash-based .pyc files come in two variants: checked and unchecked. Python\nvalidates checked hash-based .pyc files against the corresponding source\nfiles at runtime but doesn\u00e2\u0080\u0099t do so for unchecked hash-based pycs. Unchecked\nhash-based .pyc files are a useful performance optimization for environments\nwhere a system external to Python (e.g., the build system) is responsible for\nkeeping .pyc files up-to-date.\nSee Cached bytecode invalidation for more information.\n\nSee also\n\nPEP 552 \u00e2\u0080\u0093 Deterministic pycsPEP written and implemented by Benjamin Peterson\n\n\n\n\n\nPEP 545: Python Documentation Translations\u00c2\u00b6\nPEP 545 describes the process of creating and maintaining Python\ndocumentation translations.\nThree new translations have been added:\n\nJapanese: https://docs.python.org/ja/\nFrench: https://docs.python.org/fr/\nKorean: https://docs.python.org/ko/\n\n\nSee also\n\nPEP 545 \u00e2\u0080\u0093 Python Documentation TranslationsPEP written and implemented by Julien Palard, Inada Naoki, and\nVictor Stinner.\n\n\n\n\n\nPython Development Mode (-X dev)\u00c2\u00b6\nThe new -X dev command line option or the new\nPYTHONDEVMODE environment variable can be used to enable\nPython Development Mode.  When in development mode, Python performs\nadditional runtime checks that are too expensive to be enabled by default.\nSee Python Development Mode documentation for the full\ndescription.\n\n\n\nOther Language Changes\u00c2\u00b6\n\nAn await expression and comprehensions containing an\nasync for clause were illegal in the expressions in\nformatted string literals due to a problem with the\nimplementation.  In Python 3.7 this restriction was lifted.\nMore than 255 arguments can now be passed to a function, and a function can\nnow have more than 255 parameters. (Contributed by Serhiy Storchaka in\nbpo-12844 and bpo-18896.)\nbytes.fromhex() and bytearray.fromhex() now ignore all ASCII\nwhitespace, not only spaces. (Contributed by Robert Xiao in bpo-28927.)\nstr, bytes, and bytearray gained support for\nthe new isascii() method, which can be used to\ntest if a string or bytes contain only the ASCII characters.\n(Contributed by INADA Naoki in bpo-32677.)\nImportError now displays module name and module __file__ path when\nfrom ... import ... fails. (Contributed by Matthias Bussonnier in\nbpo-29546.)\nCircular imports involving absolute imports with binding a submodule to\na name are now supported.\n(Contributed by Serhiy Storchaka in bpo-30024.)\nobject.__format__(x, '') is now equivalent to str(x) rather than\nformat(str(self), '').\n(Contributed by Serhiy Storchaka in bpo-28974.)\nIn order to better support dynamic creation of stack traces,\ntypes.TracebackType can now be instantiated from Python code, and\nthe tb_next attribute on tracebacks is now\nwritable.\n(Contributed by Nathaniel J. Smith in bpo-30579.)\nWhen using the -m switch, sys.path[0] is now eagerly expanded\nto the full starting directory path, rather than being left as the empty\ndirectory (which allows imports from the current working directory at the\ntime when an import occurs)\n(Contributed by Nick Coghlan in bpo-33053.)\nThe new -X importtime option or the\nPYTHONPROFILEIMPORTTIME environment variable can be used to show\nthe timing of each module import.\n(Contributed by Victor Stinner in bpo-31415.)\n\n\n\nNew Modules\u00c2\u00b6\n\ncontextvars\u00c2\u00b6\nThe new contextvars module and a set of\nnew C APIs introduce\nsupport for context variables.  Context variables are conceptually\nsimilar to thread-local variables.  Unlike TLS, context variables\nsupport asynchronous code correctly.\nThe asyncio and decimal modules have been updated to use\nand support context variables out of the box.  Particularly the active\ndecimal context is now stored in a context variable, which allows\ndecimal operations to work with the correct context in asynchronous code.\n\nSee also\n\nPEP 567 \u00e2\u0080\u0093 Context VariablesPEP written and implemented by Yury Selivanov\n\n\n\n\n\ndataclasses\u00c2\u00b6\nThe new dataclass() decorator provides a way to declare\ndata classes.  A data class describes its attributes using class variable\nannotations.  Its constructor and other magic methods, such as\n__repr__(), __eq__(), and\n__hash__() are generated automatically.\nExample:\n@dataclass\nclass Point:\n    x: float\n    y: float\n    z: float = 0.0\n\np = Point(1.5, 2.5)\nprint(p)   # produces \"Point(x=1.5, y=2.5, z=0.0)\"\n\n\n\nSee also\n\nPEP 557 \u00e2\u0080\u0093 Data ClassesPEP written and implemented by Eric V. Smith\n\n\n\n\n\nimportlib.resources\u00c2\u00b6\nThe new importlib.resources module provides several new APIs and one\nnew ABC for access to, opening, and reading resources inside packages.\nResources are roughly similar to files inside packages, but they needn\u00e2\u0080\u0099t\nbe actual files on the physical file system.  Module loaders can provide a\nget_resource_reader() function which returns\na importlib.abc.ResourceReader instance to support this\nnew API.  Built-in file path loaders and zip file loaders both support this.\nContributed by Barry Warsaw and Brett Cannon in bpo-32248.\n\nSee also\nimportlib_resources\n\u00e2\u0080\u0093 a PyPI backport for earlier Python versions.\n\n\n\n\nImproved Modules\u00c2\u00b6\n\nargparse\u00c2\u00b6\nThe new ArgumentParser.parse_intermixed_args()\nmethod allows intermixing options and positional arguments.\n(Contributed by paul.j3 in bpo-14191.)\n\n\nasyncio\u00c2\u00b6\nThe asyncio module has received many new features, usability and\nperformance improvements.  Notable changes\ninclude:\n\nThe new provisional asyncio.run() function can\nbe used to run a coroutine from synchronous code by automatically creating and\ndestroying the event loop.\n(Contributed by Yury Selivanov in bpo-32314.)\nasyncio gained support for contextvars.\nloop.call_soon(),\nloop.call_soon_threadsafe(),\nloop.call_later(),\nloop.call_at(), and\nFuture.add_done_callback()\nhave a new optional keyword-only context parameter.\nTasks now track their context automatically.\nSee PEP 567 for more details.\n(Contributed by Yury Selivanov in bpo-32436.)\nThe new asyncio.create_task() function has been added as a shortcut\nto asyncio.get_event_loop().create_task().\n(Contributed by Andrew Svetlov in bpo-32311.)\nThe new loop.start_tls()\nmethod can be used to upgrade an existing connection to TLS.\n(Contributed by Yury Selivanov in bpo-23749.)\nThe new loop.sock_recv_into()\nmethod allows reading data from a socket directly into a provided buffer making\nit possible to reduce data copies.\n(Contributed by Antoine Pitrou in bpo-31819.)\nThe new asyncio.current_task() function returns the currently running\nTask instance, and the new asyncio.all_tasks()\nfunction returns a set of all existing Task instances in a given loop.\nThe Task.current_task() and\nTask.all_tasks() methods have been deprecated.\n(Contributed by Andrew Svetlov in bpo-32250.)\nThe new provisional BufferedProtocol class allows\nimplementing streaming protocols with manual control over the receive buffer.\n(Contributed by Yury Selivanov in bpo-32251.)\nThe new asyncio.get_running_loop() function returns the currently\nrunning loop, and raises a RuntimeError if no loop is running.\nThis is in contrast with asyncio.get_event_loop(), which will create\na new event loop if none is running.\n(Contributed by Yury Selivanov in bpo-32269.)\nThe new StreamWriter.wait_closed()\ncoroutine method allows waiting until the stream writer is closed.  The new\nStreamWriter.is_closing() method\ncan be used to determine if the writer is closing.\n(Contributed by Andrew Svetlov in bpo-32391.)\nThe new loop.sock_sendfile()\ncoroutine method allows sending files using os.sendfile when possible.\n(Contributed by Andrew Svetlov in bpo-32410.)\nThe new Future.get_loop() and\nTask.get_loop() methods return the instance of the loop on which a task or\na future were created.\nServer.get_loop() allows doing the same for\nasyncio.Server objects.\n(Contributed by Yury Selivanov in bpo-32415 and\nSrinivas Reddy Thatiparthy in bpo-32418.)\nIt is now possible to control how instances of asyncio.Server begin\nserving.  Previously, the server would start serving immediately when created.\nThe new start_serving keyword argument to\nloop.create_server() and\nloop.create_unix_server(),\nas well as Server.start_serving(), and\nServer.serve_forever()\ncan be used to decouple server instantiation and serving.  The new\nServer.is_serving() method returns True\nif the server is serving.  Server objects are now\nasynchronous context managers:\nsrv = await loop.create_server(...)\n\nasync with srv:\n    # some code\n\n# At this point, srv is closed and no longer accepts new connections.\n\n\n(Contributed by Yury Selivanov in bpo-32662.)\n\nCallback objects returned by\nloop.call_later()\ngained the new when() method which\nreturns an absolute scheduled callback timestamp.\n(Contributed by Andrew Svetlov in bpo-32741.)\nThe loop.create_datagram_endpoint()  method\ngained support for Unix sockets.\n(Contributed by Quentin Dawans in bpo-31245.)\nThe asyncio.open_connection(), asyncio.start_server() functions,\nloop.create_connection(),\nloop.create_server(),\nloop.create_accepted_socket()\nmethods and their corresponding UNIX socket variants now accept the\nssl_handshake_timeout keyword argument.\n(Contributed by Neil Aspinall in bpo-29970.)\nThe new Handle.cancelled() method returns\nTrue if the callback was cancelled.\n(Contributed by Marat Sharafutdinov in bpo-31943.)\nThe asyncio source has been converted to use the\nasync/await syntax.\n(Contributed by Andrew Svetlov in bpo-32193.)\nThe new ReadTransport.is_reading()\nmethod can be used to determine the reading state of the transport.\nAdditionally, calls to\nReadTransport.resume_reading()\nand ReadTransport.pause_reading()\nare now idempotent.\n(Contributed by Yury Selivanov in bpo-32356.)\nLoop methods which accept socket paths now support passing\npath-like objects.\n(Contributed by Yury Selivanov in bpo-32066.)\nIn asyncio TCP sockets on Linux are now created with TCP_NODELAY\nflag set by default.\n(Contributed by Yury Selivanov and Victor Stinner in bpo-27456.)\nExceptions occurring in cancelled tasks are no longer logged.\n(Contributed by Yury Selivanov in bpo-30508.)\nNew WindowsSelectorEventLoopPolicy and\nWindowsProactorEventLoopPolicy classes.\n(Contributed by Yury Selivanov in bpo-33792.)\n\nSeveral asyncio APIs have been\ndeprecated.\n\n\nbinascii\u00c2\u00b6\nThe b2a_uu() function now accepts an optional backtick\nkeyword argument.  When it\u00e2\u0080\u0099s true, zeros are represented by '`'\ninstead of spaces.  (Contributed by Xiang Zhang in bpo-30103.)\n\n\ncalendar\u00c2\u00b6\nThe HTMLCalendar class has new class attributes which ease\nthe customization of CSS classes in the produced HTML calendar.\n(Contributed by Oz Tiram in bpo-30095.)\n\n\ncollections\u00c2\u00b6\ncollections.namedtuple() now supports default values.\n(Contributed by Raymond Hettinger in bpo-32320.)\n\n\ncompileall\u00c2\u00b6\ncompileall.compile_dir() learned the new invalidation_mode parameter,\nwhich can be used to enable\nhash-based .pyc invalidation.  The invalidation\nmode can also be specified on the command line using the new\n--invalidation-mode argument.\n(Contributed by Benjamin Peterson in bpo-31650.)\n\n\nconcurrent.futures\u00c2\u00b6\nProcessPoolExecutor and\nThreadPoolExecutor now\nsupport the new initializer and initargs constructor arguments.\n(Contributed by Antoine Pitrou in bpo-21423.)\nThe ProcessPoolExecutor\ncan now take the multiprocessing context via the new mp_context argument.\n(Contributed by Thomas Moreau in bpo-31540.)\n\n\ncontextlib\u00c2\u00b6\nThe new nullcontext() is a simpler and faster no-op\ncontext manager than ExitStack.\n(Contributed by Jesse-Bakker in bpo-10049.)\nThe new asynccontextmanager(),\nAbstractAsyncContextManager, and\nAsyncExitStack have been added to\ncomplement their synchronous counterparts.  (Contributed\nby Jelle Zijlstra in bpo-29679 and bpo-30241,\nand by Alexander Mohr and Ilya Kulakov in bpo-29302.)\n\n\ncProfile\u00c2\u00b6\nThe cProfile command line now accepts -m module_name as an\nalternative to script path.  (Contributed by Sanyam Khurana in bpo-21862.)\n\n\ncrypt\u00c2\u00b6\nThe crypt module now supports the Blowfish hashing method.\n(Contributed by Serhiy Storchaka in bpo-31664.)\nThe mksalt() function now allows specifying the number of rounds\nfor hashing.  (Contributed by Serhiy Storchaka in bpo-31702.)\n\n\ndatetime\u00c2\u00b6\nThe new datetime.fromisoformat()\nmethod constructs a datetime object from a string\nin one of the formats output by\ndatetime.isoformat().\n(Contributed by Paul Ganssle in bpo-15873.)\nThe tzinfo class now supports sub-minute offsets.\n(Contributed by Alexander Belopolsky in bpo-5288.)\n\n\ndbm\u00c2\u00b6\ndbm.dumb now supports reading read-only files and no longer writes the\nindex file when it is not changed.\n\n\ndecimal\u00c2\u00b6\nThe decimal module now uses context variables\nto store the decimal context.\n(Contributed by Yury Selivanov in bpo-32630.)\n\n\ndis\u00c2\u00b6\nThe dis() function is now able to\ndisassemble nested code objects (the code of comprehensions, generator\nexpressions and nested functions, and the code used for building nested\nclasses).  The maximum depth of disassembly recursion is controlled by\nthe new depth parameter.\n(Contributed by Serhiy Storchaka in bpo-11822.)\n\n\ndistutils\u00c2\u00b6\nREADME.rst is now included in the list of distutils standard READMEs and\ntherefore included in source distributions.\n(Contributed by Ryan Gonzalez in bpo-11913.)\n\n\nenum\u00c2\u00b6\nThe Enum learned the new _ignore_ class property,\nwhich allows listing the names of properties which should not become\nenum members.\n(Contributed by Ethan Furman in bpo-31801.)\nIn Python 3.8, attempting to check for non-Enum objects in Enum\nclasses will raise a TypeError (e.g. 1 in Color); similarly,\nattempting to check for non-Flag objects in a Flag member will\nraise TypeError (e.g. 1 in Perm.RW); currently, both operations\nreturn False instead and are deprecated.\n(Contributed by Ethan Furman in bpo-33217.)\n\n\nfunctools\u00c2\u00b6\nfunctools.singledispatch() now supports registering implementations\nusing type annotations.\n(Contributed by \u00c5\u0081ukasz Langa in bpo-32227.)\n\n\ngc\u00c2\u00b6\nThe new gc.freeze() function allows freezing all objects tracked\nby the garbage collector and excluding them from future collections.\nThis can be used before a POSIX fork() call to make the GC copy-on-write\nfriendly or to speed up collection.  The new gc.unfreeze() functions\nreverses this operation.  Additionally, gc.get_freeze_count() can\nbe used to obtain the number of frozen objects.\n(Contributed by Li Zekun in bpo-31558.)\n\n\nhmac\u00c2\u00b6\nThe hmac module now has an optimized one-shot digest()\nfunction, which is up to three times faster than HMAC().\n(Contributed by Christian Heimes in bpo-32433.)\n\n\nhttp.client\u00c2\u00b6\nHTTPConnection and HTTPSConnection\nnow support the new blocksize argument for improved upload throughput.\n(Contributed by Nir Soffer in bpo-31945.)\n\n\nhttp.server\u00c2\u00b6\nSimpleHTTPRequestHandler now supports the HTTP\nIf-Modified-Since header.  The server returns the 304 response status if\nthe target file was not modified after the time specified in the header.\n(Contributed by Pierre Quentel in bpo-29654.)\nSimpleHTTPRequestHandler accepts the new directory\nargument, in addition to the new --directory command line argument.\nWith this parameter, the server serves the specified directory, by default it\nuses the current working directory.\n(Contributed by St\u00c3\u00a9phane Wirtel and Julien Palard in bpo-28707.)\nThe new ThreadingHTTPServer class\nuses threads to handle requests using ThreadingMixin.\nIt is used when http.server is run with -m.\n(Contributed by Julien Palard in bpo-31639.)\n\n\nidlelib and IDLE\u00c2\u00b6\nMultiple fixes for autocompletion. (Contributed by Louie Lu in bpo-15786.)\nModule Browser (on the File menu, formerly called Class Browser),\nnow displays nested functions and classes in addition to top-level\nfunctions and classes.\n(Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan Reedy\nin bpo-1612262.)\nThe Settings dialog (Options, Configure IDLE) has been partly rewritten\nto improve both appearance and function.\n(Contributed by Cheryl Sabella and Terry Jan Reedy in multiple issues.)\nThe font sample now includes a selection of non-Latin characters so that\nusers can better see the effect of selecting a particular font.\n(Contributed by Terry Jan Reedy in bpo-13802.)\nThe sample can be edited to include other characters.\n(Contributed by Serhiy Storchaka in bpo-31860.)\nThe IDLE features formerly implemented as extensions have been reimplemented\nas normal features.  Their settings have been moved from the Extensions tab\nto other dialog tabs.\n(Contributed by Charles Wohlganger and Terry Jan Reedy in bpo-27099.)\nEditor code context option revised.  Box displays all context lines up to\nmaxlines.  Clicking on a context line jumps the editor to that line.  Context\ncolors for custom themes is added to Highlights tab of Settings dialog.\n(Contributed by Cheryl Sabella and Terry Jan Reedy in bpo-33642,\nbpo-33768, and bpo-33679.)\nOn Windows, a new API call tells Windows that tk scales for DPI. On Windows\n8.1+ or 10, with DPI compatibility properties of the Python binary\nunchanged, and a monitor resolution greater than 96 DPI, this should\nmake text and lines sharper.  It should otherwise have no effect.\n(Contributed by Terry Jan Reedy in bpo-33656.)\nNew in 3.7.1:\nOutput over N lines (50 by default) is squeezed down to a button.\nN can be changed in the PyShell section of the General page of the\nSettings dialog.  Fewer, but possibly extra long, lines can be squeezed by\nright clicking on the output.  Squeezed output can be expanded in place\nby double-clicking the button or into the clipboard or a separate window\nby right-clicking the button.  (Contributed by Tal Einat in bpo-1529353.)\nThe changes above have been backported to 3.6 maintenance releases.\nNEW in 3.7.4:\nAdd \u00e2\u0080\u009cRun Customized\u00e2\u0080\u009d to the Run menu to run a module with customized\nsettings. Any command line arguments entered are added to sys.argv.\nThey re-appear in the box for the next customized run.  One can also\nsuppress the normal Shell main module restart.  (Contributed by Cheryl\nSabella, Terry Jan Reedy, and others in bpo-5680 and bpo-37627.)\nNew in 3.7.5:\nAdd optional line numbers for IDLE editor windows. Windows\nopen without line numbers unless set otherwise in the General\ntab of the configuration dialog.  Line numbers for an existing\nwindow are shown and hidden in the Options menu.\n(Contributed by Tal Einat and Saimadhav Heblikar in bpo-17535.)\n\n\nimportlib\u00c2\u00b6\nThe importlib.abc.ResourceReader ABC was introduced to\nsupport the loading of resources from packages.  See also\nimportlib.resources.\n(Contributed by Barry Warsaw, Brett Cannon in bpo-32248.)\nimportlib.reload() now raises ModuleNotFoundError if the module\nlacks a spec.\n(Contributed by Garvit Khatri in bpo-29851.)\nimportlib.find_spec() now raises ModuleNotFoundError instead of\nAttributeError if the specified parent module is not a package (i.e.\nlacks a __path__ attribute).\n(Contributed by Milan Oberkirch in bpo-30436.)\nThe new importlib.source_hash() can be used to compute the hash of\nthe passed source.  A hash-based .pyc file\nembeds the value returned by this function.\n\n\nio\u00c2\u00b6\nThe new TextIOWrapper.reconfigure()\nmethod can be used to reconfigure the text stream with the new settings.\n(Contributed by Antoine Pitrou in bpo-30526 and\nINADA Naoki in bpo-15216.)\n\n\nipaddress\u00c2\u00b6\nThe new subnet_of() and supernet_of() methods of\nipaddress.IPv6Network and ipaddress.IPv4Network can\nbe used for network containment tests.\n(Contributed by Michel Albert and Cheryl Sabella in bpo-20825.)\n\n\nitertools\u00c2\u00b6\nitertools.islice() now accepts\ninteger-like objects as start, stop,\nand slice arguments.\n(Contributed by Will Roberts in bpo-30537.)\n\n\nlocale\u00c2\u00b6\nThe new monetary argument to locale.format_string() can be used\nto make the conversion use monetary thousands separators and\ngrouping strings.  (Contributed by Garvit in bpo-10379.)\nThe locale.getpreferredencoding() function now always returns 'UTF-8'\non Android or when in the forced UTF-8 mode.\n\n\nlogging\u00c2\u00b6\nLogger instances can now be pickled.\n(Contributed by Vinay Sajip in bpo-30520.)\nThe new StreamHandler.setStream()\nmethod can be used to replace the logger stream after handler creation.\n(Contributed by Vinay Sajip in bpo-30522.)\nIt is now possible to specify keyword arguments to handler constructors in\nconfiguration passed to logging.config.fileConfig().\n(Contributed by Preston Landers in bpo-31080.)\n\n\nmath\u00c2\u00b6\nThe new math.remainder() function implements the IEEE 754-style remainder\noperation.  (Contributed by Mark Dickinson in bpo-29962.)\n\n\nmimetypes\u00c2\u00b6\nThe MIME type of .bmp has been changed from 'image/x-ms-bmp' to\n'image/bmp'.\n(Contributed by Nitish Chandra in bpo-22589.)\n\n\nmsilib\u00c2\u00b6\nThe new Database.Close() method can be used\nto close the MSI database.\n(Contributed by Berker Peksag in bpo-20486.)\n\n\nmultiprocessing\u00c2\u00b6\nThe new Process.close() method\nexplicitly closes the process object and releases all resources associated\nwith it.  ValueError is raised if the underlying process is still\nrunning.\n(Contributed by Antoine Pitrou in bpo-30596.)\nThe new Process.kill() method can\nbe used to terminate the process using the SIGKILL signal on Unix.\n(Contributed by Vitor Pereira in bpo-30794.)\nNon-daemonic threads created by Process are now\njoined on process exit.\n(Contributed by Antoine Pitrou in bpo-18966.)\n\n\nos\u00c2\u00b6\nos.fwalk() now accepts the path argument as bytes.\n(Contributed by Serhiy Storchaka in bpo-28682.)\nos.scandir() gained support for file descriptors.\n(Contributed by Serhiy Storchaka in bpo-25996.)\nThe new register_at_fork() function allows registering Python\ncallbacks to be executed at process fork.\n(Contributed by Antoine Pitrou in bpo-16500.)\nAdded os.preadv() (combine the functionality of os.readv() and\nos.pread()) and os.pwritev() functions (combine the functionality\nof os.writev() and os.pwrite()). (Contributed by Pablo Galindo in\nbpo-31368.)\nThe mode argument of os.makedirs() no longer affects the file\npermission bits of newly-created intermediate-level directories.\n(Contributed by Serhiy Storchaka in bpo-19930.)\nos.dup2() now returns the new file descriptor.  Previously, None\nwas always returned.\n(Contributed by Benjamin Peterson in bpo-32441.)\nThe structure returned by os.stat() now contains the\nst_fstype attribute on Solaris and its derivatives.\n(Contributed by Jes\u00c3\u00bas Cea Avi\u00c3\u00b3n in bpo-32659.)\n\n\npathlib\u00c2\u00b6\nThe new Path.is_mount() method is now available\non POSIX systems and can be used to determine whether a path is a mount point.\n(Contributed by Cooper Ry Lees in bpo-30897.)\n\n\npdb\u00c2\u00b6\npdb.set_trace() now takes an optional header keyword-only\nargument.  If given, it is printed to the console just before debugging\nbegins.  (Contributed by Barry Warsaw in bpo-31389.)\npdb command line now accepts -m module_name as an alternative to\nscript file.  (Contributed by Mario Corchero in bpo-32206.)\n\n\npy_compile\u00c2\u00b6\npy_compile.compile() \u00e2\u0080\u0093 and by extension, compileall \u00e2\u0080\u0093 now\nrespects the SOURCE_DATE_EPOCH environment variable by\nunconditionally creating .pyc files for hash-based validation.\nThis allows for guaranteeing\nreproducible builds of .pyc\nfiles when they are created eagerly. (Contributed by Bernhard M. Wiedemann\nin bpo-29708.)\n\n\npydoc\u00c2\u00b6\nThe pydoc server can now bind to an arbitrary hostname specified by the\nnew -n command-line argument.\n(Contributed by Feanil Patel in bpo-31128.)\n\n\nqueue\u00c2\u00b6\nThe new SimpleQueue class is an unbounded FIFO queue.\n(Contributed by Antoine Pitrou in bpo-14976.)\n\n\nre\u00c2\u00b6\nThe flags re.ASCII, re.LOCALE and re.UNICODE\ncan be set within the scope of a group.\n(Contributed by Serhiy Storchaka in bpo-31690.)\nre.split() now supports splitting on a pattern like r'\\b',\n'^$' or (?=-) that matches an empty string.\n(Contributed by Serhiy Storchaka in bpo-25054.)\nRegular expressions compiled with the re.LOCALE flag no longer\ndepend on the locale at compile time.  Locale settings are applied only\nwhen the compiled regular expression is used.\n(Contributed by Serhiy Storchaka in bpo-30215.)\nFutureWarning is now emitted if a regular expression contains\ncharacter set constructs that will change semantically in the future,\nsuch as nested sets and set operations.\n(Contributed by Serhiy Storchaka in bpo-30349.)\nCompiled regular expression and match objects can now be copied\nusing copy.copy() and copy.deepcopy().\n(Contributed by Serhiy Storchaka in bpo-10076.)\n\n\nsignal\u00c2\u00b6\nThe new warn_on_full_buffer argument to the signal.set_wakeup_fd()\nfunction makes it possible to specify whether Python prints a warning on\nstderr when the wakeup buffer overflows.\n(Contributed by Nathaniel J. Smith in bpo-30050.)\n\n\nsocket\u00c2\u00b6\nThe new socket.getblocking() method\nreturns True if the socket is in blocking mode and False otherwise.\n(Contributed by Yury Selivanov in bpo-32373.)\nThe new socket.close() function closes the passed socket file descriptor.\nThis function should be used instead of os.close() for better\ncompatibility across platforms.\n(Contributed by Christian Heimes in bpo-32454.)\nThe socket module now exposes the socket.TCP_CONGESTION\n(Linux 2.6.13), socket.TCP_USER_TIMEOUT (Linux 2.6.37), and\nsocket.TCP_NOTSENT_LOWAT (Linux 3.12) constants.\n(Contributed by Omar Sandoval in bpo-26273 and\nNathaniel J. Smith in bpo-29728.)\nSupport for socket.AF_VSOCK sockets has been added to allow\ncommunication between virtual machines and their hosts.\n(Contributed by Cathy Avery in bpo-27584.)\nSockets now auto-detect family, type and protocol from file descriptor\nby default.\n(Contributed by Christian Heimes in bpo-28134.)\n\n\nsocketserver\u00c2\u00b6\nsocketserver.ThreadingMixIn.server_close() now waits until all non-daemon\nthreads complete. socketserver.ForkingMixIn.server_close() now waits\nuntil all child processes complete.\nAdd a new socketserver.ForkingMixIn.block_on_close class attribute to\nsocketserver.ForkingMixIn and socketserver.ThreadingMixIn\nclasses. Set the class attribute to False to get the pre-3.7 behaviour.\n\n\nsqlite3\u00c2\u00b6\nsqlite3.Connection now exposes the backup()\nmethod when the underlying SQLite library is at version 3.6.11 or higher.\n(Contributed by Lele Gaifax in bpo-27645.)\nThe database argument of sqlite3.connect() now accepts any\npath-like object, instead of just a string.\n(Contributed by Anders Lorentsen in bpo-31843.)\n\n\nssl\u00c2\u00b6\nThe ssl module now uses OpenSSL\u00e2\u0080\u0099s builtin API instead of\nmatch_hostname() to check a host name or an IP address.  Values\nare validated during TLS handshake.  Any certificate validation error\nincluding failing the host name check now raises\nSSLCertVerificationError and aborts the handshake with a proper\nTLS Alert message.  The new exception contains additional information.\nHost name validation can be customized with\nSSLContext.hostname_checks_common_name.\n(Contributed by Christian Heimes in bpo-31399.)\n\nNote\nThe improved host name check requires a libssl implementation compatible\nwith OpenSSL 1.0.2 or 1.1.  Consequently, OpenSSL 0.9.8 and 1.0.1 are no\nlonger supported (see Platform Support Removals for more details).\nThe ssl module is mostly compatible with LibreSSL 2.7.2 and newer.\n\nThe ssl module no longer sends IP addresses in SNI TLS extension.\n(Contributed by Christian Heimes in bpo-32185.)\nmatch_hostname() no longer supports partial wildcards like\nwww*.example.org.\n(Contributed by Mandeep Singh in bpo-23033 and Christian Heimes in\nbpo-31399.)\nThe default cipher suite selection of the ssl module now uses a blacklist\napproach rather than a hard-coded whitelist.  Python no longer re-enables\nciphers that have been blocked by OpenSSL security updates.  Default cipher\nsuite selection can be configured at compile time.\n(Contributed by Christian Heimes in bpo-31429.)\nValidation of server certificates containing internationalized domain names\n(IDNs) is now supported.  As part of this change, the\nSSLSocket.server_hostname attribute\nnow stores the expected hostname in A-label form (\"xn--pythn-mua.org\"),\nrather than the U-label form (\"pyth\u00c3\u00b6n.org\").  (Contributed by\nNathaniel J. Smith and Christian Heimes in bpo-28414.)\nThe ssl module has preliminary and experimental support for TLS 1.3 and\nOpenSSL 1.1.1.  At the time of Python 3.7.0 release, OpenSSL 1.1.1 is still\nunder development and TLS 1.3 hasn\u00e2\u0080\u0099t been finalized yet.  The TLS 1.3\nhandshake and protocol behaves slightly differently than TLS 1.2 and earlier,\nsee TLS 1.3.\n(Contributed by Christian Heimes in bpo-32947, bpo-20995,\nbpo-29136, bpo-30622 and bpo-33618)\nSSLSocket and SSLObject no longer have a public\nconstructor.  Direct instantiation was never a documented and supported\nfeature.  Instances must be created with SSLContext methods\nwrap_socket() and wrap_bio().\n(Contributed by Christian Heimes in bpo-32951)\nOpenSSL 1.1 APIs for setting the minimum and maximum TLS protocol version are\navailable as SSLContext.minimum_version\nand SSLContext.maximum_version.\nSupported protocols are indicated by several new flags, such as\nHAS_TLSv1_1.\n(Contributed by Christian Heimes in bpo-32609.)\n\n\nstring\u00c2\u00b6\nstring.Template now lets you to optionally modify the regular\nexpression pattern for braced placeholders and non-braced placeholders\nseparately.  (Contributed by Barry Warsaw in bpo-1198569.)\n\n\nsubprocess\u00c2\u00b6\nThe subprocess.run() function accepts the new capture_output\nkeyword argument.  When true, stdout and stderr will be captured.\nThis is equivalent to passing subprocess.PIPE as stdout and\nstderr arguments.\n(Contributed by Bo Bayles in bpo-32102.)\nThe subprocess.run function and the subprocess.Popen constructor\nnow accept the text keyword argument as an alias\nto universal_newlines.\n(Contributed by Andrew Clegg in bpo-31756.)\nOn Windows the default for close_fds was changed from False to\nTrue when redirecting the standard handles.  It\u00e2\u0080\u0099s now possible to set\nclose_fds to true when redirecting the standard handles.  See\nsubprocess.Popen.  This means that close_fds now defaults to\nTrue on all supported platforms.\n(Contributed by Segev Finer in bpo-19764.)\nThe subprocess module is now more graceful when handling\nKeyboardInterrupt during subprocess.call(),\nsubprocess.run(), or in a Popen\ncontext manager.  It now waits a short amount of time for the child\nto exit, before continuing the handling of the KeyboardInterrupt\nexception.\n(Contributed by Gregory P. Smith in bpo-25942.)\n\n\nsys\u00c2\u00b6\nThe new sys.breakpointhook() hook function is called by the\nbuilt-in breakpoint().\n(Contributed by Barry Warsaw in bpo-31353.)\nOn Android, the new sys.getandroidapilevel() returns the build-time\nAndroid API version.\n(Contributed by Victor Stinner in bpo-28740.)\nThe new sys.get_coroutine_origin_tracking_depth() function returns\nthe current coroutine origin tracking depth, as set by\nthe new sys.set_coroutine_origin_tracking_depth().  asyncio\nhas been converted to use this new API instead of\nthe deprecated sys.set_coroutine_wrapper().\n(Contributed by Nathaniel J. Smith in bpo-32591.)\n\n\ntime\u00c2\u00b6\nPEP 564 adds six new functions with nanosecond resolution to the\ntime module:\n\ntime.clock_gettime_ns()\ntime.clock_settime_ns()\ntime.monotonic_ns()\ntime.perf_counter_ns()\ntime.process_time_ns()\ntime.time_ns()\n\nNew clock identifiers have been added:\n\ntime.CLOCK_BOOTTIME (Linux): Identical to\ntime.CLOCK_MONOTONIC, except it also includes any time that the\nsystem is suspended.\ntime.CLOCK_PROF (FreeBSD, NetBSD and OpenBSD): High-resolution\nper-process CPU timer.\ntime.CLOCK_UPTIME (FreeBSD, OpenBSD): Time whose absolute value is\nthe time the system has been running and not suspended, providing accurate\nuptime measurement.\n\nThe new time.thread_time() and time.thread_time_ns() functions\ncan be used to get per-thread CPU time measurements.\n(Contributed by Antoine Pitrou in bpo-32025.)\nThe new time.pthread_getcpuclockid() function returns the clock ID\nof the thread-specific CPU-time clock.\n\n\ntkinter\u00c2\u00b6\nThe new tkinter.ttk.Spinbox class is now available.\n(Contributed by Alan Moore in bpo-32585.)\n\n\ntracemalloc\u00c2\u00b6\ntracemalloc.Traceback behaves more like regular tracebacks,\nsorting the frames from oldest to most recent.\nTraceback.format()\nnow accepts negative limit, truncating the result to the\nabs(limit) oldest frames.  To get the old behaviour, use\nthe new most_recent_first argument to Traceback.format().\n(Contributed by Jesse Bakker in bpo-32121.)\n\n\ntypes\u00c2\u00b6\nThe new WrapperDescriptorType,\nMethodWrapperType, MethodDescriptorType,\nand ClassMethodDescriptorType classes are now available.\n(Contributed by Manuel Krebber and Guido van Rossum in bpo-29377,\nand Serhiy Storchaka in bpo-32265.)\nThe new types.resolve_bases() function resolves MRO entries\ndynamically as specified by PEP 560.\n(Contributed by Ivan Levkivskyi in bpo-32717.)\n\n\nunicodedata\u00c2\u00b6\nThe internal unicodedata database has been upgraded to use Unicode 11. (Contributed by Benjamin\nPeterson.)\n\n\nunittest\u00c2\u00b6\nThe new -k command-line option allows filtering tests by a name\nsubstring or a Unix shell-like pattern.\nFor example, python -m unittest -k foo runs\nfoo_tests.SomeTest.test_something, bar_tests.SomeTest.test_foo,\nbut not bar_tests.FooTest.test_something.\n(Contributed by Jonas Haag in bpo-32071.)\n\n\nunittest.mock\u00c2\u00b6\nThe sentinel attributes now preserve their identity\nwhen they are copied or pickled. (Contributed by\nSerhiy Storchaka in bpo-20804.)\nThe new seal() function allows sealing\nMock instances, which will disallow further creation\nof attribute mocks.  The seal is applied recursively to all attributes that\nare themselves mocks.\n(Contributed by Mario Corchero in bpo-30541.)\n\n\nurllib.parse\u00c2\u00b6\nurllib.parse.quote() has been updated from RFC 2396 to RFC 3986,\nadding ~ to the set of characters that are never quoted by default.\n(Contributed by Christian Theune and Ratnadeep Debnath in bpo-16285.)\n\n\nuu\u00c2\u00b6\nThe uu.encode() function now accepts an optional backtick\nkeyword argument.  When it\u00e2\u0080\u0099s true, zeros are represented by '`'\ninstead of spaces.  (Contributed by Xiang Zhang in bpo-30103.)\n\n\nuuid\u00c2\u00b6\nThe new UUID.is_safe attribute relays information\nfrom the platform about whether generated UUIDs are generated with a\nmultiprocessing-safe method.\n(Contributed by Barry Warsaw in bpo-22807.)\nuuid.getnode() now prefers universally administered\nMAC addresses over locally administered MAC addresses.\nThis makes a better guarantee for global uniqueness of UUIDs returned\nfrom uuid.uuid1().  If only locally administered MAC addresses are\navailable, the first such one found is returned.\n(Contributed by Barry Warsaw in bpo-32107.)\n\n\nwarnings\u00c2\u00b6\nThe initialization of the default warnings filters has changed as follows:\n\nwarnings enabled via command line options (including those for -b\nand the new CPython-specific -X dev option) are always passed\nto the warnings machinery via the sys.warnoptions attribute.\nwarnings filters enabled via the command line or the environment now have the\nfollowing order of precedence:\n\n\nthe BytesWarning filter for -b (or -bb)\nany filters specified with the -W option\nany filters specified with the PYTHONWARNINGS environment\nvariable\nany other CPython specific filters (e.g. the default filter added\nfor the new -X dev mode)\nany implicit filters defined directly by the warnings machinery\n\n\n\nin CPython debug builds, all warnings are now displayed by default (the\nimplicit filter list is empty)\n\n(Contributed by Nick Coghlan and Victor Stinner in bpo-20361,\nbpo-32043, and bpo-32230.)\nDeprecation warnings are once again shown by default in single-file scripts and\nat the interactive prompt.  See PEP 565: Show DeprecationWarning in __main__ for details.\n(Contributed by Nick Coghlan in bpo-31975.)\n\n\nxml.etree\u00c2\u00b6\nElementPath predicates in the find()\nmethods can now compare text of the current node with [. = \"text\"],\nnot only text in children.  Predicates also allow adding spaces for\nbetter readability.  (Contributed by Stefan Behnel in bpo-31648.)\n\n\nxmlrpc.server\u00c2\u00b6\nSimpleXMLRPCDispatcher.register_function\ncan now be used as a decorator.  (Contributed by Xiang Zhang in\nbpo-7769.)\n\n\nzipapp\u00c2\u00b6\nFunction create_archive() now accepts an optional filter\nargument to allow the user to select which files should be included in the\narchive.  (Contributed by Irmen de Jong in bpo-31072.)\nFunction create_archive() now accepts an optional compressed\nargument to generate a compressed archive.  A command line option\n--compress has also been added to support compression.\n(Contributed by Zhiming Wang in bpo-31638.)\n\n\nzipfile\u00c2\u00b6\nZipFile now accepts the new compresslevel parameter to\ncontrol the compression level.\n(Contributed by Bo Bayles in bpo-21417.)\nSubdirectories in archives created by ZipFile are now stored in\nalphabetical order.\n(Contributed by Bernhard M. Wiedemann in bpo-30693.)\n\n\n\nC API Changes\u00c2\u00b6\nA new API for thread-local storage has been implemented.  See\nPEP 539: New C API for Thread-Local Storage for an overview and\nThread Specific Storage (TSS) API for a complete reference.\n(Contributed by Masayuki Yamamoto in bpo-25658.)\nThe new context variables functionality\nexposes a number of new C APIs.\nThe new PyImport_GetModule() function returns the previously\nimported module with the given name.\n(Contributed by Eric Snow in bpo-28411.)\nThe new Py_RETURN_RICHCOMPARE macro eases writing rich\ncomparison functions.\n(Contributed by Petr Victorin in bpo-23699.)\nThe new Py_UNREACHABLE macro can be used to mark unreachable\ncode paths.\n(Contributed by Barry Warsaw in bpo-31338.)\nThe tracemalloc now exposes a C API through the new\nPyTraceMalloc_Track() and PyTraceMalloc_Untrack()\nfunctions.\n(Contributed by Victor Stinner in bpo-30054.)\nThe new import__find__load__start() and\nimport__find__load__done() static markers can be used to trace\nmodule imports.\n(Contributed by Christian Heimes in bpo-31574.)\nThe fields name and doc of structures\nPyMemberDef, PyGetSetDef,\nPyStructSequence_Field, PyStructSequence_Desc,\nand wrapperbase are now of type const char * rather of\nchar *.  (Contributed by Serhiy Storchaka in bpo-28761.)\nThe result of PyUnicode_AsUTF8AndSize() and PyUnicode_AsUTF8()\nis now of type const char * rather of char *. (Contributed by Serhiy\nStorchaka in bpo-28769.)\nThe result of PyMapping_Keys(), PyMapping_Values() and\nPyMapping_Items() is now always a list, rather than a list or a\ntuple. (Contributed by Oren Milman in bpo-28280.)\nAdded functions PySlice_Unpack() and PySlice_AdjustIndices().\n(Contributed by Serhiy Storchaka in bpo-27867.)\nPyOS_AfterFork() is deprecated in favour of the new functions\nPyOS_BeforeFork(), PyOS_AfterFork_Parent() and\nPyOS_AfterFork_Child().  (Contributed by Antoine Pitrou in\nbpo-16500.)\nThe PyExc_RecursionErrorInst singleton that was part of the public API\nhas been removed as its members being never cleared may cause a segfault\nduring finalization of the interpreter. Contributed by Xavier de Gaye in\nbpo-22898 and bpo-30697.\nAdded C API support for timezones with timezone constructors\nPyTimeZone_FromOffset() and PyTimeZone_FromOffsetAndName(),\nand access to the UTC singleton with PyDateTime_TimeZone_UTC.\nContributed by Paul Ganssle in bpo-10381.\nThe type of results of PyThread_start_new_thread() and\nPyThread_get_thread_ident(), and the id parameter of\nPyThreadState_SetAsyncExc() changed from long to\nunsigned long.\n(Contributed by Serhiy Storchaka in bpo-6532.)\nPyUnicode_AsWideCharString() now raises a ValueError if the\nsecond argument is NULL and the wchar_t* string contains null\ncharacters.  (Contributed by Serhiy Storchaka in bpo-30708.)\nChanges to the startup sequence and the management of dynamic memory\nallocators mean that the long documented requirement to call\nPy_Initialize() before calling most C API functions is now\nrelied on more heavily, and failing to abide by it may lead to segfaults in\nembedding applications. See the Porting to Python 3.7 section in this\ndocument and the Before Python Initialization section in the C API documentation\nfor more details.\nThe new PyInterpreterState_GetID() returns the unique ID for a\ngiven interpreter.\n(Contributed by Eric Snow in bpo-29102.)\nPy_DecodeLocale(), Py_EncodeLocale() now use the UTF-8\nencoding when the UTF-8 mode is enabled.\n(Contributed by Victor Stinner in bpo-29240.)\nPyUnicode_DecodeLocaleAndSize() and PyUnicode_EncodeLocale()\nnow use the current locale encoding for surrogateescape error handler.\n(Contributed by Victor Stinner in bpo-29240.)\nThe start and end parameters of PyUnicode_FindChar() are\nnow adjusted to behave like string slices.\n(Contributed by Xiang Zhang in bpo-28822.)\n\n\nBuild Changes\u00c2\u00b6\nSupport for building --without-threads has been removed.  The\nthreading module is now always available.\n(Contributed by Antoine Pitrou in bpo-31370.).\nA full copy of libffi is no longer bundled for use when building the\n_ctypes module on non-OSX UNIX platforms.  An installed copy\nof libffi is now required when building _ctypes on such platforms.\n(Contributed by Zachary Ware in bpo-27979.)\nThe Windows build process no longer depends on Subversion to pull in external\nsources, a Python script is used to download zipfiles from GitHub instead.\nIf Python 3.6 is not found on the system (via py -3.6), NuGet is used to\ndownload a copy of 32-bit Python for this purpose.  (Contributed by Zachary\nWare in bpo-30450.)\nThe ssl module requires OpenSSL 1.0.2 or 1.1 compatible libssl.\nOpenSSL 1.0.1 has reached end of lifetime on 2016-12-31 and is no longer\nsupported. LibreSSL is temporarily not supported as well. LibreSSL releases\nup to version 2.6.4 are missing required OpenSSL 1.0.2 APIs.\n\n\nOptimizations\u00c2\u00b6\nThe overhead of calling many methods of various standard library classes\nimplemented in C has been significantly reduced by porting more code\nto use the METH_FASTCALL convention.\n(Contributed by Victor Stinner in bpo-29300, bpo-29507,\nbpo-29452, and bpo-29286.)\nVarious optimizations have reduced Python startup time by 10% on Linux and\nup to 30% on macOS.\n(Contributed by Victor Stinner, INADA Naoki in bpo-29585, and\nIvan Levkivskyi in bpo-31333.)\nMethod calls are now up to 20% faster due to the bytecode changes which\navoid creating bound method instances.\n(Contributed by Yury Selivanov and INADA Naoki in bpo-26110.)\nThe asyncio module received a number of notable optimizations for\ncommonly used functions:\n\nThe asyncio.get_event_loop() function has been reimplemented in C to\nmake it up to 15 times faster.\n(Contributed by Yury Selivanov in bpo-32296.)\nasyncio.Future callback management has been optimized.\n(Contributed by Yury Selivanov in bpo-32348.)\nasyncio.gather() is now up to 15% faster.\n(Contributed by Yury Selivanov in bpo-32355.)\nasyncio.sleep() is now up to 2 times faster when the delay\nargument is zero or negative.\n(Contributed by Andrew Svetlov in bpo-32351.)\nThe performance overhead of asyncio debug mode has been reduced.\n(Contributed by Antoine Pitrou in bpo-31970.)\n\nAs a result of PEP 560 work, the import time\nof typing has been reduced by a factor of 7, and many typing operations\nare now faster.\n(Contributed by Ivan Levkivskyi in bpo-32226.)\nsorted() and list.sort() have been optimized for common cases\nto be up to 40-75% faster.\n(Contributed by Elliot Gorokhovsky in bpo-28685.)\ndict.copy() is now up to 5.5 times faster.\n(Contributed by Yury Selivanov in bpo-31179.)\nhasattr() and getattr() are now about 4 times faster when\nname is not found and obj does not override object.__getattr__()\nor object.__getattribute__().\n(Contributed by INADA Naoki in bpo-32544.)\nSearching for certain Unicode characters (like Ukrainian capital \u00e2\u0080\u009c\u00d0\u0084\u00e2\u0080\u009d)\nin a string was up to 25 times slower than searching for other characters.\nIt is now only 3 times slower in the worst case.\n(Contributed by Serhiy Storchaka in bpo-24821.)\nThe collections.namedtuple() factory has been reimplemented to\nmake the creation of named tuples 4 to 6 times faster.\n(Contributed by Jelle Zijlstra with further improvements by INADA Naoki,\nSerhiy Storchaka, and Raymond Hettinger in bpo-28638.)\ndate.fromordinal() and date.fromtimestamp() are now up to\n30% faster in the common case.\n(Contributed by Paul Ganssle in bpo-32403.)\nThe os.fwalk() function is now up to 2 times faster thanks to\nthe use of os.scandir().\n(Contributed by Serhiy Storchaka in bpo-25996.)\nThe speed of the shutil.rmtree() function has been improved by\n20\u00e2\u0080\u009340% thanks to the use of the os.scandir() function.\n(Contributed by Serhiy Storchaka in bpo-28564.)\nOptimized case-insensitive matching and searching of regular\nexpressions.  Searching some patterns can now be up to 20 times faster.\n(Contributed by Serhiy Storchaka in bpo-30285.)\nre.compile() now converts flags parameter to int object if\nit is RegexFlag.  It is now as fast as Python 3.5, and faster than\nPython 3.6 by about 10% depending on the pattern.\n(Contributed by INADA Naoki in bpo-31671.)\nThe modify() methods of classes\nselectors.EpollSelector, selectors.PollSelector\nand selectors.DevpollSelector may be around 10% faster under\nheavy loads.  (Contributed by Giampaolo Rodola\u00e2\u0080\u0099 in bpo-30014)\nConstant folding has been moved from the peephole optimizer to the new AST\noptimizer, which is able perform optimizations more consistently.\n(Contributed by Eugene Toder and INADA Naoki in bpo-29469 and\nbpo-11549.)\nMost functions and methods in abc have been rewritten in C.\nThis makes creation of abstract base classes, and calling isinstance()\nand issubclass() on them 1.5x faster.  This also reduces Python\nstart-up time by up to 10%. (Contributed by Ivan Levkivskyi and INADA Naoki\nin bpo-31333)\nSignificant speed improvements to alternate constructors for\ndatetime.date and datetime.datetime by using fast-path\nconstructors when not constructing subclasses. (Contributed by Paul Ganssle\nin bpo-32403)\nThe speed of comparison of array.array instances has been\nimproved considerably in certain cases.  It is now from 10x to 70x faster\nwhen comparing arrays holding values of the same integer type.\n(Contributed by Adrian Wielgosik in bpo-24700.)\nThe math.erf() and math.erfc() functions now use the (faster)\nC library implementation on most platforms.\n(Contributed by Serhiy Storchaka in bpo-26121.)\n\n\nOther CPython Implementation Changes\u00c2\u00b6\n\nTrace hooks may now opt out of receiving the line and opt into receiving\nthe opcode events from the interpreter by setting the corresponding new\nf_trace_lines and f_trace_opcodes attributes on the\nframe being traced. (Contributed by Nick Coghlan in bpo-31344.)\nFixed some consistency problems with namespace package module attributes.\nNamespace module objects now have an __file__ that is set to None\n(previously unset), and their __spec__.origin is also set to None\n(previously the string \"namespace\").  See bpo-32305.  Also, the\nnamespace module object\u00e2\u0080\u0099s __spec__.loader is set to the same value as\n__loader__ (previously, the former was set to None).  See\nbpo-32303.\nThe locals() dictionary now displays in the lexical order that\nvariables were defined.  Previously, the order was undefined.\n(Contributed by Raymond Hettinger in bpo-32690.)\nThe distutils upload command no longer tries to change CR\nend-of-line characters to CRLF.  This fixes a corruption issue with sdists\nthat ended with a byte equivalent to CR.\n(Contributed by Bo Bayles in bpo-32304.)\n\n\n\nDeprecated Python Behavior\u00c2\u00b6\nYield expressions (both yield and yield from clauses) are now deprecated\nin comprehensions and generator expressions (aside from the iterable expression\nin the leftmost for clause). This ensures that comprehensions\nalways immediately return a container of the appropriate type (rather than\npotentially returning a generator iterator object), while generator\nexpressions won\u00e2\u0080\u0099t attempt to interleave their implicit output with the output\nfrom any explicit yield expressions.  In Python 3.7, such expressions emit\nDeprecationWarning when compiled, in Python 3.8 this will be a\nSyntaxError.\n(Contributed by Serhiy Storchaka in bpo-10544.)\nReturning a subclass of complex from object.__complex__() is\ndeprecated and will be an error in future Python versions.  This makes\n__complex__() consistent with object.__int__() and\nobject.__float__().\n(Contributed by Serhiy Storchaka in bpo-28894.)\n\n\nDeprecated Python modules, functions and methods\u00c2\u00b6\n\naifc\u00c2\u00b6\naifc.openfp() has been deprecated and will be removed in Python 3.9.\nUse aifc.open() instead.\n(Contributed by Brian Curtin in bpo-31985.)\n\n\nasyncio\u00c2\u00b6\nSupport for directly await-ing instances of asyncio.Lock and\nother asyncio synchronization primitives has been deprecated.  An\nasynchronous context manager must be used in order to acquire and release\nthe synchronization resource.\n(Contributed by Andrew Svetlov in bpo-32253.)\nThe asyncio.Task.current_task() and asyncio.Task.all_tasks()\nmethods have been deprecated.\n(Contributed by Andrew Svetlov in bpo-32250.)\n\n\ncollections\u00c2\u00b6\nIn Python 3.8, the abstract base classes in collections.abc will no\nlonger be exposed in the regular collections module.  This will help\ncreate a clearer distinction between the concrete classes and the abstract\nbase classes.\n(Contributed by Serhiy Storchaka in bpo-25988.)\n\n\ndbm\u00c2\u00b6\ndbm.dumb now supports reading read-only files and no longer writes the\nindex file when it is not changed.  A deprecation warning is now emitted\nif the index file is missing and recreated in the 'r' and 'w'\nmodes (this will be an error in future Python releases).\n(Contributed by Serhiy Storchaka in bpo-28847.)\n\n\nenum\u00c2\u00b6\nIn Python 3.8, attempting to check for non-Enum objects in Enum\nclasses will raise a TypeError (e.g. 1 in Color); similarly,\nattempting to check for non-Flag objects in a Flag member will\nraise TypeError (e.g. 1 in Perm.RW); currently, both operations\nreturn False instead.\n(Contributed by Ethan Furman in bpo-33217.)\n\n\ngettext\u00c2\u00b6\nUsing non-integer value for selecting a plural form in gettext is\nnow deprecated.  It never correctly worked. (Contributed by Serhiy Storchaka\nin bpo-28692.)\n\n\nimportlib\u00c2\u00b6\nMethods\nMetaPathFinder.find_module()\n(replaced by\nMetaPathFinder.find_spec())\nand\nPathEntryFinder.find_loader()\n(replaced by\nPathEntryFinder.find_spec())\nboth deprecated in Python 3.4 now emit DeprecationWarning.\n(Contributed by Matthias Bussonnier in bpo-29576)\nThe importlib.abc.ResourceLoader ABC has been deprecated in\nfavour of importlib.abc.ResourceReader.\n\n\nlocale\u00c2\u00b6\nlocale.format() has been deprecated, use locale.format_string()\ninstead.  (Contributed by Garvit in bpo-10379.)\n\n\nmacpath\u00c2\u00b6\nThe macpath is now deprecated and will be removed in Python 3.8.\n(Contributed by Chi Hsuan Yen in bpo-9850.)\n\n\nthreading\u00c2\u00b6\ndummy_threading and _dummy_thread have been deprecated.  It is\nno longer possible to build Python with threading disabled.\nUse threading instead.\n(Contributed by Antoine Pitrou in bpo-31370.)\n\n\nsocket\u00c2\u00b6\nThe silent argument value truncation in socket.htons() and\nsocket.ntohs() has been deprecated.  In future versions of Python,\nif the passed argument is larger than 16 bits, an exception will be raised.\n(Contributed by Oren Milman in bpo-28332.)\n\n\nssl\u00c2\u00b6\nssl.wrap_socket() is deprecated.  Use\nssl.SSLContext.wrap_socket() instead.\n(Contributed by Christian Heimes in bpo-28124.)\n\n\nsunau\u00c2\u00b6\nsunau.openfp() has been deprecated and will be removed in Python 3.9.\nUse sunau.open() instead.\n(Contributed by Brian Curtin in bpo-31985.)\n\n\nsys\u00c2\u00b6\nDeprecated sys.set_coroutine_wrapper() and\nsys.get_coroutine_wrapper().\nThe undocumented sys.callstats() function has been deprecated and\nwill be removed in a future Python version.\n(Contributed by Victor Stinner in bpo-28799.)\n\n\nwave\u00c2\u00b6\nwave.openfp() has been deprecated and will be removed in Python 3.9.\nUse wave.open() instead.\n(Contributed by Brian Curtin in bpo-31985.)\n\n\n\nDeprecated functions and types of the C API\u00c2\u00b6\nFunction PySlice_GetIndicesEx() is deprecated and replaced with\na macro if Py_LIMITED_API is not set or set to a value in the range\nbetween 0x03050400 and 0x03060000 (not inclusive), or is 0x03060100\nor higher.  (Contributed by Serhiy Storchaka in bpo-27867.)\nPyOS_AfterFork() has been deprecated.  Use PyOS_BeforeFork(),\nPyOS_AfterFork_Parent() or PyOS_AfterFork_Child() instead.\n(Contributed by Antoine Pitrou in bpo-16500.)\n\n\nPlatform Support Removals\u00c2\u00b6\n\nFreeBSD 9 and older are no longer officially supported.\nFor full Unicode support, including within extension modules, *nix platforms\nare now expected to provide at least one of C.UTF-8 (full locale),\nC.utf8 (full locale) or UTF-8 (LC_CTYPE-only locale) as an\nalternative to the legacy ASCII-based C locale.\nOpenSSL 0.9.8 and 1.0.1 are no longer supported, which means building CPython\n3.7 with SSL/TLS support on older platforms still using these versions\nrequires custom build options that link to a more recent version of OpenSSL.\nNotably, this issue affects the Debian 8 (aka \u00e2\u0080\u009cjessie\u00e2\u0080\u009d) and Ubuntu 14.04\n(aka \u00e2\u0080\u009cTrusty\u00e2\u0080\u009d) LTS Linux distributions, as they still use OpenSSL 1.0.1 by\ndefault.\nDebian 9 (\u00e2\u0080\u009cstretch\u00e2\u0080\u009d) and Ubuntu 16.04 (\u00e2\u0080\u009cxenial\u00e2\u0080\u009d), as well as recent releases\nof other LTS Linux releases (e.g. RHEL/CentOS 7.5, SLES 12-SP3), use OpenSSL\n1.0.2 or later, and remain supported in the default build configuration.\nCPython\u00e2\u0080\u0099s own CI configuration file provides an\nexample of using the SSL\ncompatibility testing infrastructure in\nCPython\u00e2\u0080\u0099s test suite to build and link against OpenSSL 1.1.0 rather than an\noutdated system provided OpenSSL.\n\n\n\n\nAPI and Feature Removals\u00c2\u00b6\nThe following features and APIs have been removed from Python 3.7:\n\nThe os.stat_float_times() function has been removed. It was introduced in\nPython 2.3 for backward compatibility with Python 2.2, and was deprecated\nsince Python 3.1.\nUnknown escapes consisting of '\\' and an ASCII letter in replacement\ntemplates for re.sub() were deprecated in Python 3.5, and will now\ncause an error.\nRemoved support of the exclude argument in tarfile.TarFile.add().\nIt was deprecated in Python 2.7 and 3.2.  Use the filter argument instead.\nThe splitunc() function in the ntpath module was deprecated in\nPython 3.1, and has now been removed.  Use the splitdrive()\nfunction instead.\ncollections.namedtuple() no longer supports the verbose parameter\nor _source attribute which showed the generated source code for the\nnamed tuple class.  This was part of an optimization designed to speed-up\nclass creation.  (Contributed by Jelle Zijlstra with further improvements\nby INADA Naoki, Serhiy Storchaka, and Raymond Hettinger in bpo-28638.)\nFunctions bool(), float(), list() and tuple() no\nlonger take keyword arguments.  The first argument of int() can now\nbe passed only as positional argument.\nRemoved previously deprecated in Python 2.4 classes Plist, Dict and\n_InternalDict in the plistlib module.  Dict values in the result\nof functions readPlist() and\nreadPlistFromBytes() are now normal dicts.  You no longer\ncan use attribute access to access items of these dictionaries.\nThe asyncio.windows_utils.socketpair() function has been\nremoved.  Use the socket.socketpair() function instead,\nit is available on all platforms since Python 3.5.\nasyncio.windows_utils.socketpair was just an alias to\nsocket.socketpair on Python 3.5 and newer.\nasyncio no longer exports the selectors and\n_overlapped modules as asyncio.selectors and\nasyncio._overlapped. Replace from asyncio import selectors with\nimport selectors.\nDirect instantiation of ssl.SSLSocket and ssl.SSLObject\nobjects is now prohibited. The constructors were never documented, tested,\nor designed as public constructors.  Users were supposed to use\nssl.wrap_socket() or ssl.SSLContext.\n(Contributed by Christian Heimes in bpo-32951.)\nThe unused distutils install_misc command has been removed.\n(Contributed by Eric N. Vander Weele in bpo-29218.)\n\n\n\nModule Removals\u00c2\u00b6\nThe fpectl module has been removed.  It was never enabled by\ndefault, never worked correctly on x86-64, and it changed the Python\nABI in ways that caused unexpected breakage of C extensions.\n(Contributed by Nathaniel J. Smith in bpo-29137.)\n\n\nWindows-only Changes\u00c2\u00b6\nThe python launcher, (py.exe), can accept 32 & 64 bit specifiers without\nhaving to specify a minor version as well. So py -3-32 and py -3-64\nbecome valid as well as py -3.7-32, also the -m-64 and -m.n-64 forms\nare now accepted to force 64 bit python even if 32 bit would have otherwise\nbeen used. If the specified version is not available py.exe will error exit.\n(Contributed by Steve Barnes in bpo-30291.)\nThe launcher can be run as py -0 to produce a list of the installed pythons,\nwith default marked with an asterisk. Running py -0p will include the paths.\nIf py is run with a version specifier that cannot be matched it will also print\nthe short form list of available specifiers.\n(Contributed by Steve Barnes in bpo-30362.)\n\n\nPorting to Python 3.7\u00c2\u00b6\nThis section lists previously described changes and other bugfixes\nthat may require changes to your code.\n\nChanges in Python Behavior\u00c2\u00b6\n\nasync and await names are now reserved keywords.\nCode using these names as identifiers will now raise a SyntaxError.\n(Contributed by Jelle Zijlstra in bpo-30406.)\nPEP 479 is enabled for all code in Python 3.7, meaning that\nStopIteration exceptions raised directly or indirectly in\ncoroutines and generators are transformed into RuntimeError\nexceptions.\n(Contributed by Yury Selivanov in bpo-32670.)\nobject.__aiter__() methods can no longer be declared as\nasynchronous.  (Contributed by Yury Selivanov in bpo-31709.)\nDue to an oversight, earlier Python versions erroneously accepted the\nfollowing syntax:\nf(1 for x in [1],)\n\nclass C(1 for x in [1]):\n    pass\n\n\nPython 3.7 now correctly raises a SyntaxError, as a generator\nexpression always needs to be directly inside a set of parentheses\nand cannot have a comma on either side, and the duplication of the\nparentheses can be omitted only on calls.\n(Contributed by Serhiy Storchaka in bpo-32012 and bpo-32023.)\n\nWhen using the -m switch, the initial working directory is now added\nto sys.path, rather than an empty string (which dynamically denoted\nthe current working directory at the time of each import). Any programs that\nare checking for the empty string, or otherwise relying on the previous\nbehaviour, will need to be updated accordingly (e.g. by also checking for\nos.getcwd() or os.path.dirname(__main__.__file__), depending on why\nthe code was checking for the empty string in the first place).\n\n\n\nChanges in the Python API\u00c2\u00b6\n\nsocketserver.ThreadingMixIn.server_close() now waits until all\nnon-daemon threads complete.  Set the new\nsocketserver.ThreadingMixIn.block_on_close class attribute to\nFalse to get the pre-3.7 behaviour.\n(Contributed by Victor Stinner in bpo-31233 and bpo-33540.)\nsocketserver.ForkingMixIn.server_close() now waits until all\nchild processes complete. Set the new\nsocketserver.ForkingMixIn.block_on_close class attribute to False\nto get the pre-3.7 behaviour.\n(Contributed by Victor Stinner in bpo-31151 and bpo-33540.)\nThe locale.localeconv() function now temporarily sets the LC_CTYPE\nlocale to the value of LC_NUMERIC in some cases.\n(Contributed by Victor Stinner in bpo-31900.)\npkgutil.walk_packages() now raises a ValueError if path is\na string.  Previously an empty list was returned.\n(Contributed by Sanyam Khurana in bpo-24744.)\nA format string argument for string.Formatter.format()\nis now positional-only.\nPassing it as a keyword argument was deprecated in Python 3.5. (Contributed\nby Serhiy Storchaka in bpo-29193.)\nAttributes key,\nvalue and\ncoded_value of class\nhttp.cookies.Morsel are now read-only.\nAssigning to them was deprecated in Python 3.5.\nUse the set() method for setting them.\n(Contributed by Serhiy Storchaka in bpo-29192.)\nThe mode argument of os.makedirs() no longer affects the file\npermission bits of newly-created intermediate-level directories.\nTo set their file permission bits you can set the umask before invoking\nmakedirs().\n(Contributed by Serhiy Storchaka in bpo-19930.)\nThe struct.Struct.format type is now str instead of\nbytes. (Contributed by Victor Stinner in bpo-21071.)\nparse_multipart() now accepts the encoding and errors\narguments and returns the same results as\nFieldStorage: for non-file fields, the value associated to a key\nis a list of strings, not bytes.\n(Contributed by Pierre Quentel in bpo-29979.)\nDue to internal changes in socket, calling socket.fromshare()\non a socket created by socket.share in older\nPython versions is not supported.\nrepr for BaseException has changed to not include the trailing\ncomma.  Most exceptions are affected by this change.\n(Contributed by Serhiy Storchaka in bpo-30399.)\nrepr for datetime.timedelta has changed to include the keyword\narguments in the output. (Contributed by Utkarsh Upadhyay in bpo-30302.)\nBecause shutil.rmtree() is now implemented using the os.scandir()\nfunction, the user specified handler onerror is now called with the first\nargument os.scandir instead of os.listdir when listing the directory\nis failed.\nSupport for nested sets and set operations in regular expressions as in\nUnicode Technical Standard #18 might be added in the future.  This would\nchange the syntax.  To facilitate this future change a FutureWarning\nwill be raised in ambiguous cases for the time being.\nThat include sets starting with a literal '[' or containing literal\ncharacter sequences '--', '&&', '~~', and '||'.  To\navoid a warning, escape them with a backslash.\n(Contributed by Serhiy Storchaka in bpo-30349.)\n\nThe result of splitting a string on a regular expression\nthat could match an empty string has been changed.  For example\nsplitting on r'\\s*' will now split not only on whitespaces as it\ndid previously, but also on empty strings before all non-whitespace\ncharacters and just before the end of the string.\nThe previous behavior can be restored by changing the pattern\nto r'\\s+'.  A FutureWarning was emitted for such patterns since\nPython 3.5.\nFor patterns that match both empty and non-empty strings, the result of\nsearching for all matches may also be changed in other cases.  For example\nin the string 'a\\n\\n', the pattern r'(?m)^\\s*?$' will not only\nmatch empty strings at positions 2 and 3, but also the string '\\n' at\npositions 2\u00e2\u0080\u00933.  To match only blank lines, the pattern should be rewritten\nas r'(?m)^[^\\S\\n]*$'.\nre.sub() now replaces empty matches adjacent to a previous\nnon-empty match.  For example re.sub('x*', '-', 'abxd') returns now\n'-a-b--d-' instead of '-a-b-d-' (the first minus between \u00e2\u0080\u0098b\u00e2\u0080\u0099 and\n\u00e2\u0080\u0098d\u00e2\u0080\u0099 replaces \u00e2\u0080\u0098x\u00e2\u0080\u0099, and the second minus replaces an empty string between\n\u00e2\u0080\u0098x\u00e2\u0080\u0099 and \u00e2\u0080\u0098d\u00e2\u0080\u0099).\n(Contributed by Serhiy Storchaka in bpo-25054 and bpo-32308.)\n\nChange re.escape() to only escape regex special characters instead\nof escaping all characters other than ASCII letters, numbers, and '_'.\n(Contributed by Serhiy Storchaka in bpo-29995.)\ntracemalloc.Traceback frames are now sorted from oldest to most\nrecent to be more consistent with traceback.\n(Contributed by Jesse Bakker in bpo-32121.)\nOn OSes that support socket.SOCK_NONBLOCK or\nsocket.SOCK_CLOEXEC bit flags, the\nsocket.type no longer has them applied.\nTherefore, checks like if sock.type == socket.SOCK_STREAM\nwork as expected on all platforms.\n(Contributed by Yury Selivanov in bpo-32331.)\nOn Windows the default for the close_fds argument of\nsubprocess.Popen was changed from False to True\nwhen redirecting the standard handles. If you previously depended on handles\nbeing inherited when using subprocess.Popen with standard io\nredirection, you will have to pass close_fds=False to preserve the\nprevious behaviour, or use\nSTARTUPINFO.lpAttributeList.\nimportlib.machinery.PathFinder.invalidate_caches() \u00e2\u0080\u0093 which implicitly\naffects importlib.invalidate_caches() \u00e2\u0080\u0093 now deletes entries\nin sys.path_importer_cache which are set to None.\n(Contributed by Brett Cannon in bpo-33169.)\nIn asyncio,\nloop.sock_recv(),\nloop.sock_sendall(),\nloop.sock_accept(),\nloop.getaddrinfo(),\nloop.getnameinfo()\nhave been changed to be proper coroutine methods to match their\ndocumentation.  Previously, these methods returned asyncio.Future\ninstances.\n(Contributed by Yury Selivanov in bpo-32327.)\nasyncio.Server.sockets now returns a copy of the internal list\nof server sockets, instead of returning it directly.\n(Contributed by Yury Selivanov in bpo-32662.)\nStruct.format is now a str instance\ninstead of a bytes instance.\n(Contributed by Victor Stinner in bpo-21071.)\nargparse subparsers can now be made mandatory by passing required=True\nto ArgumentParser.add_subparsers().\n(Contributed by Anthony Sottile in bpo-26510.)\nast.literal_eval() is now stricter.  Addition and subtraction of\narbitrary numbers are no longer allowed.\n(Contributed by Serhiy Storchaka in bpo-31778.)\nCalendar.itermonthdates\nwill now consistently raise an exception when a date falls outside of the\n0001-01-01 through 9999-12-31 range.  To support applications that\ncannot tolerate such exceptions, the new\nCalendar.itermonthdays3 and\nCalendar.itermonthdays4 can be used.\nThe new methods return tuples and are not restricted by the range supported by\ndatetime.date.\n(Contributed by Alexander Belopolsky in bpo-28292.)\ncollections.ChainMap now preserves the order of the underlying\nmappings.  (Contributed by Raymond Hettinger in bpo-32792.)\nThe submit() method of concurrent.futures.ThreadPoolExecutor\nand concurrent.futures.ProcessPoolExecutor now raises\na RuntimeError if called during interpreter shutdown.\n(Contributed by Mark Nemec in bpo-33097.)\nThe configparser.ConfigParser constructor now uses read_dict()\nto process the default values, making its behavior consistent with the\nrest of the parser.  Non-string keys and values in the defaults\ndictionary are now being implicitly converted to strings.\n(Contributed by James Tocknell in bpo-23835.)\nSeveral undocumented internal imports were removed.\nOne example is that os.errno is no longer available; use import errno\ndirectly instead.\nNote that such undocumented internal imports may be removed any time without\nnotice, even in micro version releases.\n\n\n\nChanges in the C API\u00c2\u00b6\nThe function PySlice_GetIndicesEx() is considered unsafe for\nresizable sequences.  If the slice indices are not instances of int,\nbut objects that implement the __index__() method, the sequence can be\nresized after passing its length to PySlice_GetIndicesEx().  This\ncan lead to returning indices out of the length of the sequence.  For\navoiding possible problems use new functions PySlice_Unpack() and\nPySlice_AdjustIndices().\n(Contributed by Serhiy Storchaka in bpo-27867.)\n\n\nCPython bytecode changes\u00c2\u00b6\nThere are two new opcodes: LOAD_METHOD and CALL_METHOD.\n(Contributed by Yury Selivanov and INADA Naoki in bpo-26110.)\nThe STORE_ANNOTATION opcode has been removed.\n(Contributed by Mark Shannon in bpo-32550.)\n\n\nWindows-only Changes\u00c2\u00b6\nThe file used to override sys.path is now called\n<python-executable>._pth instead of 'sys.path'.\nSee Finding modules for more information.\n(Contributed by Steve Dower in bpo-28137.)\n\n\nOther CPython implementation changes\u00c2\u00b6\nIn preparation for potential future changes to the public CPython runtime\ninitialization API (see PEP 432 for an initial, but somewhat outdated,\ndraft), CPython\u00e2\u0080\u0099s internal startup\nand configuration management logic has been significantly refactored. While\nthese updates are intended to be entirely transparent to both embedding\napplications and users of the regular CPython CLI, they\u00e2\u0080\u0099re being mentioned\nhere as the refactoring changes the internal order of various operations\nduring interpreter startup, and hence may uncover previously latent defects,\neither in embedding applications, or in CPython itself.\n(Initially contributed by Nick Coghlan and Eric Snow as part of\nbpo-22257, and further updated by Nick, Eric, and Victor Stinner in a\nnumber of other issues). Some known details affected:\n\nPySys_AddWarnOptionUnicode() is not currently usable by embedding\napplications due to the requirement to create a Unicode object prior to\ncalling Py_Initialize. Use PySys_AddWarnOption() instead.\nwarnings filters added by an embedding application with\nPySys_AddWarnOption() should now more consistently take precedence\nover the default filters set by the interpreter\n\nDue to changes in the way the default warnings filters are configured,\nsetting Py_BytesWarningFlag to a value greater than one is no longer\nsufficient to both emit BytesWarning messages and have them converted\nto exceptions.  Instead, the flag must be set (to cause the warnings to be\nemitted in the first place), and an explicit error::BytesWarning\nwarnings filter added to convert them to exceptions.\nDue to a change in the way docstrings are handled by the compiler, the\nimplicit return None in a function body consisting solely of a docstring\nis now marked as occurring on the same line as the docstring, not on the\nfunction\u00e2\u0080\u0099s header line.\nThe current exception state has been moved from the frame object to the co-routine.\nThis simplified the interpreter and fixed a couple of obscure bugs caused by\nhaving swap exception state when entering or exiting a generator.\n(Contributed by Mark Shannon in bpo-25612.)\n\n\n\nNotable changes in Python 3.7.1\u00c2\u00b6\nStarting in 3.7.1, Py_Initialize() now consistently reads and respects\nall of the same environment settings as Py_Main() (in earlier Python\nversions, it respected an ill-defined subset of those environment variables,\nwhile in Python 3.7.0 it didn\u00e2\u0080\u0099t read any of them due to bpo-34247). If\nthis behavior is unwanted, set Py_IgnoreEnvironmentFlag to 1 before\ncalling Py_Initialize().\nIn 3.7.1 the C API for Context Variables\nwas updated to use\nPyObject pointers.  See also bpo-34762.\nIn 3.7.1 the tokenize module now implicitly emits a NEWLINE token\nwhen provided with input that does not have a trailing new line.  This behavior\nnow matches what the C tokenizer does internally.\n(Contributed by Ammar Askar in bpo-33899.)\n\n\nNotable changes in Python 3.7.2\u00c2\u00b6\nIn 3.7.2, venv on Windows no longer copies the original binaries, but\ncreates redirector scripts named python.exe and pythonw.exe instead.\nThis resolves a long standing issue where all virtual environments would have\nto be upgraded or recreated with each Python update. However, note that this\nrelease will still require recreation of virtual environments in order to get\nthe new scripts.\n\n\nNotable changes in Python 3.7.6\u00c2\u00b6\nDue to significant security concerns, the reuse_address parameter of\nasyncio.loop.create_datagram_endpoint() is no longer supported. This is\nbecause of the behavior of the socket option SO_REUSEADDR in UDP. For more\ndetails, see the documentation for loop.create_datagram_endpoint().\n(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in\nbpo-37228.)\n\n\nNotable changes in Python 3.7.10\u00c2\u00b6\nEarlier Python versions allowed using both ; and & as\nquery parameter separators in urllib.parse.parse_qs() and\nurllib.parse.parse_qsl().  Due to security concerns, and to conform with\nnewer W3C recommendations, this has been changed to allow only a single\nseparator key, with & as the default.  This change also affects\ncgi.parse() and cgi.parse_multipart() as they use the affected\nfunctions internally. For more details, please see their respective\ndocumentation.\n(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in bpo-42967.)\n\n\n\n\n\n\n\nTable of Contents\n\nWhat\u00e2\u0080\u0099s New In Python 3.7\nSummary \u00e2\u0080\u0093 Release Highlights\nNew Features\nPEP 563: Postponed Evaluation of Annotations\nPEP 538: Legacy C Locale Coercion\nPEP 540: Forced UTF-8 Runtime Mode\nPEP 553: Built-in breakpoint()\nPEP 539: New C API for Thread-Local Storage\nPEP 562: Customization of Access to Module Attributes\nPEP 564: New Time Functions With Nanosecond Resolution\nPEP 565: Show DeprecationWarning in __main__\nPEP 560: Core Support for typing module and Generic Types\nPEP 552: Hash-based .pyc Files\nPEP 545: Python Documentation Translations\nPython Development Mode (-X dev)\n\n\nOther Language Changes\nNew Modules\ncontextvars\ndataclasses\nimportlib.resources\n\n\nImproved Modules\nargparse\nasyncio\nbinascii\ncalendar\ncollections\ncompileall\nconcurrent.futures\ncontextlib\ncProfile\ncrypt\ndatetime\ndbm\ndecimal\ndis\ndistutils\nenum\nfunctools\ngc\nhmac\nhttp.client\nhttp.server\nidlelib and IDLE\nimportlib\nio\nipaddress\nitertools\nlocale\nlogging\nmath\nmimetypes\nmsilib\nmultiprocessing\nos\npathlib\npdb\npy_compile\npydoc\nqueue\nre\nsignal\nsocket\nsocketserver\nsqlite3\nssl\nstring\nsubprocess\nsys\ntime\ntkinter\ntracemalloc\ntypes\nunicodedata\nunittest\nunittest.mock\nurllib.parse\nuu\nuuid\nwarnings\nxml.etree\nxmlrpc.server\nzipapp\nzipfile\n\n\nC API Changes\nBuild Changes\nOptimizations\nOther CPython Implementation Changes\nDeprecated Python Behavior\nDeprecated Python modules, functions and methods\naifc\nasyncio\ncollections\ndbm\nenum\ngettext\nimportlib\nlocale\nmacpath\nthreading\nsocket\nssl\nsunau\nsys\nwave\n\n\nDeprecated functions and types of the C API\nPlatform Support Removals\nAPI and Feature Removals\nModule Removals\nWindows-only Changes\nPorting to Python 3.7\nChanges in Python Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nWindows-only Changes\nOther CPython implementation changes\n\n\nNotable changes in Python 3.7.1\nNotable changes in Python 3.7.2\nNotable changes in Python 3.7.6\nNotable changes in Python 3.7.10\n\n\n\nPrevious topic\nWhat\u00e2\u0080\u0099s New In Python 3.8\nNext topic\nWhat\u00e2\u0080\u0099s New In Python 3.6\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n    \u00a9 Copyright 2001-2021, Python Software Foundation.\n    \n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on May 11, 2021.\n    Found a bug?\n    \n\n    Created using Sphinx 2.4.4.\n    \n\n"