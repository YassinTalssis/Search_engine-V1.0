"\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n\n\n\n\nWhat\u00e2\u0080\u0099s New In Python 3.8\u00c2\u00b6\n\nEditor\nRaymond Hettinger\n\n\nThis article explains the new features in Python 3.8, compared to 3.7.\nFor full details, see the changelog.\n\nSummary \u00e2\u0080\u0093 Release highlights\u00c2\u00b6\n\n\nNew Features\u00c2\u00b6\n\nAssignment expressions\u00c2\u00b6\nThere is new syntax := that assigns values to variables as part of a larger\nexpression. It is affectionately known as \u00e2\u0080\u009cthe walrus operator\u00e2\u0080\u009d due to\nits resemblance to the eyes and tusks of a walrus.\nIn this example, the assignment expression helps avoid calling\nlen() twice:\nif (n := len(a)) > 10:\n    print(f\"List is too long ({n} elements, expected <= 10)\")\n\n\nA similar benefit arises during regular expression matching where\nmatch objects are needed twice, once to test whether a match\noccurred and another to extract a subgroup:\ndiscount = 0.0\nif (mo := re.search(r'(\\d+)% discount', advertisement)):\n    discount = float(mo.group(1)) / 100.0\n\n\nThe operator is also useful with while-loops that compute\na value to test loop termination and then need that same\nvalue again in the body of the loop:\n# Loop over fixed length blocks\nwhile (block := f.read(256)) != '':\n    process(block)\n\n\nAnother motivating use case arises in list comprehensions where\na value computed in a filtering condition is also needed in\nthe expression body:\n[clean_name.title() for name in names\n if (clean_name := normalize('NFC', name)) in allowed_names]\n\n\nTry to limit use of the walrus operator to clean cases that reduce\ncomplexity and improve readability.\nSee PEP 572 for a full description.\n(Contributed by Emily Morehouse in bpo-35224.)\n\n\nPositional-only parameters\u00c2\u00b6\nThere is a new function parameter syntax / to indicate that some\nfunction parameters must be specified positionally and cannot be used as\nkeyword arguments.  This is the same notation shown by help() for C\nfunctions annotated with Larry Hastings\u00e2\u0080\u0099 Argument Clinic tool.\nIn the following example, parameters a and b are positional-only,\nwhile c or d can be positional or keyword, and e or f are\nrequired to be keywords:\ndef f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n\n\nThe following is a valid call:\nf(10, 20, 30, d=40, e=50, f=60)\n\n\nHowever, these are invalid calls:\nf(10, b=20, c=30, d=40, e=50, f=60)   # b cannot be a keyword argument\nf(10, 20, 30, 40, 50, f=60)           # e must be a keyword argument\n\n\nOne use case for this notation is that it allows pure Python functions\nto fully emulate behaviors of existing C coded functions.  For example,\nthe built-in divmod() function does not accept keyword arguments:\ndef divmod(a, b, /):\n    \"Emulate the built in divmod() function\"\n    return (a // b, a % b)\n\n\nAnother use case is to preclude keyword arguments when the parameter\nname is not helpful.  For example, the builtin len() function has\nthe signature len(obj, /).  This precludes awkward calls such as:\nlen(obj='hello')  # The \"obj\" keyword argument impairs readability\n\n\nA further benefit of marking a parameter as positional-only is that it\nallows the parameter name to be changed in the future without risk of\nbreaking client code.  For example, in the statistics module, the\nparameter name dist may be changed in the future.  This was made\npossible with the following function specification:\ndef quantiles(dist, /, *, n=4, method='exclusive')\n    ...\n\n\nSince the parameters to the left of / are not exposed as possible\nkeywords, the parameters names remain available for use in **kwargs:\n>>> def f(a, b, /, **kwargs):\n...     print(a, b, kwargs)\n...\n>>> f(10, 20, a=1, b=2, c=3)         # a and b are used in two ways\n10 20 {'a': 1, 'b': 2, 'c': 3}\n\n\nThis greatly simplifies the implementation of functions and methods\nthat need to accept arbitrary keyword arguments.  For example, here\nis an excerpt from code in the collections module:\nclass Counter(dict):\n\n    def __init__(self, iterable=None, /, **kwds):\n        # Note \"iterable\" is a possible keyword argument\n\n\nSee PEP 570 for a full description.\n(Contributed by Pablo Galindo in bpo-36540.)\n\n\nParallel filesystem cache for compiled bytecode files\u00c2\u00b6\nThe new PYTHONPYCACHEPREFIX setting (also available as\n-X pycache_prefix) configures the implicit bytecode\ncache to use a separate parallel filesystem tree, rather than\nthe default __pycache__ subdirectories within each source\ndirectory.\nThe location of the cache is reported in sys.pycache_prefix\n(None indicates the default location in __pycache__\nsubdirectories).\n(Contributed by Carl Meyer in bpo-33499.)\n\n\nDebug build uses the same ABI as release build\u00c2\u00b6\nPython now uses the same ABI whether it\u00e2\u0080\u0099s built in release or debug mode. On\nUnix, when Python is built in debug mode, it is now possible to load C\nextensions built in release mode and C extensions built using the stable ABI.\nRelease builds and debug builds are now ABI compatible: defining the\nPy_DEBUG macro no longer implies the Py_TRACE_REFS macro, which\nintroduces the only ABI incompatibility. The Py_TRACE_REFS macro, which\nadds the sys.getobjects() function and the PYTHONDUMPREFS\nenvironment variable, can be set using the new ./configure --with-trace-refs\nbuild option.\n(Contributed by Victor Stinner in bpo-36465.)\nOn Unix, C extensions are no longer linked to libpython except on Android\nand Cygwin.\nIt is now possible\nfor a statically linked Python to load a C extension built using a shared\nlibrary Python.\n(Contributed by Victor Stinner in bpo-21536.)\nOn Unix, when Python is built in debug mode, import now also looks for C\nextensions compiled in release mode and for C extensions compiled with the\nstable ABI.\n(Contributed by Victor Stinner in bpo-36722.)\nTo embed Python into an application, a new --embed option must be passed to\npython3-config --libs --embed to get -lpython3.8 (link the application\nto libpython). To support both 3.8 and older, try python3-config --libs\n--embed first and fallback to python3-config --libs (without --embed)\nif the previous command fails.\nAdd a pkg-config python-3.8-embed module to embed Python into an\napplication: pkg-config python-3.8-embed --libs includes -lpython3.8.\nTo support both 3.8 and older, try pkg-config python-X.Y-embed --libs first\nand fallback to pkg-config python-X.Y --libs (without --embed) if the\nprevious command fails (replace X.Y with the Python version).\nOn the other hand, pkg-config python3.8 --libs no longer contains\n-lpython3.8. C extensions must not be linked to libpython (except on\nAndroid and Cygwin, whose cases are handled by the script);\nthis change is backward incompatible on purpose.\n(Contributed by Victor Stinner in bpo-36721.)\n\n\nf-strings support = for self-documenting expressions and debugging\u00c2\u00b6\nAdded an = specifier to f-strings. An f-string such as\nf'{expr=}' will expand to the text of the expression, an equal sign,\nthen the representation of the evaluated expression.  For example:\n>>> user = 'eric_idle'\n>>> member_since = date(1975, 7, 31)\n>>> f'{user=} {member_since=}'\n\"user='eric_idle' member_since=datetime.date(1975, 7, 31)\"\n\n\nThe usual f-string format specifiers allow more\ncontrol over how the result of the expression is displayed:\n>>> delta = date.today() - member_since\n>>> f'{user=!s}  {delta.days=:,d}'\n'user=eric_idle  delta.days=16,075'\n\n\nThe = specifier will display the whole expression so that\ncalculations can be shown:\n>>> print(f'{theta=}  {cos(radians(theta))=:.3f}')\ntheta=30  cos(radians(theta))=0.866\n\n\n(Contributed by Eric V. Smith and Larry Hastings in bpo-36817.)\n\n\nPEP 578: Python Runtime Audit Hooks\u00c2\u00b6\nThe PEP adds an Audit Hook and Verified Open Hook. Both are available from\nPython and native code, allowing applications and frameworks written in pure\nPython code to take advantage of extra notifications, while also allowing\nembedders or system administrators to deploy builds of Python where auditing is\nalways enabled.\nSee PEP 578 for full details.\n\n\nPEP 587: Python Initialization Configuration\u00c2\u00b6\nThe PEP 587 adds a new C API to configure the Python Initialization\nproviding finer control on the whole configuration and better error reporting.\nNew structures:\n\nPyConfig\nPyPreConfig\nPyStatus\nPyWideStringList\n\nNew functions:\n\nPyConfig_Clear()\nPyConfig_InitIsolatedConfig()\nPyConfig_InitPythonConfig()\nPyConfig_Read()\nPyConfig_SetArgv()\nPyConfig_SetBytesArgv()\nPyConfig_SetBytesString()\nPyConfig_SetString()\nPyPreConfig_InitIsolatedConfig()\nPyPreConfig_InitPythonConfig()\nPyStatus_Error()\nPyStatus_Exception()\nPyStatus_Exit()\nPyStatus_IsError()\nPyStatus_IsExit()\nPyStatus_NoMemory()\nPyStatus_Ok()\nPyWideStringList_Append()\nPyWideStringList_Insert()\nPy_BytesMain()\nPy_ExitStatusException()\nPy_InitializeFromConfig()\nPy_PreInitialize()\nPy_PreInitializeFromArgs()\nPy_PreInitializeFromBytesArgs()\nPy_RunMain()\n\nThis PEP also adds _PyRuntimeState.preconfig (PyPreConfig type)\nand PyInterpreterState.config (PyConfig type) fields to these\ninternal structures. PyInterpreterState.config becomes the new\nreference configuration, replacing global configuration variables and\nother private variables.\nSee Python Initialization Configuration for the\ndocumentation.\nSee PEP 587 for a full description.\n(Contributed by Victor Stinner in bpo-36763.)\n\n\nPEP 590: Vectorcall: a fast calling protocol for CPython\u00c2\u00b6\nThe Vectorcall Protocol is added to the Python/C API.\nIt is meant to formalize existing optimizations which were already done\nfor various classes.\nAny static type implementing a callable can use this protocol.\nThis is currently provisional.\nThe aim is to make it fully public in Python 3.9.\nSee PEP 590 for a full description.\n(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in bpo-36974.)\n\n\nPickle protocol 5 with out-of-band data buffers\u00c2\u00b6\nWhen pickle is used to transfer large data between Python processes\nin order to take advantage of multi-core or multi-machine processing,\nit is important to optimize the transfer by reducing memory copies, and\npossibly by applying custom techniques such as data-dependent compression.\nThe pickle protocol 5 introduces support for out-of-band buffers\nwhere PEP 3118-compatible data can be transmitted separately from the\nmain pickle stream, at the discretion of the communication layer.\nSee PEP 574 for a full description.\n(Contributed by Antoine Pitrou in bpo-36785.)\n\n\n\nOther Language Changes\u00c2\u00b6\n\nA continue statement was illegal in the finally clause\ndue to a problem with the implementation.  In Python 3.8 this restriction\nwas lifted.\n(Contributed by Serhiy Storchaka in bpo-32489.)\nThe bool, int, and fractions.Fraction types\nnow have an as_integer_ratio() method like that found in\nfloat and decimal.Decimal.  This minor API extension\nmakes it possible to write numerator, denominator =\nx.as_integer_ratio() and have it work across multiple numeric types.\n(Contributed by Lisa Roach in bpo-33073 and Raymond Hettinger in\nbpo-37819.)\nConstructors of int, float and complex will now\nuse the __index__() special method, if available and the\ncorresponding method __int__(), __float__()\nor __complex__() is not available.\n(Contributed by Serhiy Storchaka in bpo-20092.)\nAdded support of \\N{name} escapes in regular expressions:\n>>> notice = 'Copyright \u00c2\u00a9 2019'\n>>> copyright_year_pattern = re.compile(r'\\N{copyright sign}\\s*(\\d{4})')\n>>> int(copyright_year_pattern.search(notice).group(1))\n2019\n\n\n(Contributed by Jonathan Eunice and Serhiy Storchaka in bpo-30688.)\n\nDict and dictviews are now iterable in reversed insertion order using\nreversed(). (Contributed by R\u00c3\u00a9mi Lapeyre in bpo-33462.)\nThe syntax allowed for keyword names in function calls was further\nrestricted. In particular, f((keyword)=arg) is no longer allowed. It was\nnever intended to permit more than a bare name on the left-hand side of a\nkeyword argument assignment term.\n(Contributed by Benjamin Peterson in bpo-34641.)\nGeneralized iterable unpacking in yield and\nreturn statements no longer requires enclosing parentheses.\nThis brings the yield and return syntax into better agreement with\nnormal assignment syntax:\n>>> def parse(family):\n        lastname, *members = family.split()\n        return lastname.upper(), *members\n\n>>> parse('simpsons homer marge bart lisa maggie')\n('SIMPSONS', 'homer', 'marge', 'bart', 'lisa', 'maggie')\n\n\n(Contributed by David Cuthbert and Jordan Chapman in bpo-32117.)\n\nWhen a comma is missed in code such as [(10, 20) (30, 40)], the\ncompiler displays a SyntaxWarning with a helpful suggestion.\nThis improves on just having a TypeError indicating that the\nfirst tuple was not callable.  (Contributed by Serhiy Storchaka in\nbpo-15248.)\nArithmetic operations between subclasses of datetime.date or\ndatetime.datetime and datetime.timedelta objects now return\nan instance of the subclass, rather than the base class. This also affects\nthe return type of operations whose implementation (directly or indirectly)\nuses datetime.timedelta arithmetic, such as\nastimezone().\n(Contributed by Paul Ganssle in bpo-32417.)\nWhen the Python interpreter is interrupted by Ctrl-C (SIGINT) and the\nresulting KeyboardInterrupt exception is not caught, the Python process\nnow exits via a SIGINT signal or with the correct exit code such that the\ncalling process can detect that it died due to a Ctrl-C.  Shells on POSIX\nand Windows use this to properly terminate scripts in interactive sessions.\n(Contributed by Google via Gregory P. Smith in bpo-1054041.)\nSome advanced styles of programming require updating the\ntypes.CodeType object for an existing function.  Since code\nobjects are immutable, a new code object needs to be created, one\nthat is modeled on the existing code object.  With 19 parameters,\nthis was somewhat tedious.  Now, the new replace() method makes\nit possible to create a clone with a few altered parameters.\nHere\u00e2\u0080\u0099s an example that alters the statistics.mean() function to\nprevent the data parameter from being used as a keyword argument:\n>>> from statistics import mean\n>>> mean(data=[10, 20, 90])\n40\n>>> mean.__code__ = mean.__code__.replace(co_posonlyargcount=1)\n>>> mean(data=[10, 20, 90])\nTraceback (most recent call last):\n  ...\nTypeError: mean() got some positional-only arguments passed as keyword arguments: 'data'\n\n\n(Contributed by Victor Stinner in bpo-37032.)\n\nFor integers, the three-argument form of the pow() function now\npermits the exponent to be negative in the case where the base is\nrelatively prime to the modulus. It then computes a modular inverse to\nthe base when the exponent is -1, and a suitable power of that\ninverse for other negative exponents.  For example, to compute the\nmodular multiplicative inverse of 38\nmodulo 137, write:\n>>> pow(38, -1, 137)\n119\n>>> 119 * 38 % 137\n1\n\n\nModular inverses arise in the solution of linear Diophantine\nequations.\nFor example, to find integer solutions for 4258\u00f0\u009d\u0091\u00a5 + 147\u00f0\u009d\u0091\u00a6 = 369,\nfirst rewrite as 4258\u00f0\u009d\u0091\u00a5 \u00e2\u0089\u00a1 369 (mod 147) then solve:\n>>> x = 369 * pow(4258, -1, 147) % 147\n>>> y = (4258 * x - 369) // -147\n>>> 4258 * x + 147 * y\n369\n\n\n(Contributed by Mark Dickinson in bpo-36027.)\n\nDict comprehensions have been synced-up with dict literals so that the\nkey is computed first and the value second:\n>>> # Dict comprehension\n>>> cast = {input('role? '): input('actor? ') for i in range(2)}\nrole? King Arthur\nactor? Chapman\nrole? Black Knight\nactor? Cleese\n\n>>> # Dict literal\n>>> cast = {input('role? '): input('actor? ')}\nrole? Sir Robin\nactor? Eric Idle\n\n\nThe guaranteed execution order is helpful with assignment expressions\nbecause variables assigned in the key expression will be available in\nthe value expression:\n>>> names = ['Martin von L\u00c3\u00b6wis', '\u00c5\u0081ukasz Langa', 'Walter D\u00c3\u00b6rwald']\n>>> {(n := normalize('NFC', name)).casefold() : n for name in names}\n{'martin von l\u00c3\u00b6wis': 'Martin von L\u00c3\u00b6wis',\n '\u00c5\u0082ukasz langa': '\u00c5\u0081ukasz Langa',\n 'walter d\u00c3\u00b6rwald': 'Walter D\u00c3\u00b6rwald'}\n\n\n(Contributed by J\u00c3\u00b6rn Heissler in bpo-35224.)\n\nThe object.__reduce__() method can now return a tuple from two to\nsix elements long. Formerly, five was the limit.  The new, optional sixth\nelement is a callable with a (obj, state) signature.  This allows the\ndirect control over the state-updating behavior of a specific object.  If\nnot None, this callable will have priority over the object\u00e2\u0080\u0099s\n__setstate__() method.\n(Contributed by Pierre Glaser and Olivier Grisel in bpo-35900.)\n\n\n\nNew Modules\u00c2\u00b6\n\nThe new importlib.metadata module provides (provisional) support for\nreading metadata from third-party packages.  For example, it can extract an\ninstalled package\u00e2\u0080\u0099s version number, list of entry points, and more:\n>>> # Note following example requires that the popular \"requests\"\n>>> # package has been installed.\n>>>\n>>> from importlib.metadata import version, requires, files\n>>> version('requests')\n'2.22.0'\n>>> list(requires('requests'))\n['chardet (<3.1.0,>=3.0.2)']\n>>> list(files('requests'))[:5]\n[PackagePath('requests-2.22.0.dist-info/INSTALLER'),\n PackagePath('requests-2.22.0.dist-info/LICENSE'),\n PackagePath('requests-2.22.0.dist-info/METADATA'),\n PackagePath('requests-2.22.0.dist-info/RECORD'),\n PackagePath('requests-2.22.0.dist-info/WHEEL')]\n\n\n(Contributed by Barry Warsaw and Jason R. Coombs in bpo-34632.)\n\n\n\n\nImproved Modules\u00c2\u00b6\n\nast\u00c2\u00b6\nAST nodes now have end_lineno and end_col_offset attributes,\nwhich give the precise location of the end of the node.  (This only\napplies to nodes that have lineno and col_offset attributes.)\nNew function ast.get_source_segment() returns the source code\nfor a specific AST node.\n(Contributed by Ivan Levkivskyi in bpo-33416.)\nThe ast.parse() function has some new flags:\n\ntype_comments=True causes it to return the text of PEP 484 and\nPEP 526 type comments associated with certain AST nodes;\nmode='func_type' can be used to parse PEP 484 \u00e2\u0080\u009csignature type\ncomments\u00e2\u0080\u009d (returned for function definition AST nodes);\nfeature_version=(3, N) allows specifying an earlier Python 3\nversion.  For example, feature_version=(3, 4) will treat\nasync and await as non-reserved words.\n\n(Contributed by Guido van Rossum in bpo-35766.)\n\n\nasyncio\u00c2\u00b6\nasyncio.run() has graduated from the provisional to stable API. This\nfunction can be used to execute a coroutine and return the result while\nautomatically managing the event loop. For example:\nimport asyncio\n\nasync def main():\n    await asyncio.sleep(0)\n    return 42\n\nasyncio.run(main())\n\n\nThis is roughly equivalent to:\nimport asyncio\n\nasync def main():\n    await asyncio.sleep(0)\n    return 42\n\nloop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\ntry:\n    loop.run_until_complete(main())\nfinally:\n    asyncio.set_event_loop(None)\n    loop.close()\n\n\nThe actual implementation is significantly more complex. Thus,\nasyncio.run() should be the preferred way of running asyncio programs.\n(Contributed by Yury Selivanov in bpo-32314.)\nRunning python -m asyncio launches a natively async REPL.  This allows rapid\nexperimentation with code that has a top-level await.  There is no\nlonger a need to directly call asyncio.run() which would spawn a new event\nloop on every invocation:\n$ python -m asyncio\nasyncio REPL 3.8.0\nUse \"await\" directly instead of \"asyncio.run()\".\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import asyncio\n>>> await asyncio.sleep(10, result='hello')\nhello\n\n\n(Contributed by Yury Selivanov in bpo-37028.)\nThe exception asyncio.CancelledError now inherits from\nBaseException rather than Exception and no longer inherits\nfrom concurrent.futures.CancelledError.\n(Contributed by Yury Selivanov in bpo-32528.)\nOn Windows, the default event loop is now ProactorEventLoop.\n(Contributed by Victor Stinner in bpo-34687.)\nProactorEventLoop now also supports UDP.\n(Contributed by Adam Meily and Andrew Svetlov in bpo-29883.)\nProactorEventLoop can now be interrupted by\nKeyboardInterrupt (\u00e2\u0080\u009cCTRL+C\u00e2\u0080\u009d).\n(Contributed by Vladimir Matveev in bpo-23057.)\nAdded asyncio.Task.get_coro() for getting the wrapped coroutine\nwithin an asyncio.Task.\n(Contributed by Alex Gr\u00c3\u00b6nholm in bpo-36999.)\nAsyncio tasks can now be named, either by passing the name keyword\nargument to asyncio.create_task() or\nthe create_task() event loop method, or by\ncalling the set_name() method on the task object. The\ntask name is visible in the repr() output of asyncio.Task and\ncan also be retrieved using the get_name() method.\n(Contributed by Alex Gr\u00c3\u00b6nholm in bpo-34270.)\nAdded support for\nHappy Eyeballs to\nasyncio.loop.create_connection(). To specify the behavior, two new\nparameters have been added: happy_eyeballs_delay and interleave. The Happy\nEyeballs algorithm improves responsiveness in applications that support IPv4\nand IPv6 by attempting to simultaneously connect using both.\n(Contributed by twisteroid ambassador in bpo-33530.)\n\n\nbuiltins\u00c2\u00b6\nThe compile() built-in has been improved to accept the\nast.PyCF_ALLOW_TOP_LEVEL_AWAIT flag. With this new flag passed,\ncompile() will allow top-level await, async for and async with\nconstructs that are usually considered invalid syntax. Asynchronous code object\nmarked with the CO_COROUTINE flag may then be returned.\n(Contributed by Matthias Bussonnier in bpo-34616)\n\n\ncollections\u00c2\u00b6\nThe _asdict() method for\ncollections.namedtuple() now returns a dict instead of a\ncollections.OrderedDict. This works because regular dicts have\nguaranteed ordering since Python 3.7. If the extra features of\nOrderedDict are required, the suggested remediation is to cast the\nresult to the desired type: OrderedDict(nt._asdict()).\n(Contributed by Raymond Hettinger in bpo-35864.)\n\n\ncProfile\u00c2\u00b6\nThe cProfile.Profile class can now be used as a context manager.\nProfile a block of code by running:\nimport cProfile\n\nwith cProfile.Profile() as profiler:\n      # code to be profiled\n      ...\n\n\n(Contributed by Scott Sanderson in bpo-29235.)\n\n\ncsv\u00c2\u00b6\nThe csv.DictReader now returns instances of dict instead of\na collections.OrderedDict.  The tool is now faster and uses less\nmemory while still preserving the field order.\n(Contributed by Michael Selik in bpo-34003.)\n\n\ncurses\u00c2\u00b6\nAdded a new variable holding structured version information for the\nunderlying ncurses library: ncurses_version.\n(Contributed by Serhiy Storchaka in bpo-31680.)\n\n\nctypes\u00c2\u00b6\nOn Windows, CDLL and subclasses now accept a winmode parameter\nto specify flags for the underlying LoadLibraryEx call. The default flags are\nset to only load DLL dependencies from trusted locations, including the path\nwhere the DLL is stored (if a full or partial path is used to load the initial\nDLL) and paths added by add_dll_directory().\n(Contributed by Steve Dower in bpo-36085.)\n\n\ndatetime\u00c2\u00b6\nAdded new alternate constructors datetime.date.fromisocalendar() and\ndatetime.datetime.fromisocalendar(), which construct date and\ndatetime objects respectively from ISO year, week number, and weekday;\nthese are the inverse of each class\u00e2\u0080\u0099s isocalendar method.\n(Contributed by Paul Ganssle in bpo-36004.)\n\n\nfunctools\u00c2\u00b6\nfunctools.lru_cache() can now be used as a straight decorator rather\nthan as a function returning a decorator.  So both of these are now supported:\n@lru_cache\ndef f(x):\n    ...\n\n@lru_cache(maxsize=256)\ndef f(x):\n    ...\n\n\n(Contributed by Raymond Hettinger in bpo-36772.)\nAdded a new functools.cached_property() decorator, for computed properties\ncached for the life of the instance.\nimport functools\nimport statistics\n\nclass Dataset:\n   def __init__(self, sequence_of_numbers):\n      self.data = sequence_of_numbers\n\n   @functools.cached_property\n   def variance(self):\n      return statistics.variance(self.data)\n\n\n(Contributed by Carl Meyer in bpo-21145)\nAdded a new functools.singledispatchmethod() decorator that converts\nmethods into generic functions using\nsingle dispatch:\nfrom functools import singledispatchmethod\nfrom contextlib import suppress\n\nclass TaskManager:\n\n    def __init__(self, tasks):\n        self.tasks = list(tasks)\n\n    @singledispatchmethod\n    def discard(self, value):\n        with suppress(ValueError):\n            self.tasks.remove(value)\n\n    @discard.register(list)\n    def _(self, tasks):\n        targets = set(tasks)\n        self.tasks = [x for x in self.tasks if x not in targets]\n\n\n(Contributed by Ethan Smith in bpo-32380)\n\n\ngc\u00c2\u00b6\nget_objects() can now receive an optional generation parameter\nindicating a generation to get objects from.\n(Contributed by Pablo Galindo in bpo-36016.)\n\n\ngettext\u00c2\u00b6\nAdded pgettext() and its variants.\n(Contributed by Franz Glasner, \u00c3\u0089ric Araujo, and Cheryl Sabella in bpo-2504.)\n\n\ngzip\u00c2\u00b6\nAdded the mtime parameter to gzip.compress() for reproducible output.\n(Contributed by Guo Ci Teo in bpo-34898.)\nA BadGzipFile exception is now raised instead of OSError\nfor certain types of invalid or corrupt gzip files.\n(Contributed by Filip Gruszczy\u00c5\u0084ski, Michele Orr\u00c3\u00b9, and Zackery Spytz in\nbpo-6584.)\n\n\nIDLE and idlelib\u00c2\u00b6\nOutput over N lines (50 by default) is squeezed down to a button.\nN can be changed in the PyShell section of the General page of the\nSettings dialog.  Fewer, but possibly extra long, lines can be squeezed by\nright clicking on the output.  Squeezed output can be expanded in place\nby double-clicking the button or into the clipboard or a separate window\nby right-clicking the button.  (Contributed by Tal Einat in bpo-1529353.)\nAdd \u00e2\u0080\u009cRun Customized\u00e2\u0080\u009d to the Run menu to run a module with customized\nsettings. Any command line arguments entered are added to sys.argv.\nThey also re-appear in the box for the next customized run.  One can also\nsuppress the normal Shell main module restart.  (Contributed by Cheryl\nSabella, Terry Jan Reedy, and others in bpo-5680 and bpo-37627.)\nAdded optional line numbers for IDLE editor windows. Windows\nopen without line numbers unless set otherwise in the General\ntab of the configuration dialog.  Line numbers for an existing\nwindow are shown and hidden in the Options menu.\n(Contributed by Tal Einat and Saimadhav Heblikar in bpo-17535.)\nOS native encoding is now used for converting between Python strings and Tcl\nobjects. This allows IDLE to work with emoji and other non-BMP characters.\nThese characters can be displayed or copied and pasted to or from the\nclipboard.  Converting strings from Tcl to Python and back now never fails.\n(Many people worked on this for eight years but the problem was finally\nsolved by Serhiy Storchaka in bpo-13153.)\nNew in 3.8.1:\nAdd option to toggle cursor blink off.  (Contributed by Zackery Spytz\nin bpo-4603.)\nEscape key now closes IDLE completion windows.  (Contributed by Johnny\nNajera in bpo-38944.)\nThe changes above have been backported to 3.7 maintenance releases.\nAdd keywords to module name completion list.  (Contributed by Terry J.\nReedy in bpo-37765.)\n\n\ninspect\u00c2\u00b6\nThe inspect.getdoc() function can now find docstrings for __slots__\nif that attribute is a dict where the values are docstrings.\nThis provides documentation options similar to what we already have\nfor property(), classmethod(), and staticmethod():\nclass AudioClip:\n    __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal place',\n                 'duration': 'in seconds, rounded up to an integer'}\n    def __init__(self, bit_rate, duration):\n        self.bit_rate = round(bit_rate / 1000.0, 1)\n        self.duration = ceil(duration)\n\n\n(Contributed by Raymond Hettinger in bpo-36326.)\n\n\nio\u00c2\u00b6\nIn development mode (-X env) and in debug build, the\nio.IOBase finalizer now logs the exception if the close() method\nfails. The exception is ignored silently by default in release build.\n(Contributed by Victor Stinner in bpo-18748.)\n\n\nitertools\u00c2\u00b6\nThe itertools.accumulate() function added an option initial keyword\nargument to specify an initial value:\n>>> from itertools import accumulate\n>>> list(accumulate([10, 5, 30, 15], initial=1000))\n[1000, 1010, 1015, 1045, 1060]\n\n\n(Contributed by Lisa Roach in bpo-34659.)\n\n\njson.tool\u00c2\u00b6\nAdd option --json-lines to parse every input line as a separate JSON object.\n(Contributed by Weipeng Hong in bpo-31553.)\n\n\nlogging\u00c2\u00b6\nAdded a force keyword argument to logging.basicConfig()\nWhen set to true, any existing handlers attached\nto the root logger are removed and closed before carrying out the\nconfiguration specified by the other arguments.\nThis solves a long-standing problem.  Once a logger or basicConfig() had\nbeen called, subsequent calls to basicConfig() were silently ignored.\nThis made it difficult to update, experiment with, or teach the various\nlogging configuration options using the interactive prompt or a Jupyter\nnotebook.\n(Suggested by Raymond Hettinger, implemented by Dong-hee Na, and\nreviewed by Vinay Sajip in bpo-33897.)\n\n\nmath\u00c2\u00b6\nAdded new function math.dist() for computing Euclidean distance\nbetween two points.  (Contributed by Raymond Hettinger in bpo-33089.)\nExpanded the math.hypot() function to handle multiple dimensions.\nFormerly, it only supported the 2-D case.\n(Contributed by Raymond Hettinger in bpo-33089.)\nAdded new function, math.prod(), as analogous function to sum()\nthat returns the product of a \u00e2\u0080\u0098start\u00e2\u0080\u0099 value (default: 1) times an iterable of\nnumbers:\n>>> prior = 0.8\n>>> likelihoods = [0.625, 0.84, 0.30]\n>>> math.prod(likelihoods, start=prior)\n0.126\n\n\n(Contributed by Pablo Galindo in bpo-35606.)\nAdded two new combinatoric functions math.perm() and math.comb():\n>>> math.perm(10, 3)    # Permutations of 10 things taken 3 at a time\n720\n>>> math.comb(10, 3)    # Combinations of 10 things taken 3 at a time\n120\n\n\n(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and Raymond\nHettinger in bpo-37128, bpo-37178, and bpo-35431.)\nAdded a new function math.isqrt() for computing accurate integer square\nroots without conversion to floating point.  The new function supports\narbitrarily large integers.  It is faster than floor(sqrt(n)) but slower\nthan math.sqrt():\n>>> r = 650320427\n>>> s = r ** 2\n>>> isqrt(s - 1)         # correct\n650320426\n>>> floor(sqrt(s - 1))   # incorrect\n650320427\n\n\n(Contributed by Mark Dickinson in bpo-36887.)\nThe function math.factorial() no longer accepts arguments that are not\nint-like. (Contributed by Pablo Galindo in bpo-33083.)\n\n\nmmap\u00c2\u00b6\nThe mmap.mmap class now has an madvise() method to\naccess the madvise() system call.\n(Contributed by Zackery Spytz in bpo-32941.)\n\n\nmultiprocessing\u00c2\u00b6\nAdded new multiprocessing.shared_memory module.\n(Contributed by Davin Potts in bpo-35813.)\nOn macOS, the spawn start method is now used by default.\n(Contributed by Victor Stinner in bpo-33725.)\n\n\nos\u00c2\u00b6\nAdded new function add_dll_directory() on Windows for providing\nadditional search paths for native dependencies when importing extension\nmodules or loading DLLs using ctypes.\n(Contributed by Steve Dower in bpo-36085.)\nA new os.memfd_create() function was added to wrap the\nmemfd_create() syscall.\n(Contributed by Zackery Spytz and Christian Heimes in bpo-26836.)\nOn Windows, much of the manual logic for handling reparse points (including\nsymlinks and directory junctions) has been delegated to the operating system.\nSpecifically, os.stat() will now traverse anything supported by the\noperating system, while os.lstat() will only open reparse points that\nidentify as \u00e2\u0080\u009cname surrogates\u00e2\u0080\u009d while others are opened as for os.stat().\nIn all cases, stat_result.st_mode will only have S_IFLNK set for\nsymbolic links and not other kinds of reparse points. To identify other kinds\nof reparse point, check the new stat_result.st_reparse_tag attribute.\nOn Windows, os.readlink() is now able to read directory junctions. Note\nthat islink() will return False for directory junctions,\nand so code that checks islink first will continue to treat junctions as\ndirectories, while code that handles errors from os.readlink() may now\ntreat junctions as links.\n(Contributed by Steve Dower in bpo-37834.)\n\n\nos.path\u00c2\u00b6\nos.path functions that return a boolean result like\nexists(), lexists(), isdir(),\nisfile(), islink(), and ismount()\nnow return False instead of raising ValueError or its subclasses\nUnicodeEncodeError and UnicodeDecodeError for paths that contain\ncharacters or bytes unrepresentable at the OS level.\n(Contributed by Serhiy Storchaka in bpo-33721.)\nexpanduser() on Windows now prefers the USERPROFILE\nenvironment variable and does not use HOME, which is not normally set\nfor regular user accounts.\n(Contributed by Anthony Sottile in bpo-36264.)\nisdir() on Windows no longer returns True for a link to a\nnon-existent directory.\nrealpath() on Windows now resolves reparse points, including\nsymlinks and directory junctions.\n(Contributed by Steve Dower in bpo-37834.)\n\n\npathlib\u00c2\u00b6\npathlib.Path methods that return a boolean result like\nexists(), is_dir(),\nis_file(), is_mount(),\nis_symlink(), is_block_device(),\nis_char_device(), is_fifo(),\nis_socket() now return False instead of raising\nValueError or its subclass UnicodeEncodeError for paths that\ncontain characters unrepresentable at the OS level.\n(Contributed by Serhiy Storchaka in bpo-33721.)\nAdded pathlib.Path.link_to() which creates a hard link pointing\nto a path.\n(Contributed by Joannah Nanjekye in bpo-26978)\n\n\npickle\u00c2\u00b6\npickle extensions subclassing the C-optimized Pickler\ncan now override the pickling logic of functions and classes by defining the\nspecial reducer_override() method.\n(Contributed by Pierre Glaser and Olivier Grisel in bpo-35900.)\n\n\nplistlib\u00c2\u00b6\nAdded new plistlib.UID and enabled support for reading and writing\nNSKeyedArchiver-encoded binary plists.\n(Contributed by Jon Janzen in bpo-26707.)\n\n\npprint\u00c2\u00b6\nThe pprint module added a sort_dicts parameter to several functions.\nBy default, those functions continue to sort dictionaries before rendering or\nprinting.  However, if sort_dicts is set to false, the dictionaries retain\nthe order that keys were inserted.  This can be useful for comparison to JSON\ninputs during debugging.\nIn addition, there is a convenience new function, pprint.pp() that is\nlike pprint.pprint() but with sort_dicts defaulting to False:\n>>> from pprint import pprint, pp\n>>> d = dict(source='input.txt', operation='filter', destination='output.txt')\n>>> pp(d, width=40)                  # Original order\n{'source': 'input.txt',\n 'operation': 'filter',\n 'destination': 'output.txt'}\n>>> pprint(d, width=40)              # Keys sorted alphabetically\n{'destination': 'output.txt',\n 'operation': 'filter',\n 'source': 'input.txt'}\n\n\n(Contributed by R\u00c3\u00a9mi Lapeyre in bpo-30670.)\n\n\npy_compile\u00c2\u00b6\npy_compile.compile() now supports silent mode.\n(Contributed by Joannah Nanjekye in bpo-22640.)\n\n\nshlex\u00c2\u00b6\nThe new shlex.join() function acts as the inverse of shlex.split().\n(Contributed by Bo Bayles in bpo-32102.)\n\n\nshutil\u00c2\u00b6\nshutil.copytree() now accepts a new dirs_exist_ok keyword argument.\n(Contributed by Josh Bronson in bpo-20849.)\nshutil.make_archive() now defaults to the modern pax (POSIX.1-2001)\nformat for new archives to improve portability and standards conformance,\ninherited from the corresponding change to the tarfile module.\n(Contributed by C.A.M. Gerlach in bpo-30661.)\nshutil.rmtree() on Windows now removes directory junctions without\nrecursively removing their contents first.\n(Contributed by Steve Dower in bpo-37834.)\n\n\nsocket\u00c2\u00b6\nAdded create_server() and has_dualstack_ipv6()\nconvenience functions to automate the necessary tasks usually involved when\ncreating a server socket, including accepting both IPv4 and IPv6 connections\non the same socket.  (Contributed by Giampaolo Rodol\u00c3\u00a0 in bpo-17561.)\nThe socket.if_nameindex(), socket.if_nametoindex(), and\nsocket.if_indextoname() functions have been implemented on Windows.\n(Contributed by Zackery Spytz in bpo-37007.)\n\n\nssl\u00c2\u00b6\nAdded post_handshake_auth to enable and\nverify_client_post_handshake() to initiate TLS 1.3\npost-handshake authentication.\n(Contributed by Christian Heimes in bpo-34670.)\n\n\nstatistics\u00c2\u00b6\nAdded statistics.fmean() as a faster, floating point variant of\nstatistics.mean().  (Contributed by Raymond Hettinger and\nSteven D\u00e2\u0080\u0099Aprano in bpo-35904.)\nAdded statistics.geometric_mean()\n(Contributed by Raymond Hettinger in bpo-27181.)\nAdded statistics.multimode() that returns a list of the most\ncommon values. (Contributed by Raymond Hettinger in bpo-35892.)\nAdded statistics.quantiles() that divides data or a distribution\nin to equiprobable intervals (e.g. quartiles, deciles, or percentiles).\n(Contributed by Raymond Hettinger in bpo-36546.)\nAdded statistics.NormalDist, a tool for creating\nand manipulating normal distributions of a random variable.\n(Contributed by Raymond Hettinger in bpo-36018.)\n>>> temperature_feb = NormalDist.from_samples([4, 12, -3, 2, 7, 14])\n>>> temperature_feb.mean\n6.0\n>>> temperature_feb.stdev\n6.356099432828281\n\n>>> temperature_feb.cdf(3)            # Chance of being under 3 degrees\n0.3184678262814532\n>>> # Relative chance of being 7 degrees versus 10 degrees\n>>> temperature_feb.pdf(7) / temperature_feb.pdf(10)\n1.2039930378537762\n\n>>> el_ni\u00c3\u00b1o = NormalDist(4, 2.5)\n>>> temperature_feb += el_ni\u00c3\u00b1o        # Add in a climate effect\n>>> temperature_feb\nNormalDist(mu=10.0, sigma=6.830080526611674)\n\n>>> temperature_feb * (9/5) + 32      # Convert to Fahrenheit\nNormalDist(mu=50.0, sigma=12.294144947901014)\n>>> temperature_feb.samples(3)        # Generate random samples\n[7.672102882379219, 12.000027119750287, 4.647488369766392]\n\n\n\n\nsys\u00c2\u00b6\nAdd new sys.unraisablehook() function which can be overridden to control\nhow \u00e2\u0080\u009cunraisable exceptions\u00e2\u0080\u009d are handled. It is called when an exception has\noccurred but there is no way for Python to handle it. For example, when a\ndestructor raises an exception or during garbage collection\n(gc.collect()).\n(Contributed by Victor Stinner in bpo-36829.)\n\n\ntarfile\u00c2\u00b6\nThe tarfile module now defaults to the modern pax (POSIX.1-2001)\nformat for new archives, instead of the previous GNU-specific one.\nThis improves cross-platform portability with a consistent encoding (UTF-8)\nin a standardized and extensible format, and offers several other benefits.\n(Contributed by C.A.M. Gerlach in bpo-36268.)\n\n\nthreading\u00c2\u00b6\nAdd a new threading.excepthook() function which handles uncaught\nthreading.Thread.run() exception. It can be overridden to control how\nuncaught threading.Thread.run() exceptions are handled.\n(Contributed by Victor Stinner in bpo-1230540.)\nAdd a new threading.get_native_id() function and\na native_id\nattribute to the threading.Thread class. These return the native\nintegral Thread ID of the current thread assigned by the kernel.\nThis feature is only available on certain platforms, see\nget_native_id for more information.\n(Contributed by Jake Tesler in bpo-36084.)\n\n\ntokenize\u00c2\u00b6\nThe tokenize module now implicitly emits a NEWLINE token when\nprovided with input that does not have a trailing new line.  This behavior\nnow matches what the C tokenizer does internally.\n(Contributed by Ammar Askar in bpo-33899.)\n\n\ntkinter\u00c2\u00b6\nAdded methods selection_from(),\nselection_present(),\nselection_range() and\nselection_to()\nin the tkinter.Spinbox class.\n(Contributed by Juliette Monsel in bpo-34829.)\nAdded method moveto()\nin the tkinter.Canvas class.\n(Contributed by Juliette Monsel in bpo-23831.)\nThe tkinter.PhotoImage class now has\ntransparency_get() and\ntransparency_set() methods.  (Contributed by\nZackery Spytz in bpo-25451.)\n\n\ntime\u00c2\u00b6\nAdded new clock CLOCK_UPTIME_RAW for macOS 10.12.\n(Contributed by Joannah Nanjekye in bpo-35702.)\n\n\ntyping\u00c2\u00b6\nThe typing module incorporates several new features:\n\nA dictionary type with per-key types.  See PEP 589 and\ntyping.TypedDict.\nTypedDict uses only string keys.  By default, every key is required\nto be present. Specify \u00e2\u0080\u009ctotal=False\u00e2\u0080\u009d to allow keys to be optional:\nclass Location(TypedDict, total=False):\n    lat_long: tuple\n    grid_square: str\n    xy_coordinate: tuple\n\n\n\nLiteral types.  See PEP 586 and typing.Literal.\nLiteral types indicate that a parameter or return value\nis constrained to one or more specific literal values:\ndef get_status(port: int) -> Literal['connected', 'disconnected']:\n    ...\n\n\n\n\u00e2\u0080\u009cFinal\u00e2\u0080\u009d variables, functions, methods and classes.  See PEP 591,\ntyping.Final and typing.final().\nThe final qualifier instructs a static type checker to restrict\nsubclassing, overriding, or reassignment:\npi: Final[float] = 3.1415926536\n\n\n\nProtocol definitions.  See PEP 544, typing.Protocol and\ntyping.runtime_checkable().  Simple ABCs like\ntyping.SupportsInt are now Protocol subclasses.\nNew protocol class typing.SupportsIndex.\nNew functions typing.get_origin() and typing.get_args().\n\n\n\nunicodedata\u00c2\u00b6\nThe unicodedata module has been upgraded to use the Unicode 12.1.0 release.\nNew function is_normalized() can be used to verify a string\nis in a specific normal form, often much faster than by actually normalizing\nthe string.  (Contributed by Max Belanger, David Euresti, and Greg Price in\nbpo-32285 and bpo-37966).\n\n\nunittest\u00c2\u00b6\nAdded AsyncMock to support an asynchronous version of\nMock.  Appropriate new assert functions for testing\nhave been added as well.\n(Contributed by Lisa Roach in bpo-26467).\nAdded addModuleCleanup() and\naddClassCleanup() to unittest to support\ncleanups for setUpModule() and\nsetUpClass().\n(Contributed by Lisa Roach in bpo-24412.)\nSeveral mock assert functions now also print a list of actual calls upon\nfailure. (Contributed by Petter Strandmark in bpo-35047.)\nunittest module gained support for coroutines to be used as test cases\nwith unittest.IsolatedAsyncioTestCase.\n(Contributed by Andrew Svetlov in bpo-32972.)\nExample:\nimport unittest\n\n\nclass TestRequest(unittest.IsolatedAsyncioTestCase):\n\n    async def asyncSetUp(self):\n        self.connection = await AsyncConnection()\n\n    async def test_get(self):\n        response = await self.connection.get(\"https://example.com\")\n        self.assertEqual(response.status_code, 200)\n\n    async def asyncTearDown(self):\n        await self.connection.close()\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n\n\n\nvenv\u00c2\u00b6\nvenv now includes an Activate.ps1 script on all platforms for\nactivating virtual environments under PowerShell Core 6.1.\n(Contributed by Brett Cannon in bpo-32718.)\n\n\nweakref\u00c2\u00b6\nThe proxy objects returned by weakref.proxy() now support the matrix\nmultiplication operators @ and @= in addition to the other\nnumeric operators. (Contributed by Mark Dickinson in bpo-36669.)\n\n\nxml\u00c2\u00b6\nAs mitigation against DTD and external entity retrieval, the\nxml.dom.minidom and xml.sax modules no longer process\nexternal entities by default.\n(Contributed by Christian Heimes in bpo-17239.)\nThe .find*() methods in the xml.etree.ElementTree module\nsupport wildcard searches like {*}tag which ignores the namespace\nand {namespace}* which returns all tags in the given namespace.\n(Contributed by Stefan Behnel in bpo-28238.)\nThe xml.etree.ElementTree module provides a new function\n\u00e2\u0080\u0093xml.etree.ElementTree.canonicalize() that implements C14N 2.0.\n(Contributed by Stefan Behnel in bpo-13611.)\nThe target object of xml.etree.ElementTree.XMLParser can\nreceive namespace declaration events through the new callback methods\nstart_ns() and end_ns().  Additionally, the\nxml.etree.ElementTree.TreeBuilder target can be configured\nto process events about comments and processing instructions to include\nthem in the generated tree.\n(Contributed by Stefan Behnel in bpo-36676 and bpo-36673.)\n\n\nxmlrpc\u00c2\u00b6\nxmlrpc.client.ServerProxy now supports an optional headers keyword\nargument for a sequence of HTTP headers to be sent with each request.  Among\nother things, this makes it possible to upgrade from default basic\nauthentication to faster session authentication.\n(Contributed by C\u00c3\u00a9dric Krier in bpo-35153.)\n\n\n\nOptimizations\u00c2\u00b6\n\nThe subprocess module can now use the os.posix_spawn() function\nin some cases for better performance. Currently, it is only used on macOS\nand Linux (using glibc 2.24 or newer) if all these conditions are met:\n\nclose_fds is false;\npreexec_fn, pass_fds, cwd and start_new_session parameters\nare not set;\nthe executable path contains a directory.\n\n(Contributed by Joannah Nanjekye and Victor Stinner in bpo-35537.)\n\nshutil.copyfile(), shutil.copy(), shutil.copy2(),\nshutil.copytree() and shutil.move() use platform-specific\n\u00e2\u0080\u009cfast-copy\u00e2\u0080\u009d syscalls on Linux and macOS in order to copy the file\nmore efficiently.\n\u00e2\u0080\u009cfast-copy\u00e2\u0080\u009d means that the copying operation occurs within the kernel,\navoiding the use of userspace buffers in Python as in\n\u00e2\u0080\u009coutfd.write(infd.read())\u00e2\u0080\u009d.\nOn Windows shutil.copyfile() uses a bigger default buffer size (1 MiB\ninstead of 16 KiB) and a memoryview()-based variant of\nshutil.copyfileobj() is used.\nThe speedup for copying a 512 MiB file within the same partition is about\n+26% on Linux, +50% on macOS and +40% on Windows. Also, much less CPU cycles\nare consumed.\nSee Platform-dependent efficient copy operations section.\n(Contributed by Giampaolo Rodol\u00c3\u00a0 in bpo-33671.)\nshutil.copytree() uses os.scandir() function and all copy\nfunctions depending from it use cached os.stat() values. The speedup\nfor copying a directory with 8000 files is around +9% on Linux, +20% on\nWindows and +30% on a Windows SMB share. Also the number of os.stat()\nsyscalls is reduced by 38% making shutil.copytree() especially faster\non network filesystems. (Contributed by Giampaolo Rodol\u00c3\u00a0 in bpo-33695.)\nThe default protocol in the pickle module is now Protocol 4,\nfirst introduced in Python 3.4.  It offers better performance and smaller\nsize compared to Protocol 3 available since Python 3.0.\nRemoved one Py_ssize_t member from PyGC_Head.  All GC tracked\nobjects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes.\n(Contributed by Inada Naoki in bpo-33597.)\nuuid.UUID now uses __slots__ to reduce its memory footprint.\n(Contributed by Wouter Bolsterlee and Tal Einat in bpo-30977)\nImproved performance of operator.itemgetter() by 33%.  Optimized\nargument handling and added a fast path for the common case of a single\nnon-negative integer index into a tuple (which is the typical use case in\nthe standard library).  (Contributed by Raymond Hettinger in\nbpo-35664.)\nSped-up field lookups in collections.namedtuple().  They are now more\nthan two times faster, making them the fastest form of instance variable\nlookup in Python. (Contributed by Raymond Hettinger, Pablo Galindo, and\nJoe Jevnik, Serhiy Storchaka in bpo-32492.)\nThe list constructor does not overallocate the internal item buffer\nif the input iterable has a known length (the input implements __len__).\nThis makes the created list 12% smaller on average. (Contributed by\nRaymond Hettinger and Pablo Galindo in bpo-33234.)\nDoubled the speed of class variable writes.  When a non-dunder attribute\nwas updated, there was an unnecessary call to update slots.\n(Contributed by Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger,\nNeil Schemenauer, and Serhiy Storchaka in bpo-36012.)\nReduced an overhead of converting arguments passed to many builtin functions\nand methods.  This sped up calling some simple builtin functions and\nmethods up to 20\u00e2\u0080\u009350%.  (Contributed by Serhiy Storchaka in bpo-23867,\nbpo-35582 and bpo-36127.)\nLOAD_GLOBAL instruction now uses new \u00e2\u0080\u009cper opcode cache\u00e2\u0080\u009d mechanism.\nIt is about 40% faster now.  (Contributed by Yury Selivanov and Inada Naoki in\nbpo-26219.)\n\n\n\nBuild and C API Changes\u00c2\u00b6\n\nDefault sys.abiflags became an empty string: the m flag for\npymalloc became useless (builds with and without pymalloc are ABI compatible)\nand so has been removed. (Contributed by Victor Stinner in bpo-36707.)\nExample of changes:\n\nOnly python3.8 program is installed, python3.8m program is gone.\nOnly python3.8-config script is installed, python3.8m-config script\nis gone.\nThe m flag has been removed from the suffix of dynamic library\nfilenames: extension modules in the standard library as well as those\nproduced and installed by third-party packages, like those downloaded from\nPyPI. On Linux, for example, the Python 3.7 suffix\n.cpython-37m-x86_64-linux-gnu.so became\n.cpython-38-x86_64-linux-gnu.so in Python 3.8.\n\n\nThe header files have been reorganized to better separate the different kinds\nof APIs:\n\nInclude/*.h should be the portable public stable C API.\nInclude/cpython/*.h should be the unstable C API specific to CPython;\npublic API, with some private API prefixed by _Py or _PY.\nInclude/internal/*.h is the private internal C API very specific to\nCPython. This API comes with no backward compatibility warranty and should\nnot be used outside CPython. It is only exposed for very specific needs\nlike debuggers and profiles which has to access to CPython internals\nwithout calling functions. This API is now installed by make install.\n\n(Contributed by Victor Stinner in bpo-35134 and bpo-35081,\nwork initiated by Eric Snow in Python 3.7.)\n\nSome macros have been converted to static inline functions: parameter types\nand return type are well defined, they don\u00e2\u0080\u0099t have issues specific to macros,\nvariables have a local scopes. Examples:\n\nPy_INCREF(), Py_DECREF()\nPy_XINCREF(), Py_XDECREF()\nPyObject_INIT(), PyObject_INIT_VAR()\nPrivate functions: _PyObject_GC_TRACK(),\n_PyObject_GC_UNTRACK(), _Py_Dealloc()\n\n(Contributed by Victor Stinner in bpo-35059.)\n\nThe PyByteArray_Init() and PyByteArray_Fini() functions have\nbeen removed. They did nothing since Python 2.7.4 and Python 3.2.0, were\nexcluded from the limited API (stable ABI), and were not documented.\n(Contributed by Victor Stinner in bpo-35713.)\nThe result of PyExceptionClass_Name() is now of type\nconst char * rather of char *.\n(Contributed by Serhiy Storchaka in bpo-33818.)\nThe duality of Modules/Setup.dist and Modules/Setup has been\nremoved.  Previously, when updating the CPython source tree, one had\nto manually copy Modules/Setup.dist (inside the source tree) to\nModules/Setup (inside the build tree) in order to reflect any changes\nupstream.  This was of a small benefit to packagers at the expense of\na frequent annoyance to developers following CPython development, as\nforgetting to copy the file could produce build failures.\nNow the build system always reads from Modules/Setup inside the source\ntree.  People who want to customize that file are encouraged to maintain\ntheir changes in a git fork of CPython or as patch files, as they would do\nfor any other change to the source tree.\n(Contributed by Antoine Pitrou in bpo-32430.)\n\nFunctions that convert Python number to C integer like\nPyLong_AsLong() and argument parsing functions like\nPyArg_ParseTuple() with integer converting format units like 'i'\nwill now use the __index__() special method instead of\n__int__(), if available.  The deprecation warning will be\nemitted for objects with the __int__() method but without the\n__index__() method (like Decimal and\nFraction).  PyNumber_Check() will now return\n1 for objects implementing __index__().\nPyNumber_Long(), PyNumber_Float() and\nPyFloat_AsDouble() also now use the __index__() method if\navailable.\n(Contributed by Serhiy Storchaka in bpo-36048 and bpo-20092.)\nHeap-allocated type objects will now increase their reference count\nin PyObject_Init() (and its parallel macro PyObject_INIT)\ninstead of in PyType_GenericAlloc(). Types that modify instance\nallocation or deallocation may need to be adjusted.\n(Contributed by Eddie Elizondo in bpo-35810.)\nThe new function PyCode_NewWithPosOnlyArgs() allows to create\ncode objects like PyCode_New(), but with an extra posonlyargcount\nparameter for indicating the number of positional-only arguments.\n(Contributed by Pablo Galindo in bpo-37221.)\nPy_SetPath() now sets sys.executable to the program full\npath (Py_GetProgramFullPath()) rather than to the program name\n(Py_GetProgramName()).\n(Contributed by Victor Stinner in bpo-38234.)\n\n\n\nDeprecated\u00c2\u00b6\n\nThe distutils bdist_wininst command is now deprecated, use\nbdist_wheel (wheel packages) instead.\n(Contributed by Victor Stinner in bpo-37481.)\nDeprecated methods getchildren() and getiterator() in\nthe ElementTree module now emit a\nDeprecationWarning instead of PendingDeprecationWarning.\nThey will be removed in Python 3.9.\n(Contributed by Serhiy Storchaka in bpo-29209.)\nPassing an object that is not an instance of\nconcurrent.futures.ThreadPoolExecutor to\nloop.set_default_executor() is\ndeprecated and will be prohibited in Python 3.9.\n(Contributed by Elvis Pranskevichus in bpo-34075.)\nThe __getitem__() methods of xml.dom.pulldom.DOMEventStream,\nwsgiref.util.FileWrapper and fileinput.FileInput have been\ndeprecated.\nImplementations of these methods have been ignoring their index parameter,\nand returning the next item instead.\n(Contributed by Berker Peksag in bpo-9372.)\n\nThe typing.NamedTuple class has deprecated the _field_types\nattribute in favor of the __annotations__ attribute which has the same\ninformation. (Contributed by Raymond Hettinger in bpo-36320.)\nast classes Num, Str, Bytes, NameConstant and\nEllipsis are considered deprecated and will be removed in future Python\nversions. Constant should be used instead.\n(Contributed by Serhiy Storchaka in bpo-32892.)\nast.NodeVisitor methods visit_Num(), visit_Str(),\nvisit_Bytes(), visit_NameConstant() and visit_Ellipsis() are\ndeprecated now and will not be called in future Python versions.\nAdd the visit_Constant() method to handle all\nconstant nodes.\n(Contributed by Serhiy Storchaka in bpo-36917.)\nThe asyncio.coroutine() decorator is deprecated and will be\nremoved in version 3.10.  Instead of @asyncio.coroutine, use\nasync def instead.\n(Contributed by Andrew Svetlov in bpo-36921.)\nIn asyncio, the explicit passing of a loop argument has been\ndeprecated and will be removed in version 3.10 for the following:\nasyncio.sleep(), asyncio.gather(), asyncio.shield(),\nasyncio.wait_for(), asyncio.wait(), asyncio.as_completed(),\nasyncio.Task, asyncio.Lock, asyncio.Event,\nasyncio.Condition, asyncio.Semaphore,\nasyncio.BoundedSemaphore, asyncio.Queue,\nasyncio.create_subprocess_exec(), and\nasyncio.create_subprocess_shell().\nThe explicit passing of coroutine objects to asyncio.wait() has been\ndeprecated and will be removed in version 3.11.\n(Contributed by Yury Selivanov in bpo-34790.)\nThe following functions and methods are deprecated in the gettext\nmodule: lgettext(), ldgettext(),\nlngettext() and ldngettext().\nThey return encoded bytes, and it\u00e2\u0080\u0099s possible that you will get unexpected\nUnicode-related exceptions if there are encoding problems with the\ntranslated strings. It\u00e2\u0080\u0099s much better to use alternatives which return\nUnicode strings in Python 3. These functions have been broken for a long time.\nFunction bind_textdomain_codeset(), methods\noutput_charset() and\nset_output_charset(), and the codeset\nparameter of functions translation() and\ninstall() are also deprecated, since they are only used for\nthe l*gettext() functions.\n(Contributed by Serhiy Storchaka in bpo-33710.)\n\nThe isAlive() method of threading.Thread\nhas been deprecated.\n(Contributed by Dong-hee Na in bpo-35283.)\nMany builtin and extension functions that take integer arguments will\nnow emit a deprecation warning for Decimals,\nFractions and any other objects that can be converted\nto integers only with a loss (e.g. that have the __int__()\nmethod but do not have the __index__() method).  In future\nversion they will be errors.\n(Contributed by Serhiy Storchaka in bpo-36048.)\nDeprecated passing the following arguments as keyword arguments:\n\nfunc in functools.partialmethod(), weakref.finalize(),\nprofile.Profile.runcall(), cProfile.Profile.runcall(),\nbdb.Bdb.runcall(), trace.Trace.runfunc() and\ncurses.wrapper().\nfunction in unittest.TestCase.addCleanup().\nfn in the submit() method of\nconcurrent.futures.ThreadPoolExecutor and\nconcurrent.futures.ProcessPoolExecutor.\ncallback in contextlib.ExitStack.callback(),\ncontextlib.AsyncExitStack.callback() and\ncontextlib.AsyncExitStack.push_async_callback().\nc and typeid in the create()\nmethod of multiprocessing.managers.Server and\nmultiprocessing.managers.SharedMemoryServer.\nobj in weakref.finalize().\n\nIn future releases of Python, they will be positional-only.\n(Contributed by Serhiy Storchaka in bpo-36492.)\n\n\n\n\nAPI and Feature Removals\u00c2\u00b6\nThe following features and APIs have been removed from Python 3.8:\n\nStarting with Python 3.3, importing ABCs from collections was\ndeprecated, and importing should be done from collections.abc. Being\nable to import from collections was marked for removal in 3.8, but has been\ndelayed to 3.9. (See bpo-36952.)\nThe macpath module, deprecated in Python 3.7, has been removed.\n(Contributed by Victor Stinner in bpo-35471.)\nThe function platform.popen() has been removed, after having been\ndeprecated since Python 3.3: use os.popen() instead.\n(Contributed by Victor Stinner in bpo-35345.)\nThe function time.clock() has been removed, after having been\ndeprecated since Python 3.3: use time.perf_counter() or\ntime.process_time() instead, depending\non your requirements, to have well-defined behavior.\n(Contributed by Matthias Bussonnier in bpo-36895.)\nThe pyvenv script has been removed in favor of python3.8 -m venv\nto help eliminate confusion as to what Python interpreter the pyvenv\nscript is tied to. (Contributed by Brett Cannon in bpo-25427.)\nparse_qs, parse_qsl, and escape are removed from the cgi\nmodule.  They are deprecated in Python 3.2 or older. They should be imported\nfrom the urllib.parse and html modules instead.\nfilemode function is removed from the tarfile module.\nIt is not documented and deprecated since Python 3.3.\nThe XMLParser constructor no longer accepts\nthe html argument.  It never had an effect and was deprecated in Python 3.4.\nAll other parameters are now keyword-only.\n(Contributed by Serhiy Storchaka in bpo-29209.)\nRemoved the doctype() method of XMLParser.\n(Contributed by Serhiy Storchaka in bpo-29209.)\n\u00e2\u0080\u009cunicode_internal\u00e2\u0080\u009d codec is removed.\n(Contributed by Inada Naoki in bpo-36297.)\nThe Cache and Statement objects of the sqlite3 module are not\nexposed to the user.\n(Contributed by Aviv Palivoda in bpo-30262.)\nThe bufsize keyword argument of fileinput.input() and\nfileinput.FileInput() which was ignored and deprecated since Python 3.6\nhas been removed. bpo-36952 (Contributed by Matthias Bussonnier.)\nThe functions sys.set_coroutine_wrapper() and\nsys.get_coroutine_wrapper() deprecated in Python 3.7 have been removed;\nbpo-36933 (Contributed by Matthias Bussonnier.)\n\n\n\nPorting to Python 3.8\u00c2\u00b6\nThis section lists previously described changes and other bugfixes\nthat may require changes to your code.\n\nChanges in Python behavior\u00c2\u00b6\n\nYield expressions (both yield and yield from clauses) are now disallowed\nin comprehensions and generator expressions (aside from the iterable expression\nin the leftmost for clause).\n(Contributed by Serhiy Storchaka in bpo-10544.)\nThe compiler now produces a SyntaxWarning when identity checks\n(is and is not) are used with certain types of literals\n(e.g. strings, numbers).  These can often work by accident in CPython,\nbut are not guaranteed by the language spec.  The warning advises users\nto use equality tests (== and !=) instead.\n(Contributed by Serhiy Storchaka in bpo-34850.)\nThe CPython interpreter can swallow exceptions in some circumstances.\nIn Python 3.8 this happens in fewer cases.  In particular, exceptions\nraised when getting the attribute from the type dictionary are no longer\nignored. (Contributed by Serhiy Storchaka in bpo-35459.)\nRemoved __str__ implementations from builtin types bool,\nint, float, complex and few classes from\nthe standard library.  They now inherit __str__() from object.\nAs result, defining the __repr__() method in the subclass of these\nclasses will affect their string representation.\n(Contributed by Serhiy Storchaka in bpo-36793.)\nOn AIX, sys.platform doesn\u00e2\u0080\u0099t contain the major version anymore.\nIt is always 'aix', instead of 'aix3' .. 'aix7'.  Since\nolder Python versions include the version number, so it is recommended to\nalways use sys.platform.startswith('aix').\n(Contributed by M. Felt in bpo-36588.)\nPyEval_AcquireLock() and PyEval_AcquireThread() now\nterminate the current thread if called while the interpreter is\nfinalizing, making them consistent with PyEval_RestoreThread(),\nPy_END_ALLOW_THREADS(), and PyGILState_Ensure(). If this\nbehavior is not desired, guard the call by checking _Py_IsFinalizing()\nor sys.is_finalizing().\n(Contributed by Joannah Nanjekye in bpo-36475.)\n\n\n\nChanges in the Python API\u00c2\u00b6\n\nThe os.getcwdb() function now uses the UTF-8 encoding on Windows,\nrather than the ANSI code page: see PEP 529 for the rationale. The\nfunction is no longer deprecated on Windows.\n(Contributed by Victor Stinner in bpo-37412.)\nsubprocess.Popen can now use os.posix_spawn() in some cases\nfor better performance. On Windows Subsystem for Linux and QEMU User\nEmulation, the Popen constructor using os.posix_spawn() no longer raises an\nexception on errors like \u00e2\u0080\u009cmissing program\u00e2\u0080\u009d.  Instead the child process fails with a\nnon-zero returncode.\n(Contributed by Joannah Nanjekye and Victor Stinner in bpo-35537.)\nThe preexec_fn argument of * subprocess.Popen is no longer\ncompatible with subinterpreters. The use of the parameter in a\nsubinterpreter now raises RuntimeError.\n(Contributed by Eric Snow in bpo-34651, modified by Christian Heimes\nin bpo-37951.)\nThe imap.IMAP4.logout() method no longer silently ignores arbitrary\nexceptions.\n(Contributed by Victor Stinner in bpo-36348.)\nThe function platform.popen() has been removed, after having been deprecated since\nPython 3.3: use os.popen() instead.\n(Contributed by Victor Stinner in bpo-35345.)\nThe statistics.mode() function no longer raises an exception\nwhen given multimodal data.  Instead, it returns the first mode\nencountered in the input data.  (Contributed by Raymond Hettinger\nin bpo-35892.)\nThe selection() method of the\ntkinter.ttk.Treeview class no longer takes arguments.  Using it with\narguments for changing the selection was deprecated in Python 3.6.  Use\nspecialized methods like selection_set() for\nchanging the selection.  (Contributed by Serhiy Storchaka in bpo-31508.)\nThe writexml(), toxml() and toprettyxml() methods of\nxml.dom.minidom, and the write() method of xml.etree,\nnow preserve the attribute order specified by the user.\n(Contributed by Diego Rojas and Raymond Hettinger in bpo-34160.)\nA dbm.dumb database opened with flags 'r' is now read-only.\ndbm.dumb.open() with flags 'r' and 'w' no longer creates\na database if it does not exist.\n(Contributed by Serhiy Storchaka in bpo-32749.)\nThe doctype() method defined in a subclass of\nXMLParser will no longer be called and will\nemit a RuntimeWarning instead of a DeprecationWarning.\nDefine the doctype()\nmethod on a target for handling an XML doctype declaration.\n(Contributed by Serhiy Storchaka in bpo-29209.)\nA RuntimeError is now raised when the custom metaclass doesn\u00e2\u0080\u0099t\nprovide the __classcell__ entry in the namespace passed to\ntype.__new__.  A DeprecationWarning was emitted in Python\n3.6\u00e2\u0080\u00933.7.  (Contributed by Serhiy Storchaka in bpo-23722.)\nThe cProfile.Profile class can now be used as a context\nmanager. (Contributed by Scott Sanderson in bpo-29235.)\nshutil.copyfile(), shutil.copy(), shutil.copy2(),\nshutil.copytree() and shutil.move() use platform-specific\n\u00e2\u0080\u009cfast-copy\u00e2\u0080\u009d syscalls (see\nPlatform-dependent efficient copy operations section).\nshutil.copyfile() default buffer size on Windows was changed from\n16 KiB to 1 MiB.\nThe PyGC_Head struct has changed completely.  All code that touched the\nstruct member should be rewritten.  (See bpo-33597.)\nThe PyInterpreterState struct has been moved into the \u00e2\u0080\u009cinternal\u00e2\u0080\u009d\nheader files (specifically Include/internal/pycore_pystate.h).  An\nopaque PyInterpreterState is still available as part of the public\nAPI (and stable ABI).  The docs indicate that none of the struct\u00e2\u0080\u0099s\nfields are public, so we hope no one has been using them.  However,\nif you do rely on one or more of those private fields and have no\nalternative then please open a BPO issue.  We\u00e2\u0080\u0099ll work on helping\nyou adjust (possibly including adding accessor functions to the\npublic API).  (See bpo-35886.)\nThe mmap.flush() method now returns None on\nsuccess and raises an exception on error under all platforms.  Previously,\nits behavior was platform-dependent: a nonzero value was returned on success;\nzero was returned on error under Windows.  A zero value was returned on\nsuccess; an exception was raised on error under Unix.\n(Contributed by Berker Peksag in bpo-2122.)\nxml.dom.minidom and xml.sax modules no longer process\nexternal entities by default.\n(Contributed by Christian Heimes in bpo-17239.)\nDeleting a key from a read-only dbm database (dbm.dumb,\ndbm.gnu or dbm.ndbm) raises error (dbm.dumb.error,\ndbm.gnu.error or dbm.ndbm.error) instead of KeyError.\n(Contributed by Xiang Zhang in bpo-33106.)\nSimplified AST for literals.  All constants will be represented as\nast.Constant instances.  Instantiating old classes Num,\nStr, Bytes, NameConstant and Ellipsis will return\nan instance of Constant.\n(Contributed by Serhiy Storchaka in bpo-32892.)\nexpanduser() on Windows now prefers the USERPROFILE\nenvironment variable and does not use HOME, which is not normally\nset for regular user accounts.\n(Contributed by Anthony Sottile in bpo-36264.)\nThe exception asyncio.CancelledError now inherits from\nBaseException rather than Exception and no longer inherits\nfrom concurrent.futures.CancelledError.\n(Contributed by Yury Selivanov in bpo-32528.)\nThe function asyncio.wait_for() now correctly waits for cancellation\nwhen using an instance of asyncio.Task. Previously, upon reaching\ntimeout, it was cancelled and immediately returned.\n(Contributed by Elvis Pranskevichus in bpo-32751.)\nThe function asyncio.BaseTransport.get_extra_info() now returns a safe\nto use socket object when \u00e2\u0080\u0098socket\u00e2\u0080\u0099 is passed to the name parameter.\n(Contributed by Yury Selivanov in bpo-37027.)\nasyncio.BufferedProtocol has graduated to the stable API.\n\n\nDLL dependencies for extension modules and DLLs loaded with ctypes on\nWindows are now resolved more securely. Only the system paths, the directory\ncontaining the DLL or PYD file, and directories added with\nadd_dll_directory() are searched for load-time dependencies.\nSpecifically, PATH and the current working directory are no longer\nused, and modifications to these will no longer have any effect on normal DLL\nresolution. If your application relies on these mechanisms, you should check\nfor add_dll_directory() and if it exists, use it to add your DLLs\ndirectory while loading your library. Note that Windows 7 users will need to\nensure that Windows Update KB2533623 has been installed (this is also verified\nby the installer).\n(Contributed by Steve Dower in bpo-36085.)\nThe header files and functions related to pgen have been removed after its\nreplacement by a pure Python implementation. (Contributed by Pablo Galindo\nin bpo-36623.)\ntypes.CodeType has a new parameter in the second position of the\nconstructor (posonlyargcount) to support positional-only arguments defined\nin PEP 570. The first argument (argcount) now represents the total\nnumber of positional arguments (including positional-only arguments). The new\nreplace() method of types.CodeType can be used to make the code\nfuture-proof.\n\n\n\nChanges in the C API\u00c2\u00b6\n\nThe PyCompilerFlags structure got a new cf_feature_version\nfield. It should be initialized to PY_MINOR_VERSION. The field is ignored\nby default, and is used if and only if PyCF_ONLY_AST flag is set in\ncf_flags.\n(Contributed by Guido van Rossum in bpo-35766.)\nThe PyEval_ReInitThreads() function has been removed from the C API.\nIt should not be called explicitly: use PyOS_AfterFork_Child()\ninstead.\n(Contributed by Victor Stinner in bpo-36728.)\nOn Unix, C extensions are no longer linked to libpython except on Android\nand Cygwin. When Python is embedded, libpython must not be loaded with\nRTLD_LOCAL, but RTLD_GLOBAL instead. Previously, using\nRTLD_LOCAL, it was already not possible to load C extensions which\nwere not linked to libpython, like C extensions of the standard\nlibrary built by the *shared* section of Modules/Setup.\n(Contributed by Victor Stinner in bpo-21536.)\nUse of # variants of formats in parsing or building value (e.g.\nPyArg_ParseTuple(), Py_BuildValue(), PyObject_CallFunction(),\netc.) without PY_SSIZE_T_CLEAN defined raises DeprecationWarning now.\nIt will be removed in 3.10 or 4.0.  Read Parsing arguments and building values for detail.\n(Contributed by Inada Naoki in bpo-36381.)\nInstances of heap-allocated types (such as those created with\nPyType_FromSpec()) hold a reference to their type object.\nIncreasing the reference count of these type objects has been moved from\nPyType_GenericAlloc() to the more low-level functions,\nPyObject_Init() and PyObject_INIT().\nThis makes types created through PyType_FromSpec() behave like\nother classes in managed code.\nStatically allocated types are not affected.\nFor the vast majority of cases, there should be no side effect.\nHowever, types that manually increase the reference count after allocating\nan instance (perhaps to work around the bug) may now become immortal.\nTo avoid this, these classes need to call Py_DECREF on the type object\nduring instance deallocation.\nTo correctly port these types into 3.8, please apply the following\nchanges:\n\nRemove Py_INCREF on the type object after allocating an\ninstance - if any.\nThis may happen after calling PyObject_New(),\nPyObject_NewVar(), PyObject_GC_New(),\nPyObject_GC_NewVar(), or any other custom allocator that uses\nPyObject_Init() or PyObject_INIT().\nExample:\nstatic foo_struct *\nfoo_new(PyObject *type) {\n    foo_struct *foo = PyObject_GC_New(foo_struct, (PyTypeObject *) type);\n    if (foo == NULL)\n        return NULL;\n#if PY_VERSION_HEX < 0x03080000\n    // Workaround for Python issue 35810; no longer necessary in Python 3.8\n    PY_INCREF(type)\n#endif\n    return foo;\n}\n\n\n\nEnsure that all custom tp_dealloc functions of heap-allocated types\ndecrease the type\u00e2\u0080\u0099s reference count.\nExample:\nstatic void\nfoo_dealloc(foo_struct *instance) {\n    PyObject *type = Py_TYPE(instance);\n    PyObject_GC_Del(instance);\n#if PY_VERSION_HEX >= 0x03080000\n    // This was not needed before Python 3.8 (Python issue 35810)\n    Py_DECREF(type);\n#endif\n}\n\n\n\n\n(Contributed by Eddie Elizondo in bpo-35810.)\n\nThe Py_DEPRECATED() macro has been implemented for MSVC.\nThe macro now must be placed before the symbol name.\nExample:\nPy_DEPRECATED(3.8) PyAPI_FUNC(int) Py_OldFunction(void);\n\n\n(Contributed by Zackery Spytz in bpo-33407.)\n\nThe interpreter does not pretend to support binary compatibility of\nextension types across feature releases, anymore.  A PyTypeObject\nexported by a third-party extension module is supposed to have all the\nslots expected in the current Python version, including\ntp_finalize (Py_TPFLAGS_HAVE_FINALIZE\nis not checked anymore before reading tp_finalize).\n(Contributed by Antoine Pitrou in bpo-32388.)\n\nThe functions PyNode_AddChild() and PyParser_AddToken() now accept\ntwo additional int arguments end_lineno and end_col_offset.\nThe libpython38.a file to allow MinGW tools to link directly against\npython38.dll is no longer included in the regular Windows distribution.\nIf you require this file, it may be generated with the gendef and\ndlltool tools, which are part of the MinGW binutils package:\ngendef - python38.dll > tmp.def\ndlltool --dllname python38.dll --def tmp.def --output-lib libpython38.a\n\n\nThe location of an installed pythonXY.dll will depend on the\ninstallation options and the version and language of Windows. See\nUsing Python on Windows for more information. The resulting library should be\nplaced in the same directory as pythonXY.lib, which is generally the\nlibs directory under your Python installation.\n(Contributed by Steve Dower in bpo-37351.)\n\n\n\n\nCPython bytecode changes\u00c2\u00b6\n\nThe interpreter loop  has been simplified by moving the logic of unrolling\nthe stack of blocks into the compiler.  The compiler emits now explicit\ninstructions for adjusting the stack of values and calling the\ncleaning-up code for break, continue and\nreturn.\nRemoved opcodes BREAK_LOOP, CONTINUE_LOOP,\nSETUP_LOOP and SETUP_EXCEPT.  Added new opcodes\nROT_FOUR, BEGIN_FINALLY, CALL_FINALLY and\nPOP_FINALLY.  Changed the behavior of END_FINALLY\nand WITH_CLEANUP_START.\n(Contributed by Mark Shannon, Antoine Pitrou and Serhiy Storchaka in\nbpo-17611.)\n\nAdded new opcode END_ASYNC_FOR for handling exceptions raised\nwhen awaiting a next item in an async for loop.\n(Contributed by Serhiy Storchaka in bpo-33041.)\nThe MAP_ADD now expects the value as the first element in the\nstack and the key as the second element. This change was made so the key\nis always evaluated before the value in dictionary comprehensions, as\nproposed by PEP 572. (Contributed by J\u00c3\u00b6rn Heissler in bpo-35224.)\n\n\n\nDemos and Tools\u00c2\u00b6\nAdded a benchmark script for timing various ways to access variables:\nTools/scripts/var_access_benchmark.py.\n(Contributed by Raymond Hettinger in bpo-35884.)\nHere\u00e2\u0080\u0099s a summary of performance improvements since Python 3.3:\nPython version                       3.3     3.4     3.5     3.6     3.7     3.8\n--------------                       ---     ---     ---     ---     ---     ---\n\nVariable and attribute read access:\n    read_local                       4.0     7.1     7.1     5.4     5.1     3.9\n    read_nonlocal                    5.3     7.1     8.1     5.8     5.4     4.4\n    read_global                     13.3    15.5    19.0    14.3    13.6     7.6\n    read_builtin                    20.0    21.1    21.6    18.5    19.0     7.5\n    read_classvar_from_class        20.5    25.6    26.5    20.7    19.5    18.4\n    read_classvar_from_instance     18.5    22.8    23.5    18.8    17.1    16.4\n    read_instancevar                26.8    32.4    33.1    28.0    26.3    25.4\n    read_instancevar_slots          23.7    27.8    31.3    20.8    20.8    20.2\n    read_namedtuple                 68.5    73.8    57.5    45.0    46.8    18.4\n    read_boundmethod                29.8    37.6    37.9    29.6    26.9    27.7\n\nVariable and attribute write access:\n    write_local                      4.6     8.7     9.3     5.5     5.3     4.3\n    write_nonlocal                   7.3    10.5    11.1     5.6     5.5     4.7\n    write_global                    15.9    19.7    21.2    18.0    18.0    15.8\n    write_classvar                  81.9    92.9    96.0   104.6   102.1    39.2\n    write_instancevar               36.4    44.6    45.8    40.0    38.9    35.5\n    write_instancevar_slots         28.7    35.6    36.1    27.3    26.6    25.7\n\nData structure read access:\n    read_list                       19.2    24.2    24.5    20.8    20.8    19.0\n    read_deque                      19.9    24.7    25.5    20.2    20.6    19.8\n    read_dict                       19.7    24.3    25.7    22.3    23.0    21.0\n    read_strdict                    17.9    22.6    24.3    19.5    21.2    18.9\n\nData structure write access:\n    write_list                      21.2    27.1    28.5    22.5    21.6    20.0\n    write_deque                     23.8    28.7    30.1    22.7    21.8    23.5\n    write_dict                      25.9    31.4    33.3    29.3    29.2    24.7\n    write_strdict                   22.9    28.4    29.9    27.5    25.2    23.1\n\nStack (or queue) operations:\n    list_append_pop                144.2    93.4   112.7    75.4    74.2    50.8\n    deque_append_pop                30.4    43.5    57.0    49.4    49.2    42.5\n    deque_append_popleft            30.8    43.7    57.3    49.7    49.7    42.8\n\nTiming loop:\n    loop_overhead                    0.3     0.5     0.6     0.4     0.3     0.3\n\n\nThe benchmarks were measured on an\nIntel\u00c2\u00ae Core\u00e2\u0084\u00a2 i7-4960HQ processor\nrunning the macOS 64-bit builds found at\npython.org.\nThe benchmark script displays timings in nanoseconds.\n\n\n\nNotable changes in Python 3.8.1\u00c2\u00b6\nDue to significant security concerns, the reuse_address parameter of\nasyncio.loop.create_datagram_endpoint() is no longer supported. This is\nbecause of the behavior of the socket option SO_REUSEADDR in UDP. For more\ndetails, see the documentation for loop.create_datagram_endpoint().\n(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in\nbpo-37228.)\n\n\nNotable changes in Python 3.8.8\u00c2\u00b6\nEarlier Python versions allowed using both ; and & as\nquery parameter separators in urllib.parse.parse_qs() and\nurllib.parse.parse_qsl().  Due to security concerns, and to conform with\nnewer W3C recommendations, this has been changed to allow only a single\nseparator key, with & as the default.  This change also affects\ncgi.parse() and cgi.parse_multipart() as they use the affected\nfunctions internally. For more details, please see their respective\ndocumentation.\n(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in bpo-42967.)\n\n\n\n\n\n\n\nTable of Contents\n\nWhat\u00e2\u0080\u0099s New In Python 3.8\nSummary \u00e2\u0080\u0093 Release highlights\nNew Features\nAssignment expressions\nPositional-only parameters\nParallel filesystem cache for compiled bytecode files\nDebug build uses the same ABI as release build\nf-strings support = for self-documenting expressions and debugging\nPEP 578: Python Runtime Audit Hooks\nPEP 587: Python Initialization Configuration\nPEP 590: Vectorcall: a fast calling protocol for CPython\nPickle protocol 5 with out-of-band data buffers\n\n\nOther Language Changes\nNew Modules\nImproved Modules\nast\nasyncio\nbuiltins\ncollections\ncProfile\ncsv\ncurses\nctypes\ndatetime\nfunctools\ngc\ngettext\ngzip\nIDLE and idlelib\ninspect\nio\nitertools\njson.tool\nlogging\nmath\nmmap\nmultiprocessing\nos\nos.path\npathlib\npickle\nplistlib\npprint\npy_compile\nshlex\nshutil\nsocket\nssl\nstatistics\nsys\ntarfile\nthreading\ntokenize\ntkinter\ntime\ntyping\nunicodedata\nunittest\nvenv\nweakref\nxml\nxmlrpc\n\n\nOptimizations\nBuild and C API Changes\nDeprecated\nAPI and Feature Removals\nPorting to Python 3.8\nChanges in Python behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nDemos and Tools\n\n\nNotable changes in Python 3.8.1\nNotable changes in Python 3.8.8\n\n\n\nPrevious topic\nWhat\u00e2\u0080\u0099s New In Python 3.9\nNext topic\nWhat\u00e2\u0080\u0099s New In Python 3.7\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n    \u00a9 Copyright 2001-2021, Python Software Foundation.\n    \n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on May 11, 2021.\n    Found a bug?\n    \n\n    Created using Sphinx 2.4.4.\n    \n\n"