"\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n\n\n\n\nWhat\u00e2\u0080\u0099s New In Python 3.6\u00c2\u00b6\n\nEditors\nElvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>\n\n\nThis article explains the new features in Python 3.6, compared to 3.5.\nPython 3.6 was released on December 23, 2016. \u00c2\u00a0See the\nchangelog for a full\nlist of changes.\n\nSee also\nPEP 494 - Python 3.6 Release Schedule\n\n\nSummary \u00e2\u0080\u0093 Release highlights\u00c2\u00b6\nNew syntax features:\n\nPEP 498, formatted string literals.\nPEP 515, underscores in numeric literals.\nPEP 526, syntax for variable annotations.\nPEP 525, asynchronous generators.\nPEP 530: asynchronous comprehensions.\n\nNew library modules:\n\nsecrets: PEP 506 \u00e2\u0080\u0093 Adding A Secrets Module To The Standard Library.\n\nCPython implementation improvements:\n\nThe dict type has been reimplemented to use\na more compact representation\nbased on a proposal by Raymond Hettinger\nand similar to the PyPy dict implementation.  This resulted in dictionaries\nusing 20% to 25% less memory when compared to Python 3.5.\nCustomization of class creation has been simplified with the\nnew protocol.\nThe class attribute definition order is\nnow preserved.\nThe order of elements in **kwargs now\ncorresponds to the order in which keyword\narguments were passed to the function.\nDTrace and SystemTap probing support has\nbeen added.\nThe new PYTHONMALLOC environment variable\ncan now be used to debug the interpreter memory allocation and access\nerrors.\n\nSignificant improvements in the standard library:\n\nThe asyncio module has received new features, significant\nusability and performance improvements, and a fair amount of bug fixes.\nStarting with Python 3.6 the asyncio module is no longer provisional\nand its API is considered stable.\nA new file system path protocol has been\nimplemented to support path-like objects.\nAll standard library functions operating on paths have been updated to\nwork with the new protocol.\nThe datetime module has gained support for\nLocal Time Disambiguation.\nThe typing module received a number of\nimprovements.\nThe tracemalloc module has been significantly reworked\nand is now used to provide better output for ResourceWarning\nas well as provide better diagnostics for memory allocation errors.\nSee the PYTHONMALLOC section for more\ninformation.\n\nSecurity improvements:\n\nThe new secrets module has been added to simplify the generation of\ncryptographically strong pseudo-random numbers suitable for\nmanaging secrets such as account authentication, tokens, and similar.\nOn Linux, os.urandom() now blocks until the system urandom entropy\npool is initialized to increase the security. See the PEP 524 for the\nrationale.\nThe hashlib and ssl modules now support OpenSSL 1.1.0.\nThe default settings and feature set of the ssl module have been\nimproved.\nThe hashlib module received support for the BLAKE2, SHA-3 and SHAKE\nhash algorithms and the scrypt() key derivation function.\n\nWindows improvements:\n\nPEP 528 and PEP 529,\nWindows filesystem and console encoding changed to UTF-8.\nThe py.exe launcher, when used interactively, no longer prefers\nPython 2 over Python 3 when the user doesn\u00e2\u0080\u0099t specify a version (via\ncommand line arguments or a config file).  Handling of shebang lines\nremains unchanged - \u00e2\u0080\u009cpython\u00e2\u0080\u009d refers to Python 2 in that case.\npython.exe and pythonw.exe have been marked as long-path aware,\nwhich means that the 260 character path limit may no longer apply.\nSee removing the MAX_PATH limitation for details.\nA ._pth file can be added to force isolated mode and fully specify\nall search paths to avoid registry and environment lookup. See\nthe documentation for more information.\nA python36.zip file now works as a landmark to infer\nPYTHONHOME. See the documentation for\nmore information.\n\n\n\nNew Features\u00c2\u00b6\n\nPEP 498: Formatted string literals\u00c2\u00b6\nPEP 498 introduces a new kind of string literals: f-strings, or\nformatted string literals.\nFormatted string literals are prefixed with 'f' and are similar to\nthe format strings accepted by str.format().  They contain replacement\nfields surrounded by curly braces.  The replacement fields are expressions,\nwhich are evaluated at run time, and then formatted using the\nformat() protocol:\n>>> name = \"Fred\"\n>>> f\"He said his name is {name}.\"\n'He said his name is Fred.'\n>>> width = 10\n>>> precision = 4\n>>> value = decimal.Decimal(\"12.34567\")\n>>> f\"result: {value:{width}.{precision}}\"  # nested fields\n'result:      12.35'\n\n\n\nSee also\n\nPEP 498 \u00e2\u0080\u0093 Literal String Interpolation.PEP written and implemented by Eric V. Smith.\n\n\nFeature documentation.\n\n\n\nPEP 526: Syntax for variable annotations\u00c2\u00b6\nPEP 484 introduced the standard for type annotations of function\nparameters, a.k.a. type hints. This PEP adds syntax to Python for annotating\nthe types of variables including class variables and instance variables:\nprimes: List[int] = []\n\ncaptain: str  # Note: no initial value!\n\nclass Starship:\n    stats: Dict[str, int] = {}\n\n\nJust as for function annotations, the Python interpreter does not attach any\nparticular meaning to variable annotations and only stores them in the\n__annotations__ attribute of a class or module.\nIn contrast to variable declarations in statically typed languages,\nthe goal of annotation syntax is to provide an easy way to specify structured\ntype metadata for third party tools and libraries via the abstract syntax tree\nand the __annotations__ attribute.\n\nSee also\n\nPEP 526 \u00e2\u0080\u0093 Syntax for variable annotations.PEP written by Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach,\nand Guido van Rossum. Implemented by Ivan Levkivskyi.\n\n\nTools that use or will use the new syntax:\nmypy,\npytype, PyCharm, etc.\n\n\n\nPEP 515: Underscores in Numeric Literals\u00c2\u00b6\nPEP 515 adds the ability to use underscores in numeric literals for\nimproved readability.  For example:\n>>> 1_000_000_000_000_000\n1000000000000000\n>>> 0x_FF_FF_FF_FF\n4294967295\n\n\nSingle underscores are allowed between digits and after any base\nspecifier.  Leading, trailing, or multiple underscores in a row are not\nallowed.\nThe string formatting language also now has support\nfor the '_' option to signal the use of an underscore for a thousands\nseparator for floating point presentation types and for integer\npresentation type 'd'.  For integer presentation types 'b',\n'o', 'x', and 'X', underscores will be inserted every 4\ndigits:\n>>> '{:_}'.format(1000000)\n'1_000_000'\n>>> '{:_x}'.format(0xFFFFFFFF)\n'ffff_ffff'\n\n\n\nSee also\n\nPEP 515 \u00e2\u0080\u0093 Underscores in Numeric LiteralsPEP written by Georg Brandl and Serhiy Storchaka.\n\n\n\n\n\nPEP 525: Asynchronous Generators\u00c2\u00b6\nPEP 492 introduced support for native coroutines and async / await\nsyntax to Python 3.5.  A notable limitation of the Python 3.5 implementation\nis that it was not possible to use await and yield in the same\nfunction body.  In Python 3.6 this restriction has been lifted, making it\npossible to define asynchronous generators:\nasync def ticker(delay, to):\n    \"\"\"Yield numbers from 0 to *to* every *delay* seconds.\"\"\"\n    for i in range(to):\n        yield i\n        await asyncio.sleep(delay)\n\n\nThe new syntax allows for faster and more concise code.\n\nSee also\n\nPEP 525 \u00e2\u0080\u0093 Asynchronous GeneratorsPEP written and implemented by Yury Selivanov.\n\n\n\n\n\nPEP 530: Asynchronous Comprehensions\u00c2\u00b6\nPEP 530 adds support for using async for in list, set, dict\ncomprehensions and generator expressions:\nresult = [i async for i in aiter() if i % 2]\n\n\nAdditionally, await expressions are supported in all kinds\nof comprehensions:\nresult = [await fun() for fun in funcs if await condition()]\n\n\n\nSee also\n\nPEP 530 \u00e2\u0080\u0093 Asynchronous ComprehensionsPEP written and implemented by Yury Selivanov.\n\n\n\n\n\nPEP 487: Simpler customization of class creation\u00c2\u00b6\nIt is now possible to customize subclass creation without using a metaclass.\nThe new __init_subclass__ classmethod will be called on the base class\nwhenever a new subclass is created:\nclass PluginBase:\n    subclasses = []\n\n    def __init_subclass__(cls, **kwargs):\n        super().__init_subclass__(**kwargs)\n        cls.subclasses.append(cls)\n\nclass Plugin1(PluginBase):\n    pass\n\nclass Plugin2(PluginBase):\n    pass\n\n\nIn order to allow zero-argument super() calls to work correctly from\n__init_subclass__() implementations, custom metaclasses must\nensure that the new __classcell__ namespace entry is propagated to\ntype.__new__ (as described in Creating the class object).\n\nSee also\n\nPEP 487 \u00e2\u0080\u0093 Simpler customization of class creationPEP written and implemented by Martin Teichmann.\n\n\nFeature documentation\n\n\n\nPEP 487: Descriptor Protocol Enhancements\u00c2\u00b6\nPEP 487 extends the descriptor protocol to include the new optional\n__set_name__() method.  Whenever a new class is defined, the new\nmethod will be called on all descriptors included in the definition, providing\nthem with a reference to the class being defined and the name given to the\ndescriptor within the class namespace.  In other words, instances of\ndescriptors can now know the attribute name of the descriptor in the\nowner class:\nclass IntField:\n    def __get__(self, instance, owner):\n        return instance.__dict__[self.name]\n\n    def __set__(self, instance, value):\n        if not isinstance(value, int):\n            raise ValueError(f'expecting integer in {self.name}')\n        instance.__dict__[self.name] = value\n\n    # this is the new initializer:\n    def __set_name__(self, owner, name):\n        self.name = name\n\nclass Model:\n    int_field = IntField()\n\n\n\nSee also\n\nPEP 487 \u00e2\u0080\u0093 Simpler customization of class creationPEP written and implemented by Martin Teichmann.\n\n\nFeature documentation\n\n\n\nPEP 519: Adding a file system path protocol\u00c2\u00b6\nFile system paths have historically been represented as str\nor bytes objects. This has led to people who write code which\noperate on file system paths to assume that such objects are only one\nof those two types (an int representing a file descriptor\ndoes not count as that is not a file path). Unfortunately that\nassumption prevents alternative object representations of file system\npaths like pathlib from working with pre-existing code,\nincluding Python\u00e2\u0080\u0099s standard library.\nTo fix this situation, a new interface represented by\nos.PathLike has been defined. By implementing the\n__fspath__() method, an object signals that it\nrepresents a path. An object can then provide a low-level\nrepresentation of a file system path as a str or\nbytes object. This means an object is considered\npath-like if it implements\nos.PathLike or is a str or bytes object\nwhich represents a file system path. Code can use os.fspath(),\nos.fsdecode(), or os.fsencode() to explicitly get a\nstr and/or bytes representation of a path-like\nobject.\nThe built-in open() function has been updated to accept\nos.PathLike objects, as have all relevant functions in the\nos and os.path modules, and most other functions and\nclasses in the standard library.  The os.DirEntry class\nand relevant classes in pathlib have also been updated to\nimplement os.PathLike.\nThe hope is that updating the fundamental functions for operating\non file system paths will lead to third-party code to implicitly\nsupport all path-like objects without any\ncode changes, or at least very minimal ones (e.g. calling\nos.fspath() at the beginning of code before operating on a\npath-like object).\nHere are some examples of how the new interface allows for\npathlib.Path to be used more easily and transparently with\npre-existing code:\n>>> import pathlib\n>>> with open(pathlib.Path(\"README\")) as f:\n...     contents = f.read()\n...\n>>> import os.path\n>>> os.path.splitext(pathlib.Path(\"some_file.txt\"))\n('some_file', '.txt')\n>>> os.path.join(\"/a/b\", pathlib.Path(\"c\"))\n'/a/b/c'\n>>> import os\n>>> os.fspath(pathlib.Path(\"some_file.txt\"))\n'some_file.txt'\n\n\n(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle Zijlstra.)\n\nSee also\n\nPEP 519 \u00e2\u0080\u0093 Adding a file system path protocolPEP written by Brett Cannon and Koos Zevenhoven.\n\n\n\n\n\nPEP 495: Local Time Disambiguation\u00c2\u00b6\nIn most world locations, there have been and will be times when local clocks\nare moved back.  In those times, intervals are introduced in which local\nclocks show the same time twice in the same day. In these situations, the\ninformation displayed on a local clock (or stored in a Python datetime\ninstance) is insufficient to identify a particular moment in time.\nPEP 495 adds the new fold attribute to instances of\ndatetime.datetime and datetime.time classes to differentiate\nbetween two moments in time for which local times are the same:\n>>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)\n>>> for i in range(4):\n...     u = u0 + i*HOUR\n...     t = u.astimezone(Eastern)\n...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n...\n04:00:00 UTC = 00:00:00 EDT 0\n05:00:00 UTC = 01:00:00 EDT 0\n06:00:00 UTC = 01:00:00 EST 1\n07:00:00 UTC = 02:00:00 EST 0\n\n\nThe values of the fold attribute have the\nvalue 0 for all instances except those that represent the second\n(chronologically) moment in time in an ambiguous case.\n\nSee also\n\nPEP 495 \u00e2\u0080\u0093 Local Time DisambiguationPEP written by Alexander Belopolsky and Tim Peters, implementation\nby Alexander Belopolsky.\n\n\n\n\n\nPEP 529: Change Windows filesystem encoding to UTF-8\u00c2\u00b6\nRepresenting filesystem paths is best performed with str (Unicode) rather than\nbytes. However, there are some situations where using bytes is sufficient and\ncorrect.\nPrior to Python 3.6, data loss could result when using bytes paths on Windows.\nWith this change, using bytes to represent paths is now supported on Windows,\nprovided those bytes are encoded with the encoding returned by\nsys.getfilesystemencoding(), which now defaults to 'utf-8'.\nApplications that do not use str to represent paths should use\nos.fsencode() and os.fsdecode() to ensure their bytes are\ncorrectly encoded. To revert to the previous behaviour, set\nPYTHONLEGACYWINDOWSFSENCODING or call\nsys._enablelegacywindowsfsencoding().\nSee PEP 529 for more information and discussion of code modifications that\nmay be required.\n\n\nPEP 528: Change Windows console encoding to UTF-8\u00c2\u00b6\nThe default console on Windows will now accept all Unicode characters and\nprovide correctly read str objects to Python code. sys.stdin,\nsys.stdout and sys.stderr now default to utf-8 encoding.\nThis change only applies when using an interactive console, and not when\nredirecting files or pipes. To revert to the previous behaviour for interactive\nconsole use, set PYTHONLEGACYWINDOWSSTDIO.\n\nSee also\n\nPEP 528 \u00e2\u0080\u0093 Change Windows console encoding to UTF-8PEP written and implemented by Steve Dower.\n\n\n\n\n\nPEP 520: Preserving Class Attribute Definition Order\u00c2\u00b6\nAttributes in a class definition body have a natural ordering: the same\norder in which the names appear in the source.  This order is now\npreserved in the new class\u00e2\u0080\u0099s __dict__ attribute.\nAlso, the effective default class execution namespace (returned from\ntype.__prepare__()) is now an insertion-order-preserving\nmapping.\n\nSee also\n\nPEP 520 \u00e2\u0080\u0093 Preserving Class Attribute Definition OrderPEP written and implemented by Eric Snow.\n\n\n\n\n\nPEP 468: Preserving Keyword Argument Order\u00c2\u00b6\n**kwargs in a function signature is now guaranteed to be an\ninsertion-order-preserving mapping.\n\nSee also\n\nPEP 468 \u00e2\u0080\u0093 Preserving Keyword Argument OrderPEP written and implemented by Eric Snow.\n\n\n\n\n\nNew dict implementation\u00c2\u00b6\nThe dict type now uses a \u00e2\u0080\u009ccompact\u00e2\u0080\u009d representation\nbased on a proposal by Raymond Hettinger\nwhich was first implemented by PyPy.\nThe memory usage of the new dict() is between 20% and 25% smaller\ncompared to Python 3.5.\nThe order-preserving aspect of this new implementation is considered an\nimplementation detail and should not be relied upon (this may change in\nthe future, but it is desired to have this new dict implementation in\nthe language for a few releases before changing the language spec to mandate\norder-preserving semantics for all current and future Python\nimplementations; this also helps preserve backwards-compatibility\nwith older versions of the language where random iteration order is\nstill in effect, e.g. Python 3.5).\n(Contributed by INADA Naoki in bpo-27350. Idea\noriginally suggested by Raymond Hettinger.)\n\n\nPEP 523: Adding a frame evaluation API to CPython\u00c2\u00b6\nWhile Python provides extensive support to customize how code\nexecutes, one place it has not done so is in the evaluation of frame\nobjects.  If you wanted some way to intercept frame evaluation in\nPython there really wasn\u00e2\u0080\u0099t any way without directly manipulating\nfunction pointers for defined functions.\nPEP 523 changes this by providing an API to make frame\nevaluation pluggable at the C level. This will allow for tools such\nas debuggers and JITs to intercept frame evaluation before the\nexecution of Python code begins. This enables the use of alternative\nevaluation implementations for Python code, tracking frame\nevaluation, etc.\nThis API is not part of the limited C API and is marked as private to\nsignal that usage of this API is expected to be limited and only\napplicable to very select, low-level use-cases. Semantics of the\nAPI will change with Python as necessary.\n\nSee also\n\nPEP 523 \u00e2\u0080\u0093 Adding a frame evaluation API to CPythonPEP written by Brett Cannon and Dino Viehland.\n\n\n\n\n\nPYTHONMALLOC environment variable\u00c2\u00b6\nThe new PYTHONMALLOC environment variable allows setting the Python\nmemory allocators and installing debug hooks.\nIt is now possible to install debug hooks on Python memory allocators on Python\ncompiled in release mode using PYTHONMALLOC=debug. Effects of debug hooks:\n\nNewly allocated memory is filled with the byte 0xCB\nFreed memory is filled with the byte 0xDB\nDetect violations of the Python memory allocator API. For example,\nPyObject_Free() called on a memory block allocated by\nPyMem_Malloc().\nDetect writes before the start of a buffer (buffer underflows)\nDetect writes after the end of a buffer (buffer overflows)\nCheck that the GIL is held when allocator\nfunctions of PYMEM_DOMAIN_OBJ (ex: PyObject_Malloc()) and\nPYMEM_DOMAIN_MEM (ex: PyMem_Malloc()) domains are called.\n\nChecking if the GIL is held is also a new feature of Python 3.6.\nSee the PyMem_SetupDebugHooks() function for debug hooks on Python\nmemory allocators.\nIt is now also possible to force the usage of the malloc() allocator of\nthe C library for all Python memory allocations using PYTHONMALLOC=malloc.\nThis is helpful when using external memory debuggers like Valgrind on\na Python compiled in release mode.\nOn error, the debug hooks on Python memory allocators now use the\ntracemalloc module to get the traceback where a memory block was\nallocated.\nExample of fatal error on buffer overflow using\npython3.6 -X tracemalloc=5 (store 5 frames in traces):\nDebug memory block at address p=0x7fbcd41666f8: API 'o'\n    4 bytes originally requested\n    The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.\n    The 8 pad bytes at tail=0x7fbcd41666fc are not all FORBIDDENBYTE (0xfb):\n        at tail+0: 0x02 *** OUCH\n        at tail+1: 0xfb\n        at tail+2: 0xfb\n        at tail+3: 0xfb\n        at tail+4: 0xfb\n        at tail+5: 0xfb\n        at tail+6: 0xfb\n        at tail+7: 0xfb\n    The block was made by call #1233329 to debug malloc/realloc.\n    Data at p: 1a 2b 30 00\n\nMemory block allocated at (most recent call first):\n  File \"test/test_bytes.py\", line 323\n  File \"unittest/case.py\", line 600\n  File \"unittest/case.py\", line 648\n  File \"unittest/suite.py\", line 122\n  File \"unittest/suite.py\", line 84\n\nFatal Python error: bad trailing pad byte\n\nCurrent thread 0x00007fbcdbd32700 (most recent call first):\n  File \"test/test_bytes.py\", line 323 in test_hex\n  File \"unittest/case.py\", line 600 in run\n  File \"unittest/case.py\", line 648 in __call__\n  File \"unittest/suite.py\", line 122 in run\n  File \"unittest/suite.py\", line 84 in __call__\n  File \"unittest/suite.py\", line 122 in run\n  File \"unittest/suite.py\", line 84 in __call__\n  ...\n\n\n(Contributed by Victor Stinner in bpo-26516 and bpo-26564.)\n\n\nDTrace and SystemTap probing support\u00c2\u00b6\nPython can now be built --with-dtrace which enables static markers\nfor the following events in the interpreter:\n\nfunction call/return\ngarbage collection started/finished\nline of code executed.\n\nThis can be used to instrument running interpreters in production,\nwithout the need to recompile specific debug builds or providing\napplication-specific profiling/debugging code.\nMore details in Instrumenting CPython with DTrace and SystemTap.\nThe current implementation is tested on Linux and macOS.  Additional\nmarkers may be added in the future.\n(Contributed by \u00c5\u0081ukasz Langa in bpo-21590, based on patches by\nJes\u00c3\u00bas Cea Avi\u00c3\u00b3n, David Malcolm, and Nikhil Benesch.)\n\n\n\nOther Language Changes\u00c2\u00b6\nSome smaller changes made to the core Python language are:\n\nA global or nonlocal statement must now textually appear\nbefore the first use of the affected name in the same scope.\nPreviously this was a SyntaxWarning.\nIt is now possible to set a special method to\nNone to indicate that the corresponding operation is not available.\nFor example, if a class sets __iter__() to None, the class\nis not iterable.\n(Contributed by Andrew Barnert and Ivan Levkivskyi in bpo-25958.)\nLong sequences of repeated traceback lines are now abbreviated as\n\"[Previous line repeated {count} more times]\" (see\ntraceback for an example).\n(Contributed by Emanuel Barry in bpo-26823.)\nImport now raises the new exception ModuleNotFoundError\n(subclass of ImportError) when it cannot find a module.  Code\nthat currently checks for ImportError (in try-except) will still work.\n(Contributed by Eric Snow in bpo-15767.)\nClass methods relying on zero-argument super() will now work correctly\nwhen called from metaclass methods during class creation.\n(Contributed by Martin Teichmann in bpo-23722.)\n\n\n\nNew Modules\u00c2\u00b6\n\nsecrets\u00c2\u00b6\nThe main purpose of the new secrets module is to provide an obvious way\nto reliably generate cryptographically strong pseudo-random values suitable\nfor managing secrets, such as account authentication, tokens, and similar.\n\nWarning\nNote that the pseudo-random generators in the random module\nshould NOT be used for security purposes.  Use secrets\non Python 3.6+ and os.urandom() on Python 3.5 and earlier.\n\n\nSee also\n\nPEP 506 \u00e2\u0080\u0093 Adding A Secrets Module To The Standard LibraryPEP written and implemented by Steven D\u00e2\u0080\u0099Aprano.\n\n\n\n\n\n\nImproved Modules\u00c2\u00b6\n\narray\u00c2\u00b6\nExhausted iterators of array.array will now stay exhausted even\nif the iterated array is extended.  This is consistent with the behavior\nof other mutable sequences.\nContributed by Serhiy Storchaka in bpo-26492.\n\n\nast\u00c2\u00b6\nThe new ast.Constant AST node has been added.  It can be used\nby external AST optimizers for the purposes of constant folding.\nContributed by Victor Stinner in bpo-26146.\n\n\nasyncio\u00c2\u00b6\nStarting with Python 3.6 the asyncio module is no longer provisional and its\nAPI is considered stable.\nNotable changes in the asyncio module since Python 3.5.0\n(all backported to 3.5.x due to the provisional status):\n\nThe get_event_loop() function has been changed to\nalways return the currently running loop when called from coroutines\nand callbacks.\n(Contributed by Yury Selivanov in bpo-28613.)\nThe ensure_future() function and all functions that\nuse it, such as loop.run_until_complete(),\nnow accept all kinds of awaitable objects.\n(Contributed by Yury Selivanov.)\nNew run_coroutine_threadsafe() function to submit\ncoroutines to event loops from other threads.\n(Contributed by Vincent Michel.)\nNew Transport.is_closing()\nmethod to check if the transport is closing or closed.\n(Contributed by Yury Selivanov.)\nThe loop.create_server()\nmethod can now accept a list of hosts.\n(Contributed by Yann Sionneau.)\nNew loop.create_future()\nmethod to create Future objects.  This allows alternative event\nloop implementations, such as\nuvloop, to provide a faster\nasyncio.Future implementation.\n(Contributed by Yury Selivanov in bpo-27041.)\nNew loop.get_exception_handler()\nmethod to get the current exception handler.\n(Contributed by Yury Selivanov in bpo-27040.)\nNew StreamReader.readuntil()\nmethod to read data from the stream until a separator bytes\nsequence appears.\n(Contributed by Mark Korenberg.)\nThe performance of StreamReader.readexactly()\nhas been improved.\n(Contributed by Mark Korenberg in bpo-28370.)\nThe loop.getaddrinfo()\nmethod is optimized to avoid calling the system getaddrinfo\nfunction if the address is already resolved.\n(Contributed by A. Jesse Jiryu Davis.)\nThe loop.stop()\nmethod has been changed to stop the loop immediately after\nthe current iteration.  Any new callbacks scheduled as a result\nof the last iteration will be discarded.\n(Contributed by Guido van Rossum in bpo-25593.)\nFuture.set_exception\nwill now raise TypeError when passed an instance of\nthe StopIteration exception.\n(Contributed by Chris Angelico in bpo-26221.)\nNew loop.connect_accepted_socket()\nmethod to be used by servers that accept connections outside of asyncio,\nbut that use asyncio to handle them.\n(Contributed by Jim Fulton in bpo-27392.)\nTCP_NODELAY flag is now set for all TCP transports by default.\n(Contributed by Yury Selivanov in bpo-27456.)\nNew loop.shutdown_asyncgens()\nto properly close pending asynchronous generators before closing the\nloop.\n(Contributed by Yury Selivanov in bpo-28003.)\nFuture and Task\nclasses now have an optimized C implementation which makes asyncio\ncode up to 30% faster.\n(Contributed by Yury Selivanov and INADA Naoki in bpo-26081\nand bpo-28544.)\n\n\n\nbinascii\u00c2\u00b6\nThe b2a_base64() function now accepts an optional newline\nkeyword argument to control whether the newline character is appended to the\nreturn value.\n(Contributed by Victor Stinner in bpo-25357.)\n\n\ncmath\u00c2\u00b6\nThe new cmath.tau (\u00cf\u0084) constant has been added.\n(Contributed by Lisa Roach in bpo-12345, see PEP 628 for details.)\nNew constants: cmath.inf and cmath.nan to\nmatch math.inf and math.nan, and also cmath.infj\nand cmath.nanj to match the format used by complex repr.\n(Contributed by Mark Dickinson in bpo-23229.)\n\n\ncollections\u00c2\u00b6\nThe new Collection abstract base class has been\nadded to represent sized iterable container classes.\n(Contributed by Ivan Levkivskyi, docs by Neil Girdhar in bpo-27598.)\nThe new Reversible abstract base class represents\niterable classes that also provide the __reversed__() method.\n(Contributed by Ivan Levkivskyi in bpo-25987.)\nThe new AsyncGenerator abstract base class represents\nasynchronous generators.\n(Contributed by Yury Selivanov in bpo-28720.)\nThe namedtuple() function now accepts an optional\nkeyword argument module, which, when specified, is used for\nthe __module__ attribute of the returned named tuple class.\n(Contributed by Raymond Hettinger in bpo-17941.)\nThe verbose and rename arguments for\nnamedtuple() are now keyword-only.\n(Contributed by Raymond Hettinger in bpo-25628.)\nRecursive collections.deque instances can now be pickled.\n(Contributed by Serhiy Storchaka in bpo-26482.)\n\n\nconcurrent.futures\u00c2\u00b6\nThe ThreadPoolExecutor\nclass constructor now accepts an optional thread_name_prefix argument\nto make it possible to customize the names of the threads created by the\npool.\n(Contributed by Gregory P. Smith in bpo-27664.)\n\n\ncontextlib\u00c2\u00b6\nThe contextlib.AbstractContextManager class has been added to\nprovide an abstract base class for context managers.  It provides a\nsensible default implementation for __enter__() which returns\nself and leaves __exit__() an abstract method.  A matching\nclass has been added to the typing module as\ntyping.ContextManager.\n(Contributed by Brett Cannon in bpo-25609.)\n\n\ndatetime\u00c2\u00b6\nThe datetime and time classes have\nthe new fold attribute used to disambiguate local time\nwhen necessary.  Many functions in the datetime have been\nupdated to support local time disambiguation.\nSee Local Time Disambiguation section for more\ninformation.\n(Contributed by Alexander Belopolsky in bpo-24773.)\nThe datetime.strftime() and\ndate.strftime() methods now support\nISO 8601 date directives %G, %u and %V.\n(Contributed by Ashley Anderson in bpo-12006.)\nThe datetime.isoformat() function\nnow accepts an optional timespec argument that specifies the number\nof additional components of the time value to include.\n(Contributed by Alessandro Cucci and Alexander Belopolsky in bpo-19475.)\nThe datetime.combine() now\naccepts an optional tzinfo argument.\n(Contributed by Alexander Belopolsky in bpo-27661.)\n\n\ndecimal\u00c2\u00b6\nNew Decimal.as_integer_ratio()\nmethod that returns a pair (n, d) of integers that represent the given\nDecimal instance as a fraction, in lowest terms and\nwith a positive denominator:\n>>> Decimal('-3.14').as_integer_ratio()\n(-157, 50)\n\n\n(Contributed by Stefan Krah amd Mark Dickinson in bpo-25928.)\n\n\ndistutils\u00c2\u00b6\nThe default_format attribute has been removed from\ndistutils.command.sdist.sdist and the formats\nattribute defaults to ['gztar']. Although not anticipated,\nany code relying on the presence of default_format may\nneed to be adapted. See bpo-27819 for more details.\n\n\nemail\u00c2\u00b6\nThe new email API, enabled via the policy keyword to various constructors, is\nno longer provisional.  The email documentation has been reorganized and\nrewritten to focus on the new API, while retaining the old documentation for\nthe legacy API.  (Contributed by R. David Murray in bpo-24277.)\nThe email.mime classes now all accept an optional policy keyword.\n(Contributed by Berker Peksag in bpo-27331.)\nThe DecodedGenerator now supports the policy\nkeyword.\nThere is a new policy attribute,\nmessage_factory, that controls what class is used\nby default when the parser creates new message objects.  For the\nemail.policy.compat32 policy this is Message,\nfor the new policies it is EmailMessage.\n(Contributed by R. David Murray in bpo-20476.)\n\n\nencodings\u00c2\u00b6\nOn Windows, added the 'oem' encoding to use CP_OEMCP, and the 'ansi'\nalias for the existing 'mbcs' encoding, which uses the CP_ACP code page.\n(Contributed by Steve Dower in bpo-27959.)\n\n\nenum\u00c2\u00b6\nTwo new enumeration base classes have been added to the enum module:\nFlag and IntFlags.  Both are used to define\nconstants that can be combined using the bitwise operators.\n(Contributed by Ethan Furman in bpo-23591.)\nMany standard library modules have been updated to use the\nIntFlags class for their constants.\nThe new enum.auto value can be used to assign values to enum\nmembers automatically:\n>>> from enum import Enum, auto\n>>> class Color(Enum):\n...     red = auto()\n...     blue = auto()\n...     green = auto()\n...\n>>> list(Color)\n[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]\n\n\n\n\nfaulthandler\u00c2\u00b6\nOn Windows, the faulthandler module now installs a handler for Windows\nexceptions: see faulthandler.enable(). (Contributed by Victor Stinner in\nbpo-23848.)\n\n\nfileinput\u00c2\u00b6\nhook_encoded() now supports the errors argument.\n(Contributed by Joseph Hackman in bpo-25788.)\n\n\nhashlib\u00c2\u00b6\nhashlib supports OpenSSL 1.1.0.  The minimum recommend version is 1.0.2.\n(Contributed by Christian Heimes in bpo-26470.)\nBLAKE2 hash functions were added to the module. blake2b()\nand blake2s() are always available and support the full\nfeature set of BLAKE2.\n(Contributed by Christian Heimes in bpo-26798 based on code by\nDmitry Chestnykh and Samuel Neves. Documentation written by Dmitry Chestnykh.)\nThe SHA-3 hash functions sha3_224(), sha3_256(),\nsha3_384(), sha3_512(), and SHAKE hash functions\nshake_128() and shake_256() were added.\n(Contributed by Christian Heimes in bpo-16113. Keccak Code Package\nby Guido Bertoni, Joan Daemen, Micha\u00c3\u00abl Peeters, Gilles Van Assche, and\nRonny Van Keer.)\nThe password-based key derivation function scrypt() is now\navailable with OpenSSL 1.1.0 and newer.\n(Contributed by Christian Heimes in bpo-27928.)\n\n\nhttp.client\u00c2\u00b6\nHTTPConnection.request() and\nendheaders() both now support\nchunked encoding request bodies.\n(Contributed by Demian Brecht and Rolf Krahl in bpo-12319.)\n\n\nidlelib and IDLE\u00c2\u00b6\nThe idlelib package is being modernized and refactored to make IDLE look and\nwork better and to make the code easier to understand, test, and improve. Part\nof making IDLE look better, especially on Linux and Mac, is using ttk widgets,\nmostly in the dialogs.  As a result, IDLE no longer runs with tcl/tk 8.4.  It\nnow requires tcl/tk 8.5 or 8.6.  We recommend running the latest release of\neither.\n\u00e2\u0080\u0098Modernizing\u00e2\u0080\u0099 includes renaming and consolidation of idlelib modules. The\nrenaming of files with partial uppercase names is similar to the renaming of,\nfor instance, Tkinter and TkFont to tkinter and tkinter.font in 3.0.  As a\nresult, imports of idlelib files that worked in 3.5 will usually not work in\n3.6.  At least a module name change will be needed (see idlelib/README.txt),\nsometimes more.  (Name changes contributed by Al Swiegart and Terry Reedy in\nbpo-24225.  Most idlelib patches since have been and will be part of the\nprocess.)\nIn compensation, the eventual result with be that some idlelib classes will be\neasier to use, with better APIs and docstrings explaining them.  Additional\nuseful information will be added to idlelib when available.\nNew in 3.6.2:\nMultiple fixes for autocompletion. (Contributed by Louie Lu in bpo-15786.)\nNew in 3.6.3:\nModule Browser (on the File menu, formerly called Class Browser),\nnow displays nested functions and classes in addition to top-level\nfunctions and classes.\n(Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan Reedy\nin bpo-1612262.)\nThe IDLE features formerly implemented as extensions have been reimplemented\nas normal features.  Their settings have been moved from the Extensions tab\nto other dialog tabs.\n(Contributed by Charles Wohlganger and Terry Jan Reedy in bpo-27099.)\nThe Settings dialog (Options, Configure IDLE) has been partly rewritten\nto improve both appearance and function.\n(Contributed by Cheryl Sabella and Terry Jan Reedy in multiple issues.)\nNew in 3.6.4:\nThe font sample now includes a selection of non-Latin characters so that\nusers can better see the effect of selecting a particular font.\n(Contributed by Terry Jan Reedy in bpo-13802.)\nThe sample can be edited to include other characters.\n(Contributed by Serhiy Storchaka in bpo-31860.)\nNew in 3.6.6:\nEditor code context option revised.  Box displays all context lines up to\nmaxlines.  Clicking on a context line jumps the editor to that line.  Context\ncolors for custom themes is added to Highlights tab of Settings dialog.\n(Contributed by Cheryl Sabella and Terry Jan Reedy in bpo-33642,\nbpo-33768, and bpo-33679.)\nOn Windows, a new API call tells Windows that tk scales for DPI. On Windows\n8.1+ or 10, with DPI compatibility properties of the Python binary\nunchanged, and a monitor resolution greater than 96 DPI, this should\nmake text and lines sharper.  It should otherwise have no effect.\n(Contributed by Terry Jan Reedy in bpo-33656.)\nNew in 3.6.7:\nOutput over N lines (50 by default) is squeezed down to a button.\nN can be changed in the PyShell section of the General page of the\nSettings dialog.  Fewer, but possibly extra long, lines can be squeezed by\nright clicking on the output.  Squeezed output can be expanded in place\nby double-clicking the button or into the clipboard or a separate window\nby right-clicking the button.  (Contributed by Tal Einat in bpo-1529353.)\n\n\nimportlib\u00c2\u00b6\nImport now raises the new exception ModuleNotFoundError\n(subclass of ImportError) when it cannot find a module.  Code\nthat current checks for ImportError (in try-except) will still work.\n(Contributed by Eric Snow in bpo-15767.)\nimportlib.util.LazyLoader now calls\ncreate_module() on the wrapped loader, removing the\nrestriction that importlib.machinery.BuiltinImporter and\nimportlib.machinery.ExtensionFileLoader couldn\u00e2\u0080\u0099t be used with\nimportlib.util.LazyLoader.\nimportlib.util.cache_from_source(),\nimportlib.util.source_from_cache(), and\nimportlib.util.spec_from_file_location() now accept a\npath-like object.\n\n\ninspect\u00c2\u00b6\nThe inspect.signature() function now reports the\nimplicit .0 parameters generated by the compiler for comprehension and\ngenerator expression scopes as if they were positional-only parameters called\nimplicit0. (Contributed by Jelle Zijlstra in bpo-19611.)\nTo reduce code churn when upgrading from Python 2.7 and the legacy\ninspect.getargspec() API, the previously documented deprecation of\ninspect.getfullargspec() has been reversed. While this function is\nconvenient for single/source Python 2/3 code bases, the richer\ninspect.signature() interface remains the recommended approach for new\ncode. (Contributed by Nick Coghlan in bpo-27172)\n\n\njson\u00c2\u00b6\njson.load() and json.loads() now support binary input.  Encoded\nJSON should be represented using either UTF-8, UTF-16, or UTF-32.\n(Contributed by Serhiy Storchaka in bpo-17909.)\n\n\nlogging\u00c2\u00b6\nThe new WatchedFileHandler.reopenIfNeeded()\nmethod has been added to add the ability to check if the log file needs to\nbe reopened.\n(Contributed by Marian Horban in bpo-24884.)\n\n\nmath\u00c2\u00b6\nThe tau (\u00cf\u0084) constant has been added to the math and cmath\nmodules.\n(Contributed by Lisa Roach in bpo-12345, see PEP 628 for details.)\n\n\nmultiprocessing\u00c2\u00b6\nProxy Objects returned by\nmultiprocessing.Manager() can now be nested.\n(Contributed by Davin Potts in bpo-6766.)\n\n\nos\u00c2\u00b6\nSee the summary of PEP 519 for details on how the\nos and os.path modules now support\npath-like objects.\nscandir() now supports bytes paths on Windows.\nA new close() method allows explicitly closing a\nscandir() iterator.  The scandir() iterator now\nsupports the context manager protocol.  If a scandir()\niterator is neither exhausted nor explicitly closed a ResourceWarning\nwill be emitted in its destructor.\n(Contributed by Serhiy Storchaka in bpo-25994.)\nOn Linux, os.urandom() now blocks until the system urandom entropy pool\nis initialized to increase the security. See the PEP 524 for the rationale.\nThe Linux getrandom() syscall (get random bytes) is now exposed as the new\nos.getrandom() function.\n(Contributed by Victor Stinner, part of the PEP 524)\n\n\npathlib\u00c2\u00b6\npathlib now supports path-like objects.\n(Contributed by Brett Cannon in bpo-27186.)\nSee the summary of PEP 519 for details.\n\n\npdb\u00c2\u00b6\nThe Pdb class constructor has a new optional readrc argument\nto control whether .pdbrc files should be read.\n\n\npickle\u00c2\u00b6\nObjects that need __new__ called with keyword arguments can now be pickled\nusing pickle protocols older than protocol version 4.\nProtocol version 4 already supports this case.  (Contributed by Serhiy\nStorchaka in bpo-24164.)\n\n\npickletools\u00c2\u00b6\npickletools.dis() now outputs the implicit memo index for the\nMEMOIZE opcode.\n(Contributed by Serhiy Storchaka in bpo-25382.)\n\n\npydoc\u00c2\u00b6\nThe pydoc module has learned to respect the MANPAGER\nenvironment variable.\n(Contributed by Matthias Klose in bpo-8637.)\nhelp() and pydoc can now list named tuple fields in the\norder they were defined rather than alphabetically.\n(Contributed by Raymond Hettinger in bpo-24879.)\n\n\nrandom\u00c2\u00b6\nThe new choices() function returns a list of elements of\nspecified size from the given population with optional weights.\n(Contributed by Raymond Hettinger in bpo-18844.)\n\n\nre\u00c2\u00b6\nAdded support of modifier spans in regular expressions.  Examples:\n'(?i:p)ython' matches 'python' and 'Python', but not 'PYTHON';\n'(?i)g(?-i:v)r' matches 'GvR' and 'gvr', but not 'GVR'.\n(Contributed by Serhiy Storchaka in bpo-433028.)\nMatch object groups can be accessed by __getitem__, which is\nequivalent to group().  So mo['name'] is now equivalent to\nmo.group('name').  (Contributed by Eric Smith in bpo-24454.)\nMatch objects now support\nindex-like objects as group\nindices.\n(Contributed by Jeroen Demeyer and Xiang Zhang in bpo-27177.)\n\n\nreadline\u00c2\u00b6\nAdded set_auto_history() to enable or disable\nautomatic addition of input to the history list.  (Contributed by\nTyler Crompton in bpo-26870.)\n\n\nrlcompleter\u00c2\u00b6\nPrivate and special attribute names now are omitted unless the prefix starts\nwith underscores.  A space or a colon is added after some completed keywords.\n(Contributed by Serhiy Storchaka in bpo-25011 and bpo-25209.)\n\n\nshlex\u00c2\u00b6\nThe shlex has much\nimproved shell compatibility\nthrough the new punctuation_chars argument to control which characters\nare treated as punctuation.\n(Contributed by Vinay Sajip in bpo-1521950.)\n\n\nsite\u00c2\u00b6\nWhen specifying paths to add to sys.path in a .pth file,\nyou may now specify file paths on top of directories (e.g. zip files).\n(Contributed by Wolfgang Langner in bpo-26587).\n\n\nsqlite3\u00c2\u00b6\nsqlite3.Cursor.lastrowid now supports the REPLACE statement.\n(Contributed by Alex LordThorsen in bpo-16864.)\n\n\nsocket\u00c2\u00b6\nThe ioctl() function now supports the\nSIO_LOOPBACK_FAST_PATH control code.\n(Contributed by Daniel Stokes in bpo-26536.)\nThe getsockopt() constants SO_DOMAIN,\nSO_PROTOCOL, SO_PEERSEC, and SO_PASSSEC are now supported.\n(Contributed by Christian Heimes in bpo-26907.)\nThe setsockopt() now supports the\nsetsockopt(level, optname, None, optlen: int) form.\n(Contributed by Christian Heimes in bpo-27744.)\nThe socket module now supports the address family\nAF_ALG to interface with Linux Kernel crypto API. ALG_*,\nSOL_ALG and sendmsg_afalg() were added.\n(Contributed by Christian Heimes in bpo-27744 with support from\nVictor Stinner.)\nNew Linux constants TCP_USER_TIMEOUT and TCP_CONGESTION were added.\n(Contributed by Omar Sandoval, issue:26273).\n\n\nsocketserver\u00c2\u00b6\nServers based on the socketserver module, including those\ndefined in http.server, xmlrpc.server and\nwsgiref.simple_server, now support the context manager\nprotocol.\n(Contributed by Aviv Palivoda in bpo-26404.)\nThe wfile attribute of\nStreamRequestHandler classes now implements\nthe io.BufferedIOBase writable interface.  In particular,\ncalling write() is now guaranteed to send the\ndata in full.  (Contributed by Martin Panter in bpo-26721.)\n\n\nssl\u00c2\u00b6\nssl supports OpenSSL 1.1.0.  The minimum recommend version is 1.0.2.\n(Contributed by Christian Heimes in bpo-26470.)\n3DES has been removed from the default cipher suites and ChaCha20 Poly1305\ncipher suites have been added.\n(Contributed by Christian Heimes in bpo-27850 and bpo-27766.)\nSSLContext has better default configuration for options\nand ciphers.\n(Contributed by Christian Heimes in bpo-28043.)\nSSL session can be copied from one client-side connection to another\nwith the new SSLSession class.  TLS session resumption can\nspeed up the initial handshake, reduce latency and improve performance\n(Contributed by Christian Heimes in bpo-19500 based on a draft by\nAlex Warhawk.)\nThe new get_ciphers() method can be used to\nget a list of enabled ciphers in order of cipher priority.\nAll constants and flags have been converted to IntEnum and\nIntFlags.\n(Contributed by Christian Heimes in bpo-28025.)\nServer and client-side specific TLS protocols for SSLContext\nwere added.\n(Contributed by Christian Heimes in bpo-28085.)\n\n\nstatistics\u00c2\u00b6\nA new harmonic_mean() function has been added.\n(Contributed by Steven D\u00e2\u0080\u0099Aprano in bpo-27181.)\n\n\nstruct\u00c2\u00b6\nstruct now supports IEEE 754 half-precision floats via the 'e'\nformat specifier.\n(Contributed by Eli Stevens, Mark Dickinson in bpo-11734.)\n\n\nsubprocess\u00c2\u00b6\nsubprocess.Popen destructor now emits a ResourceWarning warning\nif the child process is still running. Use the context manager protocol (with\nproc: ...) or explicitly call the wait() method to\nread the exit status of the child process. (Contributed by Victor Stinner in\nbpo-26741.)\nThe subprocess.Popen constructor and all functions that pass arguments\nthrough to it now accept encoding and errors arguments. Specifying either\nof these will enable text mode for the stdin, stdout and stderr streams.\n(Contributed by Steve Dower in bpo-6135.)\n\n\nsys\u00c2\u00b6\nThe new getfilesystemencodeerrors() function returns the name of\nthe error mode used to convert between Unicode filenames and bytes filenames.\n(Contributed by Steve Dower in bpo-27781.)\nOn Windows the return value of the getwindowsversion() function\nnow includes the platform_version field which contains the accurate major\nversion, minor version and build number of the current operating system,\nrather than the version that is being emulated for the process\n(Contributed by Steve Dower in bpo-27932.)\n\n\ntelnetlib\u00c2\u00b6\nTelnet is now a context manager (contributed by\nSt\u00c3\u00a9phane Wirtel in bpo-25485).\n\n\ntime\u00c2\u00b6\nThe struct_time attributes tm_gmtoff and\ntm_zone are now available on all platforms.\n\n\ntimeit\u00c2\u00b6\nThe new Timer.autorange() convenience\nmethod has been added to call Timer.timeit()\nrepeatedly so that the total run time is greater or equal to 200 milliseconds.\n(Contributed by Steven D\u00e2\u0080\u0099Aprano in bpo-6422.)\ntimeit now warns when there is substantial (4x) variance\nbetween best and worst times.\n(Contributed by Serhiy Storchaka in bpo-23552.)\n\n\ntkinter\u00c2\u00b6\nAdded methods trace_add(),\ntrace_remove() and trace_info()\nin the tkinter.Variable class.  They replace old methods\ntrace_variable(), trace(),\ntrace_vdelete() and\ntrace_vinfo() that use obsolete Tcl commands and might\nnot work in future versions of Tcl.\n(Contributed by Serhiy Storchaka in bpo-22115).\n\n\ntraceback\u00c2\u00b6\nBoth the traceback module and the interpreter\u00e2\u0080\u0099s builtin exception display now\nabbreviate long sequences of repeated lines in tracebacks as shown in the\nfollowing example:\n>>> def f(): f()\n...\n>>> f()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 1, in f\n  File \"<stdin>\", line 1, in f\n  File \"<stdin>\", line 1, in f\n  [Previous line repeated 995 more times]\nRecursionError: maximum recursion depth exceeded\n\n\n(Contributed by Emanuel Barry in bpo-26823.)\n\n\ntracemalloc\u00c2\u00b6\nThe tracemalloc module now supports tracing memory allocations in\nmultiple different address spaces.\nThe new DomainFilter filter class has been added\nto filter block traces by their address space (domain).\n(Contributed by Victor Stinner in bpo-26588.)\n\n\ntyping\u00c2\u00b6\nSince the typing module is provisional,\nall changes introduced in Python 3.6 have also been\nbackported to Python 3.5.x.\nThe typing module has a much improved support for generic type\naliases.  For example Dict[str, Tuple[S, T]] is now a valid\ntype annotation.\n(Contributed by Guido van Rossum in Github #195.)\nThe typing.ContextManager class has been added for\nrepresenting contextlib.AbstractContextManager.\n(Contributed by Brett Cannon in bpo-25609.)\nThe typing.Collection class has been added for\nrepresenting collections.abc.Collection.\n(Contributed by Ivan Levkivskyi in bpo-27598.)\nThe typing.ClassVar type construct has been added to\nmark class variables.  As introduced in PEP 526, a variable annotation\nwrapped in ClassVar indicates that a given attribute is intended to be used as\na class variable and should not be set on instances of that class.\n(Contributed by Ivan Levkivskyi in Github #280.)\nA new TYPE_CHECKING constant that is assumed to be\nTrue by the static type checkers, but is False at runtime.\n(Contributed by Guido van Rossum in Github #230.)\nA new NewType() helper function has been added to create\nlightweight distinct types for annotations:\nfrom typing import NewType\n\nUserId = NewType('UserId', int)\nsome_id = UserId(524313)\n\n\nThe static type checker will treat the new type as if it were a subclass\nof the original type.  (Contributed by Ivan Levkivskyi in Github #189.)\n\n\nunicodedata\u00c2\u00b6\nThe unicodedata module now uses data from Unicode 9.0.0.\n(Contributed by Benjamin Peterson.)\n\n\nunittest.mock\u00c2\u00b6\nThe Mock class has the following improvements:\n\nTwo new methods, Mock.assert_called() and Mock.assert_called_once() to check if the mock object\nwas called.\n(Contributed by Amit Saha in bpo-26323.)\nThe Mock.reset_mock() method\nnow has two optional keyword only arguments: return_value and\nside_effect.\n(Contributed by Kushal Das in bpo-21271.)\n\n\n\nurllib.request\u00c2\u00b6\nIf a HTTP request has a file or iterable body (other than a\nbytes object) but no Content-Length header, rather than\nthrowing an error, AbstractHTTPHandler now\nfalls back to use chunked transfer encoding.\n(Contributed by Demian Brecht and Rolf Krahl in bpo-12319.)\n\n\nurllib.robotparser\u00c2\u00b6\nRobotFileParser now supports the Crawl-delay and\nRequest-rate extensions.\n(Contributed by Nikolay Bogoychev in bpo-16099.)\n\n\nvenv\u00c2\u00b6\nvenv accepts a new parameter --prompt. This parameter provides an\nalternative prefix for the virtual environment. (Proposed by \u00c5\u0081ukasz Balcerzak\nand ported to 3.6 by St\u00c3\u00a9phane Wirtel in bpo-22829.)\n\n\nwarnings\u00c2\u00b6\nA new optional source parameter has been added to the\nwarnings.warn_explicit() function: the destroyed object which emitted a\nResourceWarning. A source attribute has also been added to\nwarnings.WarningMessage (contributed by Victor Stinner in\nbpo-26568 and bpo-26567).\nWhen a ResourceWarning warning is logged, the tracemalloc module is now\nused to try to retrieve the traceback where the destroyed object was allocated.\nExample with the script example.py:\nimport warnings\n\ndef func():\n    return open(__file__)\n\nf = func()\nf = None\n\n\nOutput of the command python3.6 -Wd -X tracemalloc=5 example.py:\nexample.py:7: ResourceWarning: unclosed file <_io.TextIOWrapper name='example.py' mode='r' encoding='UTF-8'>\n  f = None\nObject allocated at (most recent call first):\n  File \"example.py\", lineno 4\n    return open(__file__)\n  File \"example.py\", lineno 6\n    f = func()\n\n\nThe \u00e2\u0080\u009cObject allocated at\u00e2\u0080\u009d traceback is new and is only displayed if\ntracemalloc is tracing Python memory allocations and if the\nwarnings module was already imported.\n\n\nwinreg\u00c2\u00b6\nAdded the 64-bit integer type REG_QWORD.\n(Contributed by Clement Rouault in bpo-23026.)\n\n\nwinsound\u00c2\u00b6\nAllowed keyword arguments to be passed to Beep,\nMessageBeep, and PlaySound (bpo-27982).\n\n\nxmlrpc.client\u00c2\u00b6\nThe xmlrpc.client module now supports unmarshalling\nadditional data types used by the Apache XML-RPC implementation\nfor numerics and None.\n(Contributed by Serhiy Storchaka in bpo-26885.)\n\n\nzipfile\u00c2\u00b6\nA new ZipInfo.from_file() class method\nallows making a ZipInfo instance from a filesystem file.\nA new ZipInfo.is_dir() method can be used\nto check if the ZipInfo instance represents a directory.\n(Contributed by Thomas Kluyver in bpo-26039.)\nThe ZipFile.open() method can now be used to\nwrite data into a ZIP file, as well as for extracting data.\n(Contributed by Thomas Kluyver in bpo-26039.)\n\n\nzlib\u00c2\u00b6\nThe compress() and decompress() functions now accept\nkeyword arguments.\n(Contributed by Aviv Palivoda in bpo-26243 and\nXiang Zhang in bpo-16764 respectively.)\n\n\n\nOptimizations\u00c2\u00b6\n\nThe Python interpreter now uses a 16-bit wordcode instead of bytecode which\nmade a number of opcode optimizations possible.\n(Contributed by Demur Rumed with input and reviews from\nSerhiy Storchaka and Victor Stinner in bpo-26647 and bpo-28050.)\nThe asyncio.Future class now has an optimized C implementation.\n(Contributed by Yury Selivanov and INADA Naoki in bpo-26081.)\nThe asyncio.Task class now has an optimized\nC implementation. (Contributed by Yury Selivanov in bpo-28544.)\nVarious implementation improvements in the typing module\n(such as caching of generic types) allow up to 30 times performance\nimprovements and reduced memory footprint.\nThe ASCII decoder is now up to 60 times as fast for error handlers\nsurrogateescape, ignore and replace (Contributed\nby Victor Stinner in bpo-24870).\nThe ASCII and the Latin1 encoders are now up to 3 times as fast for the\nerror handler surrogateescape\n(Contributed by Victor Stinner in bpo-25227).\nThe UTF-8 encoder is now up to 75 times as fast for error handlers\nignore, replace, surrogateescape, surrogatepass (Contributed\nby Victor Stinner in bpo-25267).\nThe UTF-8 decoder is now up to 15 times as fast for error handlers\nignore, replace and surrogateescape (Contributed\nby Victor Stinner in bpo-25301).\nbytes % args is now up to 2 times faster. (Contributed by Victor Stinner\nin bpo-25349).\nbytearray % args is now between 2.5 and 5 times faster. (Contributed by\nVictor Stinner in bpo-25399).\nOptimize bytes.fromhex() and bytearray.fromhex(): they are now\nbetween 2x and 3.5x faster. (Contributed by Victor Stinner in bpo-25401).\nOptimize bytes.replace(b'', b'.') and bytearray.replace(b'', b'.'):\nup to 80% faster. (Contributed by Josh Snider in bpo-26574).\nAllocator functions of the PyMem_Malloc() domain\n(PYMEM_DOMAIN_MEM) now use the pymalloc memory allocator instead of malloc() function of the C library. The\npymalloc allocator is optimized for objects smaller or equal to 512 bytes\nwith a short lifetime, and use malloc() for larger memory blocks.\n(Contributed by Victor Stinner in bpo-26249).\npickle.load() and pickle.loads() are now up to 10% faster when\ndeserializing many small objects (Contributed by Victor Stinner in\nbpo-27056).\nPassing keyword arguments to a function has an\noverhead in comparison with passing positional arguments.  Now in extension functions implemented with using\nArgument Clinic this overhead is significantly decreased.\n(Contributed by Serhiy Storchaka in bpo-27574).\nOptimized glob() and iglob() functions in the\nglob module; they are now about 3\u00e2\u0080\u00936 times faster.\n(Contributed by Serhiy Storchaka in bpo-25596).\nOptimized globbing in pathlib by using os.scandir();\nit is now about 1.5\u00e2\u0080\u00934 times faster.\n(Contributed by Serhiy Storchaka in bpo-26032).\nxml.etree.ElementTree parsing, iteration and deepcopy performance\nhas been significantly improved.\n(Contributed by Serhiy Storchaka in bpo-25638, bpo-25873,\nand bpo-25869.)\nCreation of fractions.Fraction instances from floats and\ndecimals is now 2 to 3 times faster.\n(Contributed by Serhiy Storchaka in bpo-25971.)\n\n\n\nBuild and C API Changes\u00c2\u00b6\n\nPython now requires some C99 support in the toolchain to build.\nMost notably, Python now uses standard integer types and macros in\nplace of custom macros like PY_LONG_LONG.\nFor more information, see PEP 7 and bpo-17884.\nCross-compiling CPython with the Android NDK and the Android API level set to\n21 (Android 5.0 Lollipop) or greater runs successfully. While Android is not\nyet a supported platform, the Python test suite runs on the Android emulator\nwith only about 16 tests failures. See the Android meta-issue bpo-26865.\nThe --enable-optimizations configure flag has been added. Turning it on\nwill activate expensive optimizations like PGO.\n(Original patch by Alecsandru Patrascu of Intel in bpo-26359.)\nThe GIL must now be held when allocator\nfunctions of PYMEM_DOMAIN_OBJ (ex: PyObject_Malloc()) and\nPYMEM_DOMAIN_MEM (ex: PyMem_Malloc()) domains are called.\nNew Py_FinalizeEx() API which indicates if flushing buffered data\nfailed.\n(Contributed by Martin Panter in bpo-5319.)\nPyArg_ParseTupleAndKeywords() now supports positional-only\nparameters.  Positional-only parameters are\ndefined by empty names.\n(Contributed by Serhiy Storchaka in bpo-26282).\nPyTraceback_Print method now abbreviates long sequences of repeated lines\nas \"[Previous line repeated {count} more times]\".\n(Contributed by Emanuel Barry in bpo-26823.)\nThe new PyErr_SetImportErrorSubclass() function allows for\nspecifying a subclass of ImportError to raise.\n(Contributed by Eric Snow in bpo-15767.)\nThe new PyErr_ResourceWarning() function can be used to generate\na ResourceWarning providing the source of the resource allocation.\n(Contributed by Victor Stinner in bpo-26567.)\nThe new PyOS_FSPath() function returns the file system\nrepresentation of a path-like object.\n(Contributed by Brett Cannon in bpo-27186.)\nThe PyUnicode_FSConverter() and PyUnicode_FSDecoder()\nfunctions will now accept path-like objects.\n\n\n\nOther Improvements\u00c2\u00b6\n\nWhen --version (short form: -V) is supplied twice,\nPython prints sys.version for detailed information.\n$ ./python -VV\nPython 3.6.0b4+ (3.6:223967b49e49+, Nov 21 2016, 20:55:04)\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]\n\n\n\n\n\n\nDeprecated\u00c2\u00b6\n\nNew Keywords\u00c2\u00b6\nasync and await are not recommended to be used as variable, class,\nfunction or module names.  Introduced by PEP 492 in Python 3.5, they will\nbecome proper keywords in Python 3.7.  Starting in Python 3.6, the use of\nasync or await as names will generate a DeprecationWarning.\n\n\nDeprecated Python behavior\u00c2\u00b6\nRaising the StopIteration exception inside a generator will now\ngenerate a DeprecationWarning, and will trigger a RuntimeError\nin Python 3.7.  See PEP 479: Change StopIteration handling inside generators for details.\nThe __aiter__() method is now expected to return an asynchronous\niterator directly instead of returning an awaitable as previously.\nDoing the former will trigger a DeprecationWarning.  Backward\ncompatibility will be removed in Python 3.7.\n(Contributed by Yury Selivanov in bpo-27243.)\nA backslash-character pair that is not a valid escape sequence now generates\na DeprecationWarning.  Although this will eventually become a\nSyntaxError, that will not be for several Python releases.\n(Contributed by Emanuel Barry in bpo-27364.)\nWhen performing a relative import, falling back on __name__ and\n__path__ from the calling module when __spec__ or\n__package__ are not defined now raises an ImportWarning.\n(Contributed by Rose Ames in bpo-25791.)\n\n\nDeprecated Python modules, functions and methods\u00c2\u00b6\n\nasynchat\u00c2\u00b6\nThe asynchat has been deprecated in favor of asyncio.\n(Contributed by Mariatta in bpo-25002.)\n\n\nasyncore\u00c2\u00b6\nThe asyncore has been deprecated in favor of asyncio.\n(Contributed by Mariatta in bpo-25002.)\n\n\ndbm\u00c2\u00b6\nUnlike other dbm implementations, the dbm.dumb module\ncreates databases with the 'rw' mode and allows modifying the database\nopened with the 'r' mode.  This behavior is now deprecated and will\nbe removed in 3.8.\n(Contributed by Serhiy Storchaka in bpo-21708.)\n\n\ndistutils\u00c2\u00b6\nThe undocumented extra_path argument to the\nDistribution constructor is now considered deprecated\nand will raise a warning if set.   Support for this parameter will be\nremoved in a future Python release.  See bpo-27919 for details.\n\n\ngrp\u00c2\u00b6\nThe support of non-integer arguments in getgrgid() has been\ndeprecated.\n(Contributed by Serhiy Storchaka in bpo-26129.)\n\n\nimportlib\u00c2\u00b6\nThe importlib.machinery.SourceFileLoader.load_module() and\nimportlib.machinery.SourcelessFileLoader.load_module() methods\nare now deprecated. They were the only remaining implementations of\nimportlib.abc.Loader.load_module() in importlib that had not\nbeen deprecated in previous versions of Python in favour of\nimportlib.abc.Loader.exec_module().\nThe importlib.machinery.WindowsRegistryFinder class is now\ndeprecated. As of 3.6.0, it is still added to sys.meta_path by\ndefault (on Windows), but this may change in future releases.\n\n\nos\u00c2\u00b6\nUndocumented support of general bytes-like objects\nas paths in os functions, compile() and similar functions is\nnow deprecated.\n(Contributed by Serhiy Storchaka in bpo-25791 and bpo-26754.)\n\n\nre\u00c2\u00b6\nSupport for inline flags (?letters) in the middle of the regular\nexpression has been deprecated and will be removed in a future Python\nversion.  Flags at the start of a regular expression are still allowed.\n(Contributed by Serhiy Storchaka in bpo-22493.)\n\n\nssl\u00c2\u00b6\nOpenSSL 0.9.8, 1.0.0 and 1.0.1 are deprecated and no longer supported.\nIn the future the ssl module will require at least OpenSSL 1.0.2 or\n1.1.0.\nSSL-related arguments like certfile, keyfile and check_hostname\nin ftplib, http.client, imaplib, poplib,\nand smtplib have been deprecated in favor of context.\n(Contributed by Christian Heimes in bpo-28022.)\nA couple of protocols and functions of the ssl module are now\ndeprecated. Some features will no longer be available in future versions\nof OpenSSL. Other features are deprecated in favor of a different API.\n(Contributed by Christian Heimes in bpo-28022 and bpo-26470.)\n\n\ntkinter\u00c2\u00b6\nThe tkinter.tix module is now deprecated.  tkinter users\nshould use tkinter.ttk instead.\n\n\nvenv\u00c2\u00b6\nThe pyvenv script has been deprecated in favour of python3 -m venv.\nThis prevents confusion as to what Python interpreter pyvenv is\nconnected to and thus what Python interpreter will be used by the virtual\nenvironment.  (Contributed by Brett Cannon in bpo-25154.)\n\n\n\nDeprecated functions and types of the C API\u00c2\u00b6\nUndocumented functions PyUnicode_AsEncodedObject(),\nPyUnicode_AsDecodedObject(), PyUnicode_AsEncodedUnicode()\nand PyUnicode_AsDecodedUnicode() are deprecated now.\nUse the generic codec based API instead.\n\n\nDeprecated Build Options\u00c2\u00b6\nThe --with-system-ffi configure flag is now on by default on non-macOS\nUNIX platforms.  It may be disabled by using --without-system-ffi, but\nusing the flag is deprecated and will not be accepted in Python 3.7.\nmacOS is unaffected by this change.  Note that many OS distributors already\nuse the --with-system-ffi flag when building their system Python.\n\n\n\nRemoved\u00c2\u00b6\n\nAPI and Feature Removals\u00c2\u00b6\n\nUnknown escapes consisting of '\\' and an ASCII letter in\nregular expressions will now cause an error.  In replacement templates for\nre.sub() they are still allowed, but deprecated.\nThe re.LOCALE flag can now only be used with binary patterns.\ninspect.getmoduleinfo() was removed (was deprecated since CPython 3.3).\ninspect.getmodulename() should be used for obtaining the module\nname for a given path.\n(Contributed by Yury Selivanov in bpo-13248.)\ntraceback.Ignore class and traceback.usage, traceback.modname,\ntraceback.fullmodname, traceback.find_lines_from_code,\ntraceback.find_lines, traceback.find_strings,\ntraceback.find_executable_lines methods were removed from the\ntraceback module. They were undocumented methods deprecated since\nPython 3.2 and equivalent functionality is available from private methods.\nThe tk_menuBar() and tk_bindForTraversal() dummy methods in\ntkinter widget classes were removed (corresponding Tk commands\nwere obsolete since Tk 4.0).\nThe open() method of the zipfile.ZipFile\nclass no longer supports the 'U' mode (was deprecated since Python 3.4).\nUse io.TextIOWrapper for reading compressed text files in\nuniversal newlines mode.\nThe undocumented IN, CDROM, DLFCN, TYPES, CDIO, and\nSTROPTS modules have been removed.  They had been available in the\nplatform specific Lib/plat-*/ directories, but were chronically out of\ndate, inconsistently available across platforms, and unmaintained.  The\nscript that created these modules is still available in the source\ndistribution at Tools/scripts/h2py.py.\nThe deprecated asynchat.fifo class has been removed.\n\n\n\n\nPorting to Python 3.6\u00c2\u00b6\nThis section lists previously described changes and other bugfixes\nthat may require changes to your code.\n\nChanges in \u00e2\u0080\u0098python\u00e2\u0080\u0099 Command Behavior\u00c2\u00b6\n\nThe output of a special Python build with defined COUNT_ALLOCS,\nSHOW_ALLOC_COUNT or SHOW_TRACK_COUNT macros is now off by\ndefault.  It can be re-enabled using the -X showalloccount option.\nIt now outputs to stderr instead of stdout.\n(Contributed by Serhiy Storchaka in bpo-23034.)\n\n\n\nChanges in the Python API\u00c2\u00b6\n\nopen() will no longer allow combining the 'U' mode flag\nwith '+'.\n(Contributed by Jeff Balogh and John O\u00e2\u0080\u0099Connor in bpo-2091.)\nsqlite3 no longer implicitly commits an open transaction before DDL\nstatements.\nOn Linux, os.urandom() now blocks until the system urandom entropy pool\nis initialized to increase the security.\nWhen importlib.abc.Loader.exec_module() is defined,\nimportlib.abc.Loader.create_module() must also be defined.\nPyErr_SetImportError() now sets TypeError when its msg\nargument is not set. Previously only NULL was returned.\nThe format of the co_lnotab attribute of code objects changed to support\na negative line number delta. By default, Python does not emit bytecode with\na negative line number delta. Functions using frame.f_lineno,\nPyFrame_GetLineNumber() or PyCode_Addr2Line() are not affected.\nFunctions directly decoding co_lnotab should be updated to use a signed\n8-bit integer type for the line number delta, but this is only required to\nsupport applications using a negative line number delta. See\nObjects/lnotab_notes.txt for the co_lnotab format and how to decode\nit, and see the PEP 511 for the rationale.\nThe functions in the compileall module now return booleans instead\nof 1 or 0 to represent success or failure, respectively. Thanks to\nbooleans being a subclass of integers, this should only be an issue if you\nwere doing identity checks for 1 or 0. See bpo-25768.\nReading the port attribute of\nurllib.parse.urlsplit() and urlparse() results\nnow raises ValueError for out-of-range values, rather than\nreturning None.  See bpo-20059.\nThe imp module now raises a DeprecationWarning instead of\nPendingDeprecationWarning.\nThe following modules have had missing APIs added to their __all__\nattributes to match the documented APIs:\ncalendar, cgi, csv,\nElementTree, enum,\nfileinput, ftplib, logging, mailbox,\nmimetypes, optparse, plistlib, smtpd,\nsubprocess, tarfile, threading and\nwave.  This means they will export new symbols when import *\nis used.\n(Contributed by Joel Taddei and Jacek Ko\u00c5\u0082odziej in bpo-23883.)\nWhen performing a relative import, if __package__ does not compare equal\nto __spec__.parent then ImportWarning is raised.\n(Contributed by Brett Cannon in bpo-25791.)\nWhen a relative import is performed and no parent package is known, then\nImportError will be raised. Previously, SystemError could be\nraised. (Contributed by Brett Cannon in bpo-18018.)\nServers based on the socketserver module, including those\ndefined in http.server, xmlrpc.server and\nwsgiref.simple_server, now only catch exceptions derived\nfrom Exception. Therefore if a request handler raises\nan exception like SystemExit or KeyboardInterrupt,\nhandle_error() is no longer called, and\nthe exception will stop a single-threaded server. (Contributed by\nMartin Panter in bpo-23430.)\nspwd.getspnam() now raises a PermissionError instead of\nKeyError if the user doesn\u00e2\u0080\u0099t have privileges.\nThe socket.socket.close() method now raises an exception if\nan error (e.g. EBADF) was reported by the underlying system call.\n(Contributed by Martin Panter in bpo-26685.)\nThe decode_data argument for the smtpd.SMTPChannel and\nsmtpd.SMTPServer constructors is now False by default.\nThis means that the argument passed to\nprocess_message() is now a bytes object by\ndefault, and process_message() will be passed keyword arguments.\nCode that has already been updated in accordance with the deprecation\nwarning generated by 3.5 will not be affected.\nAll optional arguments of the dump(), dumps(),\nload() and loads() functions and\nJSONEncoder and JSONDecoder class\nconstructors in the json module are now keyword-only.\n(Contributed by Serhiy Storchaka in bpo-18726.)\nSubclasses of type which don\u00e2\u0080\u0099t override type.__new__ may no\nlonger use the one-argument form to get the type of an object.\nAs part of PEP 487, the handling of keyword arguments passed to\ntype (other than the metaclass hint, metaclass) is now\nconsistently delegated to object.__init_subclass__(). This means that\ntype.__new__() and type.__init__() both now accept arbitrary\nkeyword arguments, but object.__init_subclass__() (which is called from\ntype.__new__()) will reject them by default. Custom metaclasses\naccepting additional keyword arguments will need to adjust their calls to\ntype.__new__() (whether direct or via super) accordingly.\nIn distutils.command.sdist.sdist, the default_format\nattribute has been removed and is no longer honored. Instead, the\ngzipped tarfile format is the default on all platforms and no\nplatform-specific selection is made.\nIn environments where distributions are\nbuilt on Windows and zip distributions are required, configure\nthe project with a setup.cfg file containing the following:\n[sdist]\nformats=zip\n\n\nThis behavior has also been backported to earlier Python versions\nby Setuptools 26.0.0.\n\nIn the urllib.request module and the\nhttp.client.HTTPConnection.request() method, if no Content-Length\nheader field has been specified and the request body is a file object,\nit is now sent with HTTP 1.1 chunked encoding. If a file object has to\nbe sent to a HTTP 1.0 server, the Content-Length value now has to be\nspecified by the caller.\n(Contributed by Demian Brecht and Rolf Krahl with tweaks from\nMartin Panter in bpo-12319.)\nThe DictReader now returns rows of type\nOrderedDict.\n(Contributed by Steve Holden in bpo-27842.)\nThe crypt.METHOD_CRYPT will no longer be added to crypt.methods\nif unsupported by the platform.\n(Contributed by Victor Stinner in bpo-25287.)\nThe verbose and rename arguments for\nnamedtuple() are now keyword-only.\n(Contributed by Raymond Hettinger in bpo-25628.)\nOn Linux, ctypes.util.find_library() now looks in\nLD_LIBRARY_PATH for shared libraries.\n(Contributed by Vinay Sajip in bpo-9998.)\nThe imaplib.IMAP4 class now handles flags containing the\n']' character in messages sent from the server to improve\nreal-world compatibility.\n(Contributed by Lita Cho in bpo-21815.)\nThe mmap.write() function now returns the number\nof bytes written like other write methods.\n(Contributed by Jakub Stasiak in bpo-26335.)\nThe pkgutil.iter_modules() and pkgutil.walk_packages()\nfunctions now return ModuleInfo named tuples.\n(Contributed by Ramchandra Apte in bpo-17211.)\nre.sub() now raises an error for invalid numerical group\nreferences in replacement templates even if the pattern is not\nfound in the string.  The error message for invalid group references\nnow includes the group index and the position of the reference.\n(Contributed by SilentGhost, Serhiy Storchaka in bpo-25953.)\nzipfile.ZipFile will now raise NotImplementedError for\nunrecognized compression values.  Previously a plain RuntimeError\nwas raised.  Additionally, calling ZipFile methods\non a closed ZipFile or calling the write() method\non a ZipFile created with mode 'r' will raise a ValueError.\nPreviously, a RuntimeError was raised in those scenarios.\nwhen custom metaclasses are combined with zero-argument super() or\ndirect references from methods to the implicit __class__ closure\nvariable, the implicit __classcell__ namespace entry must now be passed\nup to type.__new__ for initialisation. Failing to do so will result in\na DeprecationWarning in Python 3.6 and a RuntimeError in\nPython 3.8.\nWith the introduction of ModuleNotFoundError, import system consumers\nmay start expecting import system replacements to raise that more specific\nexception when appropriate, rather than the less-specific ImportError.\nTo provide future compatibility with such consumers, implementors of\nalternative import systems that completely replace __import__() will\nneed to update their implementations to raise the new subclass when a module\ncan\u00e2\u0080\u0099t be found at all. Implementors of compliant plugins to the default\nimport system shouldn\u00e2\u0080\u0099t need to make any changes, as the default import\nsystem will raise the new subclass when appropriate.\n\n\n\nChanges in the C API\u00c2\u00b6\n\nThe PyMem_Malloc() allocator family now uses the pymalloc allocator rather than the system malloc(). Applications calling\nPyMem_Malloc() without holding the GIL can now crash. Set the\nPYTHONMALLOC environment variable to debug to validate the\nusage of memory allocators in your application. See bpo-26249.\nPy_Exit() (and the main interpreter) now override the exit status\nwith 120 if flushing buffered data failed.  See bpo-5319.\n\n\n\nCPython bytecode changes\u00c2\u00b6\nThere have been several major changes to the bytecode in Python 3.6.\n\nThe Python interpreter now uses a 16-bit wordcode instead of bytecode.\n(Contributed by Demur Rumed with input and reviews from\nSerhiy Storchaka and Victor Stinner in bpo-26647 and bpo-28050.)\nThe new FORMAT_VALUE and BUILD_STRING opcodes as part\nof the  formatted string literal implementation.\n(Contributed by Eric Smith in bpo-25483 and\nSerhiy Storchaka in bpo-27078.)\nThe new BUILD_CONST_KEY_MAP opcode to optimize the creation\nof dictionaries with constant keys.\n(Contributed by Serhiy Storchaka in bpo-27140.)\nThe function call opcodes have been heavily reworked for better performance\nand simpler implementation.\nThe MAKE_FUNCTION, CALL_FUNCTION,\nCALL_FUNCTION_KW and BUILD_MAP_UNPACK_WITH_CALL opcodes\nhave been modified, the new CALL_FUNCTION_EX and\nBUILD_TUPLE_UNPACK_WITH_CALL have been added, and\nCALL_FUNCTION_VAR, CALL_FUNCTION_VAR_KW and MAKE_CLOSURE opcodes\nhave been removed.\n(Contributed by Demur Rumed in bpo-27095, and Serhiy Storchaka in\nbpo-27213, bpo-28257.)\nThe new SETUP_ANNOTATIONS and STORE_ANNOTATION opcodes\nhave been added to support the new variable annotation syntax.\n(Contributed by Ivan Levkivskyi in bpo-27985.)\n\n\n\n\nNotable changes in Python 3.6.2\u00c2\u00b6\n\nNew make regen-all build target\u00c2\u00b6\nTo simplify cross-compilation, and to ensure that CPython can reliably be\ncompiled without requiring an existing version of Python to already be\navailable, the autotools-based build system no longer attempts to implicitly\nrecompile generated files based on file modification times.\nInstead, a new make regen-all command has been added to force regeneration\nof these files when desired (e.g. after an initial version of Python has\nalready been built based on the pregenerated versions).\nMore selective regeneration targets are also defined - see\nMakefile.pre.in for details.\n(Contributed by Victor Stinner in bpo-23404.)\n\nNew in version 3.6.2.\n\n\n\nRemoval of make touch build target\u00c2\u00b6\nThe make touch build target previously used to request implicit regeneration\nof generated files by updating their modification times has been removed.\nIt has been replaced by the new make regen-all target.\n(Contributed by Victor Stinner in bpo-23404.)\n\nChanged in version 3.6.2.\n\n\n\n\nNotable changes in Python 3.6.4\u00c2\u00b6\nThe PyExc_RecursionErrorInst singleton that was part of the public API\nhas been removed as its members being never cleared may cause a segfault\nduring finalization of the interpreter.\n(Contributed by Xavier de Gaye in bpo-22898 and bpo-30697.)\n\n\nNotable changes in Python 3.6.5\u00c2\u00b6\nThe locale.localeconv() function now sets temporarily the LC_CTYPE\nlocale to the LC_NUMERIC locale in some cases.\n(Contributed by Victor Stinner in bpo-31900.)\n\n\nNotable changes in Python 3.6.7\u00c2\u00b6\nIn 3.6.7 the tokenize module now implicitly emits a NEWLINE token\nwhen provided with input that does not have a trailing new line.  This behavior\nnow matches what the C tokenizer does internally.\n(Contributed by Ammar Askar in bpo-33899.)\n\n\nNotable changes in Python 3.6.10\u00c2\u00b6\nDue to significant security concerns, the reuse_address parameter of\nasyncio.loop.create_datagram_endpoint() is no longer supported. This is\nbecause of the behavior of the socket option SO_REUSEADDR in UDP. For more\ndetails, see the documentation for loop.create_datagram_endpoint().\n(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in\nbpo-37228.)\n\n\nNotable changes in Python 3.6.13\u00c2\u00b6\nEarlier Python versions allowed using both ; and & as\nquery parameter separators in urllib.parse.parse_qs() and\nurllib.parse.parse_qsl().  Due to security concerns, and to conform with\nnewer W3C recommendations, this has been changed to allow only a single\nseparator key, with & as the default.  This change also affects\ncgi.parse() and cgi.parse_multipart() as they use the affected\nfunctions internally. For more details, please see their respective\ndocumentation.\n(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in bpo-42967.)\n\n\n\n\n\n\n\nTable of Contents\n\nWhat\u00e2\u0080\u0099s New In Python 3.6\nSummary \u00e2\u0080\u0093 Release highlights\nNew Features\nPEP 498: Formatted string literals\nPEP 526: Syntax for variable annotations\nPEP 515: Underscores in Numeric Literals\nPEP 525: Asynchronous Generators\nPEP 530: Asynchronous Comprehensions\nPEP 487: Simpler customization of class creation\nPEP 487: Descriptor Protocol Enhancements\nPEP 519: Adding a file system path protocol\nPEP 495: Local Time Disambiguation\nPEP 529: Change Windows filesystem encoding to UTF-8\nPEP 528: Change Windows console encoding to UTF-8\nPEP 520: Preserving Class Attribute Definition Order\nPEP 468: Preserving Keyword Argument Order\nNew dict implementation\nPEP 523: Adding a frame evaluation API to CPython\nPYTHONMALLOC environment variable\nDTrace and SystemTap probing support\n\n\nOther Language Changes\nNew Modules\nsecrets\n\n\nImproved Modules\narray\nast\nasyncio\nbinascii\ncmath\ncollections\nconcurrent.futures\ncontextlib\ndatetime\ndecimal\ndistutils\nemail\nencodings\nenum\nfaulthandler\nfileinput\nhashlib\nhttp.client\nidlelib and IDLE\nimportlib\ninspect\njson\nlogging\nmath\nmultiprocessing\nos\npathlib\npdb\npickle\npickletools\npydoc\nrandom\nre\nreadline\nrlcompleter\nshlex\nsite\nsqlite3\nsocket\nsocketserver\nssl\nstatistics\nstruct\nsubprocess\nsys\ntelnetlib\ntime\ntimeit\ntkinter\ntraceback\ntracemalloc\ntyping\nunicodedata\nunittest.mock\nurllib.request\nurllib.robotparser\nvenv\nwarnings\nwinreg\nwinsound\nxmlrpc.client\nzipfile\nzlib\n\n\nOptimizations\nBuild and C API Changes\nOther Improvements\nDeprecated\nNew Keywords\nDeprecated Python behavior\nDeprecated Python modules, functions and methods\nasynchat\nasyncore\ndbm\ndistutils\ngrp\nimportlib\nos\nre\nssl\ntkinter\nvenv\n\n\nDeprecated functions and types of the C API\nDeprecated Build Options\n\n\nRemoved\nAPI and Feature Removals\n\n\nPorting to Python 3.6\nChanges in \u00e2\u0080\u0098python\u00e2\u0080\u0099 Command Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\n\n\nNotable changes in Python 3.6.2\nNew make regen-all build target\nRemoval of make touch build target\n\n\nNotable changes in Python 3.6.4\nNotable changes in Python 3.6.5\nNotable changes in Python 3.6.7\nNotable changes in Python 3.6.10\nNotable changes in Python 3.6.13\n\n\n\nPrevious topic\nWhat\u00e2\u0080\u0099s New In Python 3.7\nNext topic\nWhat\u00e2\u0080\u0099s New In Python 3.5\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython \u00bb\n\n3.9.5 Documentation \u00bb\n    \nWhat\u00e2\u0080\u0099s New in Python \u00bb\n\n\n\n\n\n\n\n\n\n\n         |\n    \n\n\n\n    \u00a9 Copyright 2001-2021, Python Software Foundation.\n    \n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on May 11, 2021.\n    Found a bug?\n    \n\n    Created using Sphinx 2.4.4.\n    \n\n"